======================================= 1 given SQL query ===========================================
Given individual SQL query: select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.login_id=?
Pre-processed SQL query : select from user user where user.login_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.logincontroller.form() 
called| string org.wallride.web.controller.admin.logincontroller.form() 
after rest| string org.wallride.web.controller.admin.logincontroller.form() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| userdetails org.wallride.service.authorizeduserdetailsservice..enhancerbyspringcglib..a9ef792d.loaduserbyusername(string) 
called| int org.wallride.service.authorizeduserdetailsservice..fastclassbyspringcglib..42e0b94.getindex(signature) 
called| int org.wallride.service.authorizeduserdetailsservice..enhancerbyspringcglib..a9ef792d..fastclassbyspringcglib..4b892a12.getindex(signature) 
called| object org.wallride.service.authorizeduserdetailsservice..fastclassbyspringcglib..42e0b94.invoke(int, object, object[]) 
called| userdetails org.wallride.service.authorizeduserdetailsservice.loaduserbyusername(string) 
called| user com.sun.proxy..proxy190.findonebyloginid(string) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.login_id=?
sql|select roles0_.user_id as user_id1_21_0_, roles0_.role as role2_21_0_ from user_role roles0_ where roles0_.user_id=?
called| boolean org.wallride.support.authorizeduser.isaccountnonlocked() 
called| boolean org.wallride.support.authorizeduser.isenabled() 
called| boolean org.wallride.support.authorizeduser.isaccountnonexpired() 
called| string org.wallride.support.authorizeduser.getpassword() 
called| boolean org.wallride.support.authorizeduser.iscredentialsnonexpired() 
called| collection org.wallride.support.authorizeduser.getauthorities() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.usereditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.7606373407176746
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7606373407176745
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.7606373407176746
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7606373407176745
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.init(authorizeduser,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.7606373407176746
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7606373407176745
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.7606373407176746
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7606373407176745
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.getuserids(usersearchrequest)
method:org.wallride.repository.userrepositoryimpl.searchforid(usersearchrequest)

Syntactic Similarity:0.7606373407176746
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7606373407176745
Path matching:False
Request matching:False



======================================= 2 given SQL query ===========================================
Given individual SQL query: select roles0_.user_id as user_id1_21_0_, roles0_.role as role2_21_0_ from user_role roles0_ where roles0_.user_id=?
Pre-processed SQL query : select from userrole roles where roles.user_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.logincontroller.form() 
called| string org.wallride.web.controller.admin.logincontroller.form() 
after rest| string org.wallride.web.controller.admin.logincontroller.form() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| userdetails org.wallride.service.authorizeduserdetailsservice..enhancerbyspringcglib..a9ef792d.loaduserbyusername(string) 
called| int org.wallride.service.authorizeduserdetailsservice..fastclassbyspringcglib..42e0b94.getindex(signature) 
called| int org.wallride.service.authorizeduserdetailsservice..enhancerbyspringcglib..a9ef792d..fastclassbyspringcglib..4b892a12.getindex(signature) 
called| object org.wallride.service.authorizeduserdetailsservice..fastclassbyspringcglib..42e0b94.invoke(int, object, object[]) 
called| userdetails org.wallride.service.authorizeduserdetailsservice.loaduserbyusername(string) 
called| user com.sun.proxy..proxy190.findonebyloginid(string) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.login_id=?
sql|select roles0_.user_id as user_id1_21_0_, roles0_.role as role2_21_0_ from user_role roles0_ where roles0_.user_id=?
called| boolean org.wallride.support.authorizeduser.isaccountnonlocked() 
called| boolean org.wallride.support.authorizeduser.isenabled() 
called| boolean org.wallride.support.authorizeduser.isaccountnonexpired() 
called| string org.wallride.support.authorizeduser.getpassword() 
called| boolean org.wallride.support.authorizeduser.iscredentialsnonexpired() 
called| collection org.wallride.support.authorizeduser.getauthorities() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]

Syntactic Similarity:0.12372486095970908
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.12372486095970908
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False



======================================= 3 given SQL query ===========================================
Given individual SQL query: select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
Pre-processed SQL query : select count(article.id) from article inner join post where article.status=? and article.language=? and (article.drafted_id is null) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string) 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| specification org.wallride.repository.categoryspecifications.hasposts(string) 
called| list com.sun.proxy..proxy188.findall(specification, sort) 
called| predicate org.wallride.repository.categoryspecifications.lambda$hasposts$76e9cbe1$1(string, root, criteriaquery, criteriabuilder) 
sql|select distinct category0_.id as id1_5_0_, category4_.id as id1_5_1_, children5_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, children5_.created_at as created_2_5_2_, children5_.created_by as created_3_5_2_, children5_.updated_at as updated_4_5_2_, children5_.updated_by as updated_5_5_2_, children5_.code as code6_5_2_, children5_.description as descript7_5_2_, children5_.language as language8_5_2_, children5_.lft as lft9_5_2_, children5_.name as name10_5_2_, children5_.parent_id as parent_12_5_2_, children5_.rgt as rgt11_5_2_, children5_.parent_id as parent_12_5_0__, children5_.id as id1_5_0__ from category category0_ left outer join category category4_ on category0_.parent_id=category4_.id left outer join category children5_ on category0_.id=children5_.parent_id where (category0_.id in (select category3_.id from post post1_ inner join post_category categories2_ on post1_.id=categories2_.post_id inner join category category3_ on categories2_.category_id=category3_.id where post1_.status=?)) and category0_.language=? order by category0_.lft asc
called| sortedset org.wallride.web.controller.admin.dashboardcontroller.popularposts(string) 
called| sortedset org.wallride.service.postservice..enhancerbyspringcglib..2df6d488.getpopularposts(string, popularpost.type) 
called| int org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.getindex(signature) 
called| int org.wallride.service.postservice..enhancerbyspringcglib..2df6d488..fastclassbyspringcglib..6b93db91.getindex(signature) 
called| object org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.invoke(int, object, object[]) 
called| sortedset org.wallride.service.postservice.getpopularposts(string, popularpost.type) 
called| sortedset com.sun.proxy..proxy196.findall(specification) 
called| predicate org.wallride.service.postservice.lambda$getpopularposts$ddedb089$1(string, popularpost.type, root, criteriaquery, criteriabuilder) 
sql|select popularpos0_.id as id1_12_0_, post1_.id as id1_13_1_, media2_.id as id1_8_2_, user3_.id as id1_19_3_, popularpos0_.created_at as created_2_12_0_, popularpos0_.created_by as created_3_12_0_, popularpos0_.updated_at as updated_4_12_0_, popularpos0_.updated_by as updated_5_12_0_, popularpos0_.language as language6_12_0_, popularpos0_.post_id as post_id10_12_0_, popularpos0_.rank as rank7_12_0_, popularpos0_.type as type8_12_0_, popularpos0_.views as views9_12_0_, post1_.created_at as created_2_13_1_, post1_.created_by as created_3_13_1_, post1_.updated_at as updated_4_13_1_, post1_.updated_by as updated_5_13_1_, post1_.author_id as author_17_13_1_, post1_.body as body6_13_1_, post1_.code as code7_13_1_, post1_.cover_id as cover_i18_13_1_, post1_.date as date8_13_1_, post1_.drafted_id as drafted19_13_1_, post1_.drafted_code as drafted_9_13_1_, post1_.language as languag10_13_1_, post1_.seo_description as seo_des11_13_1_, post1_.seo_keywords as seo_key12_13_1_, post1_.seo_title as seo_tit13_13_1_, post1_.status as status14_13_1_, post1_.title as title15_13_1_, post1_.views as views16_13_1_, post1_1_.lft as lft1_10_1_, post1_1_.parent_id as parent_i4_10_1_, post1_1_.rgt as rgt2_10_1_, case when post1_1_.id is not null then ? when post1_2_.id is not null then ? when post1_.id is not null then ? end as clazz_1_, media2_.created_at as created_2_8_2_, media2_.created_by as created_3_8_2_, media2_.updated_at as updated_4_8_2_, media2_.updated_by as updated_5_8_2_, media2_.mime_type as mime_typ6_8_2_, media2_.original_name as original7_8_2_, user3_.created_at as created_2_19_3_, user3_.created_by as created_3_19_3_, user3_.updated_at as updated_4_19_3_, user3_.updated_by as updated_5_19_3_, user3_.description as descript6_19_3_, user3_.email as email7_19_3_, user3_.login_id as login_id8_19_3_, user3_.login_password as login_pa9_19_3_, user3_.name_first as name_fi10_19_3_, user3_.name_last as name_la11_19_3_, user3_.nickname as nicknam12_19_3_ from popular_post popularpos0_ inner join post post1_ on popularpos0_.post_id=post1_.id left outer join page post1_1_ on post1_.id=post1_1_.id left outer join article post1_2_ on post1_.id=post1_2_.id inner join media media2_ on post1_.cover_id=media2_.id inner join user user3_ on post1_.author_id=user3_.id where popularpos0_.language=? and popularpos0_.type=? and post1_.status=?
called| list org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string) 
called| void org.wallride.web.controller.admin.article.articlesearchform.setstatus(post.status) 
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| page org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest, pageable) 
called| page com.sun.proxy..proxy184.search(articlesearchrequest, pageable) 
called| page org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| list org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string) 
after rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebycode(string, string) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebycode(string, string) 
called| article com.sun.proxy..proxy184.findonebycodeandlanguage(string, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.bloglanguagelocaleresolver.resolvelocale(httpservletrequest) 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.metadescription(post) 
called| string org.wallride.web.support.posts.metakeywords(post) 
called| string org.wallride.web.support.posts.title(post) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| pages org.wallride.autoconfigure.wallrideexpressionobjectfactory.createpages(iexpressioncontext) 
called| list org.wallride.web.support.pages.getnodes() 
called| list org.wallride.support.pageutils.getnodes() 
called| list org.wallride.support.pageutils.getnodes(boolean) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| string org.wallride.web.support.users.path(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.19861111111111113
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.2054453262786596

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.13602585723048544
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1360258572304853
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.13602585723048544
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1360258572304853
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.1298900528592714
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1298900528592715
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.12309221015613955
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1230922101561396
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.12309221015613955
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1230922101561396
Path matching:False
Request matching:False



======================================= 4 given SQL query ===========================================
Given individual SQL query: select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
Pre-processed SQL query : select count(page.id) from page inner join post where page.status=? and page.language=? and (page.drafted_id is null) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string) 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| specification org.wallride.repository.categoryspecifications.hasposts(string) 
called| list com.sun.proxy..proxy188.findall(specification, sort) 
called| predicate org.wallride.repository.categoryspecifications.lambda$hasposts$76e9cbe1$1(string, root, criteriaquery, criteriabuilder) 
sql|select distinct category0_.id as id1_5_0_, category4_.id as id1_5_1_, children5_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, children5_.created_at as created_2_5_2_, children5_.created_by as created_3_5_2_, children5_.updated_at as updated_4_5_2_, children5_.updated_by as updated_5_5_2_, children5_.code as code6_5_2_, children5_.description as descript7_5_2_, children5_.language as language8_5_2_, children5_.lft as lft9_5_2_, children5_.name as name10_5_2_, children5_.parent_id as parent_12_5_2_, children5_.rgt as rgt11_5_2_, children5_.parent_id as parent_12_5_0__, children5_.id as id1_5_0__ from category category0_ left outer join category category4_ on category0_.parent_id=category4_.id left outer join category children5_ on category0_.id=children5_.parent_id where (category0_.id in (select category3_.id from post post1_ inner join post_category categories2_ on post1_.id=categories2_.post_id inner join category category3_ on categories2_.category_id=category3_.id where post1_.status=?)) and category0_.language=? order by category0_.lft asc
called| sortedset org.wallride.web.controller.admin.dashboardcontroller.popularposts(string) 
called| sortedset org.wallride.service.postservice..enhancerbyspringcglib..2df6d488.getpopularposts(string, popularpost.type) 
called| int org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.getindex(signature) 
called| int org.wallride.service.postservice..enhancerbyspringcglib..2df6d488..fastclassbyspringcglib..6b93db91.getindex(signature) 
called| object org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.invoke(int, object, object[]) 
called| sortedset org.wallride.service.postservice.getpopularposts(string, popularpost.type) 
called| sortedset com.sun.proxy..proxy196.findall(specification) 
called| predicate org.wallride.service.postservice.lambda$getpopularposts$ddedb089$1(string, popularpost.type, root, criteriaquery, criteriabuilder) 
sql|select popularpos0_.id as id1_12_0_, post1_.id as id1_13_1_, media2_.id as id1_8_2_, user3_.id as id1_19_3_, popularpos0_.created_at as created_2_12_0_, popularpos0_.created_by as created_3_12_0_, popularpos0_.updated_at as updated_4_12_0_, popularpos0_.updated_by as updated_5_12_0_, popularpos0_.language as language6_12_0_, popularpos0_.post_id as post_id10_12_0_, popularpos0_.rank as rank7_12_0_, popularpos0_.type as type8_12_0_, popularpos0_.views as views9_12_0_, post1_.created_at as created_2_13_1_, post1_.created_by as created_3_13_1_, post1_.updated_at as updated_4_13_1_, post1_.updated_by as updated_5_13_1_, post1_.author_id as author_17_13_1_, post1_.body as body6_13_1_, post1_.code as code7_13_1_, post1_.cover_id as cover_i18_13_1_, post1_.date as date8_13_1_, post1_.drafted_id as drafted19_13_1_, post1_.drafted_code as drafted_9_13_1_, post1_.language as languag10_13_1_, post1_.seo_description as seo_des11_13_1_, post1_.seo_keywords as seo_key12_13_1_, post1_.seo_title as seo_tit13_13_1_, post1_.status as status14_13_1_, post1_.title as title15_13_1_, post1_.views as views16_13_1_, post1_1_.lft as lft1_10_1_, post1_1_.parent_id as parent_i4_10_1_, post1_1_.rgt as rgt2_10_1_, case when post1_1_.id is not null then ? when post1_2_.id is not null then ? when post1_.id is not null then ? end as clazz_1_, media2_.created_at as created_2_8_2_, media2_.created_by as created_3_8_2_, media2_.updated_at as updated_4_8_2_, media2_.updated_by as updated_5_8_2_, media2_.mime_type as mime_typ6_8_2_, media2_.original_name as original7_8_2_, user3_.created_at as created_2_19_3_, user3_.created_by as created_3_19_3_, user3_.updated_at as updated_4_19_3_, user3_.updated_by as updated_5_19_3_, user3_.description as descript6_19_3_, user3_.email as email7_19_3_, user3_.login_id as login_id8_19_3_, user3_.login_password as login_pa9_19_3_, user3_.name_first as name_fi10_19_3_, user3_.name_last as name_la11_19_3_, user3_.nickname as nicknam12_19_3_ from popular_post popularpos0_ inner join post post1_ on popularpos0_.post_id=post1_.id left outer join page post1_1_ on post1_.id=post1_1_.id left outer join article post1_2_ on post1_.id=post1_2_.id inner join media media2_ on post1_.cover_id=media2_.id inner join user user3_ on post1_.author_id=user3_.id where popularpos0_.language=? and popularpos0_.type=? and post1_.status=?
called| list org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string) 
called| void org.wallride.web.controller.admin.article.articlesearchform.setstatus(post.status) 
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| page org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest, pageable) 
called| page com.sun.proxy..proxy184.search(articlesearchrequest, pageable) 
called| page org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| list org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string) 
after rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.04020296643247463
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.06568333401810537

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]

Syntactic Similarity:0.31169345455882813
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3116934545588281
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.17978191404280314
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1797819140428032
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.1706376115801548
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.170637611580155
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.1404717089351263
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1404717089351264
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.1404717089351263
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1404717089351264
Path matching:False
Request matching:False



======================================= 5 given SQL query ===========================================
Given individual SQL query: select distinct category0_.id as id1_5_0_, category4_.id as id1_5_1_, children5_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, children5_.created_at as created_2_5_2_, children5_.created_by as created_3_5_2_, children5_.updated_at as updated_4_5_2_, children5_.updated_by as updated_5_5_2_, children5_.code as code6_5_2_, children5_.description as descript7_5_2_, children5_.language as language8_5_2_, children5_.lft as lft9_5_2_, children5_.name as name10_5_2_, children5_.parent_id as parent_12_5_2_, children5_.rgt as rgt11_5_2_, children5_.parent_id as parent_12_5_0__, children5_.id as id1_5_0__ from category category0_ left outer join category category4_ on category0_.parent_id=category4_.id left outer join category children5_ on category0_.id=children5_.parent_id where (category0_.id in (select category3_.id from post post1_ inner join post_category categories2_ on post1_.id=categories2_.post_id inner join category category3_ on categories2_.category_id=category3_.id where post1_.status=?)) and category0_.language=? order by category0_.lft asc
Pre-processed SQL query : select distinct from category left outer join category left outer join category where (category.id in (select category.id from post post inner join post_category categories on post.id=categories.post_id inner join category category on categories.category_id=category.id where post.status=?)) and category.language=?  order by category.lft 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string) 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| specification org.wallride.repository.categoryspecifications.hasposts(string) 
called| list com.sun.proxy..proxy188.findall(specification, sort) 
called| predicate org.wallride.repository.categoryspecifications.lambda$hasposts$76e9cbe1$1(string, root, criteriaquery, criteriabuilder) 
sql|select distinct category0_.id as id1_5_0_, category4_.id as id1_5_1_, children5_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, children5_.created_at as created_2_5_2_, children5_.created_by as created_3_5_2_, children5_.updated_at as updated_4_5_2_, children5_.updated_by as updated_5_5_2_, children5_.code as code6_5_2_, children5_.description as descript7_5_2_, children5_.language as language8_5_2_, children5_.lft as lft9_5_2_, children5_.name as name10_5_2_, children5_.parent_id as parent_12_5_2_, children5_.rgt as rgt11_5_2_, children5_.parent_id as parent_12_5_0__, children5_.id as id1_5_0__ from category category0_ left outer join category category4_ on category0_.parent_id=category4_.id left outer join category children5_ on category0_.id=children5_.parent_id where (category0_.id in (select category3_.id from post post1_ inner join post_category categories2_ on post1_.id=categories2_.post_id inner join category category3_ on categories2_.category_id=category3_.id where post1_.status=?)) and category0_.language=? order by category0_.lft asc
called| sortedset org.wallride.web.controller.admin.dashboardcontroller.popularposts(string) 
called| sortedset org.wallride.service.postservice..enhancerbyspringcglib..2df6d488.getpopularposts(string, popularpost.type) 
called| int org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.getindex(signature) 
called| int org.wallride.service.postservice..enhancerbyspringcglib..2df6d488..fastclassbyspringcglib..6b93db91.getindex(signature) 
called| object org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.invoke(int, object, object[]) 
called| sortedset org.wallride.service.postservice.getpopularposts(string, popularpost.type) 
called| sortedset com.sun.proxy..proxy196.findall(specification) 
called| predicate org.wallride.service.postservice.lambda$getpopularposts$ddedb089$1(string, popularpost.type, root, criteriaquery, criteriabuilder) 
sql|select popularpos0_.id as id1_12_0_, post1_.id as id1_13_1_, media2_.id as id1_8_2_, user3_.id as id1_19_3_, popularpos0_.created_at as created_2_12_0_, popularpos0_.created_by as created_3_12_0_, popularpos0_.updated_at as updated_4_12_0_, popularpos0_.updated_by as updated_5_12_0_, popularpos0_.language as language6_12_0_, popularpos0_.post_id as post_id10_12_0_, popularpos0_.rank as rank7_12_0_, popularpos0_.type as type8_12_0_, popularpos0_.views as views9_12_0_, post1_.created_at as created_2_13_1_, post1_.created_by as created_3_13_1_, post1_.updated_at as updated_4_13_1_, post1_.updated_by as updated_5_13_1_, post1_.author_id as author_17_13_1_, post1_.body as body6_13_1_, post1_.code as code7_13_1_, post1_.cover_id as cover_i18_13_1_, post1_.date as date8_13_1_, post1_.drafted_id as drafted19_13_1_, post1_.drafted_code as drafted_9_13_1_, post1_.language as languag10_13_1_, post1_.seo_description as seo_des11_13_1_, post1_.seo_keywords as seo_key12_13_1_, post1_.seo_title as seo_tit13_13_1_, post1_.status as status14_13_1_, post1_.title as title15_13_1_, post1_.views as views16_13_1_, post1_1_.lft as lft1_10_1_, post1_1_.parent_id as parent_i4_10_1_, post1_1_.rgt as rgt2_10_1_, case when post1_1_.id is not null then ? when post1_2_.id is not null then ? when post1_.id is not null then ? end as clazz_1_, media2_.created_at as created_2_8_2_, media2_.created_by as created_3_8_2_, media2_.updated_at as updated_4_8_2_, media2_.updated_by as updated_5_8_2_, media2_.mime_type as mime_typ6_8_2_, media2_.original_name as original7_8_2_, user3_.created_at as created_2_19_3_, user3_.created_by as created_3_19_3_, user3_.updated_at as updated_4_19_3_, user3_.updated_by as updated_5_19_3_, user3_.description as descript6_19_3_, user3_.email as email7_19_3_, user3_.login_id as login_id8_19_3_, user3_.login_password as login_pa9_19_3_, user3_.name_first as name_fi10_19_3_, user3_.name_last as name_la11_19_3_, user3_.nickname as nicknam12_19_3_ from popular_post popularpos0_ inner join post post1_ on popularpos0_.post_id=post1_.id left outer join page post1_1_ on post1_.id=post1_1_.id left outer join article post1_2_ on post1_.id=post1_2_.id inner join media media2_ on post1_.cover_id=media2_.id inner join user user3_ on post1_.author_id=user3_.id where popularpos0_.language=? and popularpos0_.type=? and post1_.status=?
called| list org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string) 
called| void org.wallride.web.controller.admin.article.articlesearchform.setstatus(post.status) 
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| page org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest, pageable) 
called| page com.sun.proxy..proxy184.search(articlesearchrequest, pageable) 
called| page org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| list org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string) 
after rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.047619047619047616
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.07393483709273183

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.6207748709082914
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.6207748709082914
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.5766224299252336
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5766224299252336
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.5766224299252336
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5766224299252336
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.index(string)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.5766224299252336
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5766224299252336
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.index(string,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.5766224299252336
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5766224299252336
Path matching:False
Request matching:False



======================================= 6 given SQL query ===========================================
Given individual SQL query: select popularpos0_.id as id1_12_0_, post1_.id as id1_13_1_, media2_.id as id1_8_2_, user3_.id as id1_19_3_, popularpos0_.created_at as created_2_12_0_, popularpos0_.created_by as created_3_12_0_, popularpos0_.updated_at as updated_4_12_0_, popularpos0_.updated_by as updated_5_12_0_, popularpos0_.language as language6_12_0_, popularpos0_.post_id as post_id10_12_0_, popularpos0_.rank as rank7_12_0_, popularpos0_.type as type8_12_0_, popularpos0_.views as views9_12_0_, post1_.created_at as created_2_13_1_, post1_.created_by as created_3_13_1_, post1_.updated_at as updated_4_13_1_, post1_.updated_by as updated_5_13_1_, post1_.author_id as author_17_13_1_, post1_.body as body6_13_1_, post1_.code as code7_13_1_, post1_.cover_id as cover_i18_13_1_, post1_.date as date8_13_1_, post1_.drafted_id as drafted19_13_1_, post1_.drafted_code as drafted_9_13_1_, post1_.language as languag10_13_1_, post1_.seo_description as seo_des11_13_1_, post1_.seo_keywords as seo_key12_13_1_, post1_.seo_title as seo_tit13_13_1_, post1_.status as status14_13_1_, post1_.title as title15_13_1_, post1_.views as views16_13_1_, post1_1_.lft as lft1_10_1_, post1_1_.parent_id as parent_i4_10_1_, post1_1_.rgt as rgt2_10_1_, case when post1_1_.id is not null then 1 when post1_2_.id is not null then 2 when post1_.id is not null then 0 end as clazz_1_, media2_.created_at as created_2_8_2_, media2_.created_by as created_3_8_2_, media2_.updated_at as updated_4_8_2_, media2_.updated_by as updated_5_8_2_, media2_.mime_type as mime_typ6_8_2_, media2_.original_name as original7_8_2_, user3_.created_at as created_2_19_3_, user3_.created_by as created_3_19_3_, user3_.updated_at as updated_4_19_3_, user3_.updated_by as updated_5_19_3_, user3_.description as descript6_19_3_, user3_.email as email7_19_3_, user3_.login_id as login_id8_19_3_, user3_.login_password as login_pa9_19_3_, user3_.name_first as name_fi10_19_3_, user3_.name_last as name_la11_19_3_, user3_.nickname as nicknam12_19_3_ from popular_post popularpos0_ inner join post post1_ on popularpos0_.post_id=post1_.id left outer join page post1_1_ on post1_.id=post1_1_.id left outer join article post1_2_ on post1_.id=post1_2_.id inner join media media2_ on post1_.cover_id=media2_.id inner join user user3_ on post1_.author_id=user3_.id where popularpos0_.language=? and popularpos0_.type=? and post1_.status=?
Pre-processed SQL query : select from popularpost inner join post left outer join page left outer join article inner join media inner join user user where popularpos.language=? and popularpos.type=? and post.status=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string) 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| specification org.wallride.repository.categoryspecifications.hasposts(string) 
called| list com.sun.proxy..proxy188.findall(specification, sort) 
called| predicate org.wallride.repository.categoryspecifications.lambda$hasposts$76e9cbe1$1(string, root, criteriaquery, criteriabuilder) 
sql|select distinct category0_.id as id1_5_0_, category4_.id as id1_5_1_, children5_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, children5_.created_at as created_2_5_2_, children5_.created_by as created_3_5_2_, children5_.updated_at as updated_4_5_2_, children5_.updated_by as updated_5_5_2_, children5_.code as code6_5_2_, children5_.description as descript7_5_2_, children5_.language as language8_5_2_, children5_.lft as lft9_5_2_, children5_.name as name10_5_2_, children5_.parent_id as parent_12_5_2_, children5_.rgt as rgt11_5_2_, children5_.parent_id as parent_12_5_0__, children5_.id as id1_5_0__ from category category0_ left outer join category category4_ on category0_.parent_id=category4_.id left outer join category children5_ on category0_.id=children5_.parent_id where (category0_.id in (select category3_.id from post post1_ inner join post_category categories2_ on post1_.id=categories2_.post_id inner join category category3_ on categories2_.category_id=category3_.id where post1_.status=?)) and category0_.language=? order by category0_.lft asc
called| sortedset org.wallride.web.controller.admin.dashboardcontroller.popularposts(string) 
called| sortedset org.wallride.service.postservice..enhancerbyspringcglib..2df6d488.getpopularposts(string, popularpost.type) 
called| int org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.getindex(signature) 
called| int org.wallride.service.postservice..enhancerbyspringcglib..2df6d488..fastclassbyspringcglib..6b93db91.getindex(signature) 
called| object org.wallride.service.postservice..fastclassbyspringcglib..8cfaa0ba.invoke(int, object, object[]) 
called| sortedset org.wallride.service.postservice.getpopularposts(string, popularpost.type) 
called| sortedset com.sun.proxy..proxy196.findall(specification) 
called| predicate org.wallride.service.postservice.lambda$getpopularposts$ddedb089$1(string, popularpost.type, root, criteriaquery, criteriabuilder) 
sql|select popularpos0_.id as id1_12_0_, post1_.id as id1_13_1_, media2_.id as id1_8_2_, user3_.id as id1_19_3_, popularpos0_.created_at as created_2_12_0_, popularpos0_.created_by as created_3_12_0_, popularpos0_.updated_at as updated_4_12_0_, popularpos0_.updated_by as updated_5_12_0_, popularpos0_.language as language6_12_0_, popularpos0_.post_id as post_id10_12_0_, popularpos0_.rank as rank7_12_0_, popularpos0_.type as type8_12_0_, popularpos0_.views as views9_12_0_, post1_.created_at as created_2_13_1_, post1_.created_by as created_3_13_1_, post1_.updated_at as updated_4_13_1_, post1_.updated_by as updated_5_13_1_, post1_.author_id as author_17_13_1_, post1_.body as body6_13_1_, post1_.code as code7_13_1_, post1_.cover_id as cover_i18_13_1_, post1_.date as date8_13_1_, post1_.drafted_id as drafted19_13_1_, post1_.drafted_code as drafted_9_13_1_, post1_.language as languag10_13_1_, post1_.seo_description as seo_des11_13_1_, post1_.seo_keywords as seo_key12_13_1_, post1_.seo_title as seo_tit13_13_1_, post1_.status as status14_13_1_, post1_.title as title15_13_1_, post1_.views as views16_13_1_, post1_1_.lft as lft1_10_1_, post1_1_.parent_id as parent_i4_10_1_, post1_1_.rgt as rgt2_10_1_, case when post1_1_.id is not null then ? when post1_2_.id is not null then ? when post1_.id is not null then ? end as clazz_1_, media2_.created_at as created_2_8_2_, media2_.created_by as created_3_8_2_, media2_.updated_at as updated_4_8_2_, media2_.updated_by as updated_5_8_2_, media2_.mime_type as mime_typ6_8_2_, media2_.original_name as original7_8_2_, user3_.created_at as created_2_19_3_, user3_.created_by as created_3_19_3_, user3_.updated_at as updated_4_19_3_, user3_.updated_by as updated_5_19_3_, user3_.description as descript6_19_3_, user3_.email as email7_19_3_, user3_.login_id as login_id8_19_3_, user3_.login_password as login_pa9_19_3_, user3_.name_first as name_fi10_19_3_, user3_.name_last as name_la11_19_3_, user3_.nickname as nicknam12_19_3_ from popular_post popularpos0_ inner join post post1_ on popularpos0_.post_id=post1_.id left outer join page post1_1_ on post1_.id=post1_1_.id left outer join article post1_2_ on post1_.id=post1_2_.id inner join media media2_ on post1_.cover_id=media2_.id inner join user user3_ on post1_.author_id=user3_.id where popularpos0_.language=? and popularpos0_.type=? and post1_.status=?
called| list org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string) 
called| void org.wallride.web.controller.admin.article.articlesearchform.setstatus(post.status) 
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| page org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest, pageable) 
called| page com.sun.proxy..proxy184.search(articlesearchrequest, pageable) 
called| page org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| list org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string) 
after rest| string org.wallride.web.controller.admin.dashboardcontroller.dashboard(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, False]
request_matching_number_k:[1, 2, 2, 2, 2]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.dashboardcontroller.dashboard(string,model)
method:org.wallride.service.articleservice.countarticlesbystatus(status,string)
method:org.wallride.repository.articlerepository.countbystatus(status,string)
[select count(article.id) from article article where article.status = :status and article.language = :language and article.drafted is null ]
method:org.wallride.service.pageservice.countpagesbystatus(status,string)
method:org.wallride.repository.pagerepository.countbystatus(status,string)
[select count(page.id) from page page where page.status = :status and page.language = :language and page.drafted is null ]
method:org.wallride.service.categoryservice.getcategories(string)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.web.controller.admin.dashboardcontroller.popularposts(string)
method:org.wallride.service.postservice.getpopularposts(string,type)
method:org.wallride.repository.popularpostrepository.findall(specification)
[select * from popularpost popularpost where popularpost in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
method:org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.6462664809979327
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8962664809979327
Path matching:False
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.dashboardcontroller.dashboard(string,model)
method:org.wallride.service.articleservice.countarticlesbystatus(status,string)
method:org.wallride.repository.articlerepository.countbystatus(status,string)
[select count(article.id) from article article where article.status = :status and article.language = :language and article.drafted is null ]
method:org.wallride.service.pageservice.countpagesbystatus(status,string)
method:org.wallride.repository.pagerepository.countbystatus(status,string)
[select count(page.id) from page page where page.status = :status and page.language = :language and page.drafted is null ]
method:org.wallride.service.categoryservice.getcategories(string)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.popularposts(string)
method:org.wallride.service.postservice.getpopularposts(string,type)
method:org.wallride.repository.popularpostrepository.findall(specification)
[select * from popularpost popularpost where popularpost in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
method:org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.6426533197983852
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8926533197983852
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]

Syntactic Similarity:0.5922930422557581
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5922930422557581
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.5754861178939833
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5754861178939833
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.5731492062024214
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5731492062024214
Path matching:False
Request matching:False



======================================= 7 given SQL query ===========================================
Given individual SQL query: select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
Pre-processed SQL query : select from user user where user.id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.getuserbyid(long) 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| int org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.getindex(signature) 
called| int org.wallride.service.userservice..enhancerbyspringcglib..44188907..fastclassbyspringcglib..d89d0cd9.getindex(signature) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.getuserbyid(long) 
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| usersearchrequest org.wallride.web.controller.admin.user.usersearchform.tousersearchrequest() 
called| string org.wallride.web.controller.admin.user.usersearchform.getkeyword() 
called| list org.wallride.service.userservice..enhancerbyspringcglib..44188907.getuserids(usersearchrequest) 
called| list org.wallride.service.userservice.getuserids(usersearchrequest) 
called| list com.sun.proxy..proxy190.searchforid(usersearchrequest) 
called| list org.wallride.repository.userrepositoryimpl.searchforid(usersearchrequest) 
called| fulltextquery org.wallride.repository.userrepositoryimpl.buildfulltextquery(usersearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.userrepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.users.link(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.users.link(user, boolean) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.usereditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.user.usereditcontroller.edit(string, long, model, redirectattributes) 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.getuserbyid(long) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.getuserbyid(long) 
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| usereditform org.wallride.web.controller.admin.user.usereditform.fromdomainobject(user) 
called| void org.wallride.web.controller.admin.user.usereditform.setdescription(string) 
called| void org.wallride.web.controller.admin.user.usereditform.setemail(string) 
called| void org.wallride.web.controller.admin.user.usereditform.setid(long) 
called| void org.wallride.web.controller.admin.user.usereditform.setname(personalname) 
called| void org.wallride.web.controller.admin.user.usereditform.setnickname(string) 
after rest| string org.wallride.web.controller.admin.user.usereditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| long org.wallride.web.controller.admin.user.usereditform.getid() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| personalname org.wallride.web.controller.admin.user.usereditform.getname() 
called| string org.wallride.web.controller.admin.user.usereditform.getnickname() 
called| string org.wallride.web.controller.admin.user.usereditform.getemail() 
called| string org.wallride.web.controller.admin.user.usereditform.getdescription() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.getuserbyid(long) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.getuserbyid(long) 
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| usersearchrequest org.wallride.web.controller.admin.user.usersearchform.tousersearchrequest() 
called| string org.wallride.web.controller.admin.user.usersearchform.getkeyword() 
called| list org.wallride.service.userservice..enhancerbyspringcglib..44188907.getuserids(usersearchrequest) 
called| list org.wallride.service.userservice.getuserids(usersearchrequest) 
called| list com.sun.proxy..proxy190.searchforid(usersearchrequest) 
called| list org.wallride.repository.userrepositoryimpl.searchforid(usersearchrequest) 
called| fulltextquery org.wallride.repository.userrepositoryimpl.buildfulltextquery(usersearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.userrepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.user.userdescribecontroller.describe(string, long, string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.users.link(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.users.link(user, boolean) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 5 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++ 6 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, True, True]
path_matching_number_k:[1, 1, 1, 2, 3]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.6]
path_ap:0.3962066537581412
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, True, True]
request_matching_number_k:[1, 1, 1, 2, 3]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.6]
request_ap:0.24381213851626157

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.usereditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.8976480958678987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8976480958678987
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.8976480958678987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8976480958678987
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.init(authorizeduser,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.8976480958678987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8976480958678987
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]

Syntactic Similarity:0.8976480958678987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8976480958678987
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.getuserids(usersearchrequest)
method:org.wallride.repository.userrepositoryimpl.searchforid(usersearchrequest)

Syntactic Similarity:0.8976480958678987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8976480958678987
Path matching:True
Request matching:True



======================================= 8 given SQL query ===========================================
Given individual SQL query: select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=? for update
Pre-processed SQL query : select from user user where user.id=? for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| userupdaterequest org.wallride.web.controller.admin.user.usereditform.builduserupdaterequest() 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.updateuser(userupdaterequest, errors, authorizeduser) 
called| int org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.getindex(signature) 
called| int org.wallride.service.userservice..enhancerbyspringcglib..44188907..fastclassbyspringcglib..d89d0cd9.getindex(signature) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.updateuser(userupdaterequest, errors, authorizeduser) 
called| user com.sun.proxy..proxy190.findoneforupdatebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=? for update
called| object com.sun.proxy..proxy190.saveandflush(object) 
sql|update user set description=?, nickname=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.user.userdescribecontroller.query(string) 
called| map org.wallride.web.controller.admin.user.userdescribecontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbyauthoridgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbyauthoridgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbyauthoridgrouped(post.status, string) 
sql|select user1_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join user user1_ on article0_1_.author_id=user1_.id where article0_1_.status=? and article0_1_.language=? group by user1_.id

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.05263157894736842
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.05263157894736842

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.userdeletecontroller.delete(userdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.userservice.deleteuser(userdeleterequest,bindingresult)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]

Syntactic Similarity:0.9219035116026247
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9219035116026246
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]

Syntactic Similarity:0.9219035116026247
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9219035116026246
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]

Syntactic Similarity:0.9219035116026247
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9219035116026246
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]

Syntactic Similarity:0.7696029770648397
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7696029770648396
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]

Syntactic Similarity:0.5779423275585198
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5779423275585198
Path matching:False
Request matching:False



======================================= 9 given SQL query ===========================================
Given individual SQL query: update user set description=?, nickname=? where id=?
Pre-processed SQL query : update user set description=?, nickname=? where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| userupdaterequest org.wallride.web.controller.admin.user.usereditform.builduserupdaterequest() 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.updateuser(userupdaterequest, errors, authorizeduser) 
called| int org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.getindex(signature) 
called| int org.wallride.service.userservice..enhancerbyspringcglib..44188907..fastclassbyspringcglib..d89d0cd9.getindex(signature) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.updateuser(userupdaterequest, errors, authorizeduser) 
called| user com.sun.proxy..proxy190.findoneforupdatebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=? for update
called| object com.sun.proxy..proxy190.saveandflush(object) 
sql|update user set description=?, nickname=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.user.userdescribecontroller.query(string) 
called| map org.wallride.web.controller.admin.user.userdescribecontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbyauthoridgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbyauthoridgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbyauthoridgrouped(post.status, string) 
sql|select user1_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join user user1_ on article0_1_.author_id=user1_.id where article0_1_.status=? and article0_1_.language=? group by user1_.id

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.78015168557055
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2801516855705501
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.usereditcontroller.save(string,usereditform,bindingresult,string,authorizeduser,httpservletrequest,redirectattributes)
method:org.wallride.service.userservice.updateuser(userupdaterequest,errors,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.78015168557055
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2801516855705501
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.78015168557055
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2801516855705501
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.6768480534836925
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1768480534836925
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.5825559242653126
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0825559242653124
Path matching:False
Request matching:False



======================================= 10 given SQL query ===========================================
Given individual SQL query: select user1_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join user user1_ on article0_1_.author_id=user1_.id where article0_1_.status=? and article0_1_.language=? group by user1_.id
Pre-processed SQL query : select from article inner join post left outer join user user where article.status=? and article.language=?  group by user.id 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| userupdaterequest org.wallride.web.controller.admin.user.usereditform.builduserupdaterequest() 
called| user org.wallride.service.userservice..enhancerbyspringcglib..44188907.updateuser(userupdaterequest, errors, authorizeduser) 
called| int org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.getindex(signature) 
called| int org.wallride.service.userservice..enhancerbyspringcglib..44188907..fastclassbyspringcglib..d89d0cd9.getindex(signature) 
called| object org.wallride.service.userservice..fastclassbyspringcglib..5b17772f.invoke(int, object, object[]) 
called| user org.wallride.service.userservice.updateuser(userupdaterequest, errors, authorizeduser) 
called| user com.sun.proxy..proxy190.findoneforupdatebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=? for update
called| object com.sun.proxy..proxy190.saveandflush(object) 
sql|update user set description=?, nickname=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.user.usereditcontroller.save(string, usereditform, bindingresult, string, authorizeduser, httpservletrequest, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.user.userdescribecontroller.query(string) 
called| map org.wallride.web.controller.admin.user.userdescribecontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbyauthoridgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbyauthoridgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbyauthoridgrouped(post.status, string) 
sql|select user1_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join user user1_ on article0_1_.author_id=user1_.id where article0_1_.status=? and article0_1_.language=? group by user1_.id

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.36341598869622826
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3634159886962283
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.36341598869622826
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3634159886962283
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.3607448182932864
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3607448182932864
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.3564096981967263
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3564096981967264
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.3564096981967263
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3564096981967264
Path matching:False
Request matching:False



======================================= 11 given SQL query ===========================================
Given individual SQL query: select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
Pre-processed SQL query : select distinct from category left outer join category left outer join category where category.language=?  order by category.lft 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string, long, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string, long, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string, long, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 
called| string org.wallride.web.controller.admin.category.categorycreateform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| int com.sun.proxy..proxy221.hashcode() 
called| parser org.wallride.support.codeformatannotationformatterfactory.getparser(codeformat, class) 
called| formatter org.wallride.support.codeformatannotationformatterfactory.getformatter(codeformat, class) 
called| string org.wallride.support.codeformatter.parse(string, locale) 
called| string org.wallride.support.codeformatter.replaceunsafechars(string) 
called| void org.wallride.web.controller.admin.category.categorycreateform.setcode(string) 
called| string org.wallride.web.controller.admin.category.categorycreateform.getdescription() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| void org.wallride.web.controller.admin.category.categorycreateform.setdescription(string) 
called| string org.wallride.web.controller.admin.category.categorycreateform.getname() 
called| void org.wallride.web.controller.admin.category.categorycreateform.setname(string) 
called| long org.wallride.web.controller.admin.category.categorycreateform.getparentid() 
called| void org.wallride.web.controller.admin.category.categorycreateform.setparentid(long) 
called| string org.wallride.web.controller.admin.category.categorycreateform.getlanguage() 
called| void org.wallride.web.controller.admin.category.categorycreateform.setlanguage(string) 
called| object org.wallride.web.support.authorizedusermethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
called| void org.wallride.support.categoryutils.createnode(treenode, collection) 
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
called| void org.wallride.support.categoryutils.createnode(treenode, collection) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategorybyid(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| category org.wallride.service.categoryservice.getcategorybyid(long, string) 
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.parse(string, locale) 
called| string org.wallride.support.codeformatter.replaceunsafechars(string) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setcode(string) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getdescription() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setdescription(string) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getname() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setname(string) 
called| long org.wallride.web.controller.admin.category.categoryeditform.getparentid() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setparentid(long) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getlanguage() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setlanguage(string) 
called| long org.wallride.web.controller.admin.category.categoryeditform.getid() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| object org.wallride.web.support.authorizedusermethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++ 5 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
called| void org.wallride.support.categoryutils.createnode(treenode, collection) 
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 6 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.index(string, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, True, True]
path_matching_number_k:[0, 1, 1, 2, 3]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.5, 0.6]
path_ap:0.5333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, True, True]
request_matching_number_k:[0, 1, 1, 2, 3]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.5, 0.6]
request_ap:0.5166666666666667

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.7601697303608504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7601697303608503
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.7601697303608504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7601697303608503
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.index(string)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.7601697303608504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7601697303608503
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.index(string,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]

Syntactic Similarity:0.7601697303608504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7601697303608503
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.718772737258817
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.718772737258817
Path matching:True
Request matching:True



======================================= 12 given SQL query ===========================================
Given individual SQL query: select coalesce(max(category0_.rgt), 0) as col_0_0_ from category category0_
Pre-processed SQL query : select coalesce(max(category.rgt), from category 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| categorycreaterequest org.wallride.web.controller.admin.category.categorycreateform.buildcategorycreaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.createcategory(categorycreaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.createcategory(categorycreaterequest, authorizeduser) 
called| int com.sun.proxy..proxy188.findmaxrgt() 
sql|select coalesce(max(category0_.rgt), ?) as col_0_0_ from category category0_
called| object com.sun.proxy..proxy188.save(object) 
sql|insert into category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.1111111111111111
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.11924323720098366

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.2815862862780194
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2815862862780194
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.27344297114772276
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2734429711477229
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]

Syntactic Similarity:0.269219620256387
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.269219620256387
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.20158227943127277
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2015822794312727
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.20139733008077923
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2013973300807792
Path matching:False
Request matching:False



======================================= 13 given SQL query ===========================================
Given individual SQL query: insert into category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)
Pre-processed SQL query : insert into category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| categorycreaterequest org.wallride.web.controller.admin.category.categorycreateform.buildcategorycreaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.createcategory(categorycreaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.createcategory(categorycreaterequest, authorizeduser) 
called| int com.sun.proxy..proxy188.findmaxrgt() 
sql|select coalesce(max(category0_.rgt), ?) as col_0_0_ from category category0_
called| object com.sun.proxy..proxy188.save(object) 
sql|insert into category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, True, True, False]
request_matching_number_k:[1, 2, 3, 4, 4]
request_precision_k:[1.0, 1.0, 1.0, 1.0, 0.8]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.842002724918185
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.342002724918185
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.701300792960733
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2013007929607329
Path matching:False
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.6949260039337161
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1949260039337162
Path matching:False
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.6724210872863339
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0057544206196671
Path matching:False
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.612601853703111
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.612601853703111
Path matching:False
Request matching:False



======================================= 14 given SQL query ===========================================
Given individual SQL query: select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
Pre-processed SQL query : select from article inner join post left outer join postcategory left outer join category where article.status=? and article.language=?  group by category.id 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| categorycreaterequest org.wallride.web.controller.admin.category.categorycreateform.buildcategorycreaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.createcategory(categorycreaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.createcategory(categorycreaterequest, authorizeduser) 
called| int com.sun.proxy..proxy188.findmaxrgt() 
sql|select coalesce(max(category0_.rgt), ?) as col_0_0_ from category category0_
called| object com.sun.proxy..proxy188.save(object) 
sql|insert into category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| categoryupdaterequest org.wallride.web.controller.admin.category.categoryeditform.buildcategoryupdaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.updatecategory(categoryupdaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.updatecategory(categoryupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.save(object) 
sql|update category set code=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.5300795772199315
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5300795772199316
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.5300795772199315
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5300795772199316
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.529325384309389
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.529325384309389
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.5261691333373426
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5261691333373426
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.5261691333373426
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5261691333373426
Path matching:False
Request matching:False



======================================= 15 given SQL query ===========================================
Given individual SQL query: select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
Pre-processed SQL query : select from category left outer join category left outer join category where category.id=? and category.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| list org.wallride.support.categoryutils.getnodes(boolean) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| list org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategories(string, boolean) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| list org.wallride.service.categoryservice.getcategories(string, boolean) 
called| list com.sun.proxy..proxy188.findalldistinctbylanguageorderbylftasc(string) 
sql|select distinct category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.language=? order by category0_.lft asc
called| void org.wallride.support.categoryutils.createnode(treenode, collection) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.getcategorybyid(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| category org.wallride.service.categoryservice.getcategorybyid(long, string) 
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
after rest| string org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string, long, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| categories org.wallride.autoconfigure.wallrideexpressionobjectfactory.createcategories(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| list org.wallride.web.support.categories.getallcategories(boolean) 
called| list org.wallride.support.categoryutils.getallcategories(boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.parse(string, locale) 
called| string org.wallride.support.codeformatter.replaceunsafechars(string) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setcode(string) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getdescription() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setdescription(string) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getname() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setname(string) 
called| long org.wallride.web.controller.admin.category.categoryeditform.getparentid() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setparentid(long) 
called| string org.wallride.web.controller.admin.category.categoryeditform.getlanguage() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setlanguage(string) 
called| long org.wallride.web.controller.admin.category.categoryeditform.getid() 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| object org.wallride.web.support.authorizedusermethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| categoryupdaterequest org.wallride.web.controller.admin.category.categoryeditform.buildcategoryupdaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.updatecategory(categoryupdaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.updatecategory(categoryupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.save(object) 
sql|update category set code=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, True, False]
path_matching_number_k:[0, 0, 0, 1, 1]
path_precision_k:[0.0, 0.0, 0.0, 0.25, 0.2]
path_ap:0.1875
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, True, False]
request_matching_number_k:[0, 1, 1, 2, 2]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.5, 0.4]
request_ap:0.3130040322580645

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.705847122314762
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.705847122314762
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.6179061323522226
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.6179061323522226
Path matching:False
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]

Syntactic Similarity:0.6177858328140432
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.617785832814043
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.5019211297249666
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5019211297249666
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.39401811878363846
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3940181187836385
Path matching:False
Request matching:False



======================================= 16 given SQL query ===========================================
Given individual SQL query: select category0_.id as col_0_0_ from category category0_ where category0_.id=1 for update
Pre-processed SQL query : select category.id from category where category.id= for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| categoryupdaterequest org.wallride.web.controller.admin.category.categoryeditform.buildcategoryupdaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.updatecategory(categoryupdaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.updatecategory(categoryupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.save(object) 
sql|update category set code=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.07417582417582418
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.12022283272283273

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.4009644284677778
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4009644284677778
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.3692631695435508
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3692631695435509
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.25374049247726826
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2537404924772684
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.25374049247726826
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2537404924772684
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.index(string)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.25374049247726826
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2537404924772684
Path matching:False
Request matching:False



======================================= 17 given SQL query ===========================================
Given individual SQL query: update category set code=? where id=?
Pre-processed SQL query : update category set code=? where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.category.categoryeditform.setid(long) 
called| categoryupdaterequest org.wallride.web.controller.admin.category.categoryeditform.buildcategoryupdaterequest() 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.updatecategory(categoryupdaterequest, authorizeduser) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.updatecategory(categoryupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.save(object) 
sql|update category set code=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, True, False, False]
request_matching_number_k:[1, 2, 3, 3, 3]
request_precision_k:[1.0, 1.0, 1.0, 0.75, 0.6]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.7094944340823937
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2094944340823937
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.5169412669519615
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0169412669519615
Path matching:False
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.5035610498106093
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0035610498106093
Path matching:False
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.3922853319127768
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8922853319127768
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.47633789389805914
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8096712272313924
Path matching:False
Request matching:False



======================================= 18 given SQL query ===========================================
Given individual SQL query: select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
Pre-processed SQL query : select from tag where tag.name=? and tag.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| tagcreaterequest org.wallride.web.controller.admin.tag.tagcreateform.buildtagcreaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.createtag(tagcreaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.createtag(tagcreaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|insert into tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.tag.tageditform.setid(long) 
called| tagupdaterequest org.wallride.web.controller.admin.tag.tageditform.buildtagupdaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.updatetag(tagupdaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.updatetag(tagupdaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|update tag set updated_at=?, name=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, True, False]
path_matching_number_k:[1, 1, 1, 2, 2]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.4]
path_ap:0.5035897435897436
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, True, False]
request_matching_number_k:[1, 1, 1, 2, 2]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.4]
request_ap:0.5035897435897436

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.8901787714067109
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8901787714067109
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.8901787714067109
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8901787714067109
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.tagcontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.tagservice.gettagbyname(string,string)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.8901787714067109
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8901787714067109
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.8157913779091048
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8157913779091048
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.6361166435427423
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.6361166435427423
Path matching:False
Request matching:False



======================================= 19 given SQL query ===========================================
Given individual SQL query: insert into tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?)
Pre-processed SQL query : insert into tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| tagcreaterequest org.wallride.web.controller.admin.tag.tagcreateform.buildtagcreaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.createtag(tagcreaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.createtag(tagcreaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|insert into tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5256410256410257
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5256410256410257

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushcreate(tag)
[insert into tag tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?) ]

Syntactic Similarity:0.7892006756399451
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.289200675639945
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushcreate(tag)
[insert into tag tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?) ]

Syntactic Similarity:0.7892006756399451
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.289200675639945
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8108993389767148
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8108993389767148
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8108993389767148
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8108993389767148
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8108993389767148
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8108993389767148
Path matching:False
Request matching:False



======================================= 20 given SQL query ===========================================
Given individual SQL query: select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
Pre-processed SQL query : select from article inner join post left outer join posttag left outer join tag where article.status=? and article.language=?  group by tag.id 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| tagcreaterequest org.wallride.web.controller.admin.tag.tagcreateform.buildtagcreaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.createtag(tagcreaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.createtag(tagcreaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|insert into tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectsavedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform, bindingresult, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.tag.tageditform.setid(long) 
called| tagupdaterequest org.wallride.web.controller.admin.tag.tageditform.buildtagupdaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.updatetag(tagupdaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.updatetag(tagupdaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|update tag set updated_at=?, name=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.tag.tagbulkdeleteform.isconfirmed() 
called| tagbulkdeleterequest org.wallride.web.controller.admin.tag.tagbulkdeleteform.buildtagbulkdeleterequest() 
called| list org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| list org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| tag org.wallride.service.tagservice.deletetag(tagdeleterequest, bindingresult) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| void com.sun.proxy..proxy185.delete(object) 
sql|delete from post_tag where tag_id=?
sql|delete from tag where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.5302056652759435
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5302056652759435
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.5302056652759435
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5302056652759435
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.5294611737433846
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5294611737433845
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.5263141278045869
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5263141278045869
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.5263141278045869
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5263141278045869
Path matching:False
Request matching:False



======================================= 21 given SQL query ===========================================
Given individual SQL query: select this_.id as id1_18_0_, this_.created_at as created_2_18_0_, this_.created_by as created_3_18_0_, this_.updated_at as updated_4_18_0_, this_.updated_by as updated_5_18_0_, this_.language as language6_18_0_, this_.name as name7_18_0_ from tag this_ where (this_.id in (?))
Pre-processed SQL query : select from tag where (this_.id in (?)) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string, tagsearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string, tagsearchform, bindingresult, pageable, model, httpservletrequest) 
called| tagsearchrequest org.wallride.web.controller.admin.tag.tagsearchform.totagsearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| page org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.gettags(tagsearchrequest, pageable) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| page org.wallride.service.tagservice.gettags(tagsearchrequest, pageable) 
called| page com.sun.proxy..proxy185.search(tagsearchrequest, pageable) 
called| page org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_18_0_, this_.created_at as created_2_18_0_, this_.created_by as created_3_18_0_, this_.updated_at as updated_4_18_0_, this_.updated_by as updated_5_18_0_, this_.language as language6_18_0_, this_.name as name7_18_0_ from tag this_ where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
called| string org.wallride.web.controller.admin.tag.tagsearchform.getkeyword() 
after rest| string org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string, tagsearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string,tagsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.8795821515704272
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8795821515704272
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.tagcontroller.index(pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.8795821515704272
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8795821515704272
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,string)
method:org.wallride.service.tagservice.gettags(tagsearchrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.8795821515704272
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8795821515704272
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.5276742261716633
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5276742261716634
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.5276742261716633
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5276742261716634
Path matching:False
Request matching:False



======================================= 22 given SQL query ===========================================
Given individual SQL query: select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=?
Pre-processed SQL query : select from tag where tag.id=? and tag.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string, long, model) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string, long, model) 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.gettagbyid(long, string) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.gettagbyid(long, string) 
called| tag com.sun.proxy..proxy185.findonebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=?
after rest| string org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string, long, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 
called| string org.wallride.web.controller.admin.tag.tageditform.getname() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| void org.wallride.web.controller.admin.tag.tageditform.setname(string) 
called| string org.wallride.web.controller.admin.tag.tageditform.getlanguage() 
called| void org.wallride.web.controller.admin.tag.tageditform.setlanguage(string) 
called| long org.wallride.web.controller.admin.tag.tageditform.getid() 
called| void org.wallride.web.controller.admin.tag.tageditform.setid(long) 
called| object org.wallride.web.support.authorizedusermethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.8566490564903875
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8566490564903875
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.8566490564903875
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8566490564903875
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.790149074656515
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.790149074656515
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.6499456726236832
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.6499456726236832
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.6499456726236832
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.6499456726236832
Path matching:False
Request matching:False



======================================= 23 given SQL query ===========================================
Given individual SQL query: select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
Pre-processed SQL query : select from tag where tag.id=? and tag.language=? for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.tag.tageditform.setid(long) 
called| tagupdaterequest org.wallride.web.controller.admin.tag.tageditform.buildtagupdaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.updatetag(tagupdaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.updatetag(tagupdaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|update tag set updated_at=?, name=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.tag.tagbulkdeleteform.isconfirmed() 
called| tagbulkdeleterequest org.wallride.web.controller.admin.tag.tagbulkdeleteform.buildtagbulkdeleterequest() 
called| list org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| list org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| tag org.wallride.service.tagservice.deletetag(tagdeleterequest, bindingresult) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| void com.sun.proxy..proxy185.delete(object) 
sql|delete from post_tag where tag_id=?
sql|delete from tag where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.27294372294372293
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.27294372294372293

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.4720751089410641
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.472075108941064
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.4720751089410641
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.472075108941064
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.43542884647108804
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.435428846471088
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.3581667100254857
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3581667100254857
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.3581667100254857
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3581667100254857
Path matching:False
Request matching:False



======================================= 24 given SQL query ===========================================
Given individual SQL query: update tag set updated_at=?, name=? where id=?
Pre-processed SQL query : update tag set updated_at=?, name=? where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| void org.wallride.web.controller.admin.tag.tageditform.setid(long) 
called| tagupdaterequest org.wallride.web.controller.admin.tag.tageditform.buildtagupdaterequest() 
called| tag org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.updatetag(tagupdaterequest, authorizeduser) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| tag org.wallride.service.tagservice.updatetag(tagupdaterequest, authorizeduser) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| tag com.sun.proxy..proxy185.findonebynameandlanguage(string, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.name=? and tag0_.language=?
called| object com.sun.proxy..proxy185.saveandflush(object) 
sql|update tag set updated_at=?, name=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectupdatedmodel org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform, bindingresult, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectupdatedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, True, False, False, False]
path_matching_number_k:[1, 2, 2, 2, 2]
path_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
path_ap:0.7916666666666666
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, False]
request_matching_number_k:[1, 2, 2, 2, 2]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
request_ap:0.7916666666666666

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushupdate(tag)
[update tag tag set updated_at=?, name=? where id=? ]

Syntactic Similarity:0.7070468228348956
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2070468228348956
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushupdate(tag)
[update tag tag set updated_at=?, name=? where id=? ]

Syntactic Similarity:0.6801276229026995
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1801276229026993
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.5820703117760433
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5820703117760433
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.5820703117760433
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5820703117760433
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.tagcontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.tagservice.gettagbyname(string,string)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]

Syntactic Similarity:0.5820703117760433
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5820703117760433
Path matching:False
Request matching:False



======================================= 25 given SQL query ===========================================
Given individual SQL query: delete from post_tag where tag_id=?
Pre-processed SQL query : delete from post_tag where tag_id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.tag.tagbulkdeleteform.isconfirmed() 
called| tagbulkdeleterequest org.wallride.web.controller.admin.tag.tagbulkdeleteform.buildtagbulkdeleterequest() 
called| list org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| list org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| tag org.wallride.service.tagservice.deletetag(tagdeleterequest, bindingresult) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| void com.sun.proxy..proxy185.delete(object) 
sql|delete from post_tag where tag_id=?
sql|delete from tag where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.43461302717379374
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7679463605071271
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.48663565267670095
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48663565267670095
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.3771717936334541
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.3771717936334541
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.3110608753302219
Path matching:False
Request matching:False



======================================= 26 given SQL query ===========================================
Given individual SQL query: delete from tag where id=?
Pre-processed SQL query : delete from tag where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.tag.tagbulkdeleteform.isconfirmed() 
called| tagbulkdeleterequest org.wallride.web.controller.admin.tag.tagbulkdeleteform.buildtagbulkdeleterequest() 
called| list org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| int org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.getindex(signature) 
called| int org.wallride.service.tagservice..enhancerbyspringcglib..1d975adc..fastclassbyspringcglib..a306c51f.getindex(signature) 
called| object org.wallride.service.tagservice..fastclassbyspringcglib..ce518256.invoke(int, object, object[]) 
called| list org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest, bindingresult) 
called| tag org.wallride.service.tagservice.deletetag(tagdeleterequest, bindingresult) 
called| tag com.sun.proxy..proxy185.findoneforupdatebyidandlanguage(long, string) 
sql|select tag0_.id as id1_18_, tag0_.created_at as created_2_18_, tag0_.created_by as created_3_18_, tag0_.updated_at as updated_4_18_, tag0_.updated_by as updated_5_18_, tag0_.language as language6_18_, tag0_.name as name7_18_ from tag tag0_ where tag0_.id=? and tag0_.language=? for update
called| void com.sun.proxy..proxy185.delete(object) 
sql|delete from post_tag where tag_id=?
sql|delete from tag where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.tag.tagsearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.tag.tagsearchcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbytagidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbytagidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbytagidgrouped(post.status, string) 
sql|select tag2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_tag tags1_ on article0_.id=tags1_.post_id left outer join tag tag2_ on tags1_.tag_id=tag2_.id where article0_1_.status=? and article0_1_.language=? group by tag2_.id
called| tagsearchform org.wallride.web.controller.admin.tag.tagsearchcontroller.setuptagsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.8278136957590128
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.161147029092346
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6237560904813293
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6237560904813293
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.5537171643947304
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5537171643947304
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.5537171643947304
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5537171643947304
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushupdate(tag)
[update tag tag set updated_at=?, name=? where id=? ]

Syntactic Similarity:0.5519037215952335
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5519037215952335
Path matching:False
Request matching:False



======================================= 27 given SQL query ===========================================
Given individual SQL query: select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.code=? and customfiel0_.language=?
Pre-processed SQL query : select from customfield left outer join customfieldoption options where customfiel.code=? and customfiel.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldcreaterequest org.wallride.web.controller.admin.customfield.customfieldcreateform.buildcustomfieldcreaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findonebycodeandlanguage(string, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.code=? and customfiel0_.language=?
called| int com.sun.proxy..proxy191.findmaxidxbylanguage(string) 
sql|select coalesce(max(customfiel0_.idx), ?) as col_0_0_ from custom_field customfiel0_ where customfiel0_.language=?
called| object com.sun.proxy..proxy191.save(object) 
sql|insert into custom_field (created_at, updated_at, code, description, field_type, idx, language, name) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.6666666666666666
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.6666666666666666

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]

Syntactic Similarity:0.3982798274402025
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3982798274402026
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.30480591347359903
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.304805913473599
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.30480591347359903
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.304805913473599
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.30480591347359903
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.304805913473599
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.30480591347359903
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.304805913473599
Path matching:False
Request matching:False



======================================= 28 given SQL query ===========================================
Given individual SQL query: select coalesce(max(customfiel0_.idx), 0) as col_0_0_ from custom_field customfiel0_ where customfiel0_.language=?
Pre-processed SQL query : select coalesce(max(customfiel.idx), from customfield where customfiel.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldcreaterequest org.wallride.web.controller.admin.customfield.customfieldcreateform.buildcustomfieldcreaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findonebycodeandlanguage(string, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.code=? and customfiel0_.language=?
called| int com.sun.proxy..proxy191.findmaxidxbylanguage(string) 
sql|select coalesce(max(customfiel0_.idx), ?) as col_0_0_ from custom_field customfiel0_ where customfiel0_.language=?
called| object com.sun.proxy..proxy191.save(object) 
sql|insert into custom_field (created_at, updated_at, code, description, field_type, idx, language, name) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.6666666666666666
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.6666666666666666

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.findmaxidxbylanguage(string)
[select coalesce(max(idx), 0) from customfield customfield where customfield.language = :language ]

Syntactic Similarity:0.8196760482967917
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8196760482967917
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.26145255027210473
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2614525502721048
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.26145255027210473
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2614525502721048
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.26145255027210473
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2614525502721048
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.26145255027210473
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2614525502721048
Path matching:False
Request matching:False



======================================= 29 given SQL query ===========================================
Given individual SQL query: insert into custom_field (created_at, updated_at, code, description, field_type, idx, language, name) values (?, ?, ?, ?, ?, ?, ?, ?)
Pre-processed SQL query : insert into custom_field (created_at, updated_at, code, description, field_type, idx, language, name) values (?, ?, ?, ?, ?, ?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldcreaterequest org.wallride.web.controller.admin.customfield.customfieldcreateform.buildcustomfieldcreaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findonebycodeandlanguage(string, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.code=? and customfiel0_.language=?
called| int com.sun.proxy..proxy191.findmaxidxbylanguage(string) 
sql|select coalesce(max(customfiel0_.idx), ?) as col_0_0_ from custom_field customfiel0_ where customfiel0_.language=?
called| object com.sun.proxy..proxy191.save(object) 
sql|insert into custom_field (created_at, updated_at, code, description, field_type, idx, language, name) values (?, ?, ?, ?, ?, ?, ?, ?)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string, customfieldcreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.262987012987013
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.262987012987013

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.47397147746079704
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.47397147746079704
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.findmaxidxbylanguage(string)
[select coalesce(max(idx), 0) from customfield customfield where customfield.language = :language ]

Syntactic Similarity:0.4666143153153442
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4666143153153442
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldrestcontroller.sort(string,list,bindingresult)
method:org.wallride.service.customfieldservice.updatecustomfieldorder(list,string,bindingresult)
method:org.wallride.repository.customfieldrepository.updatenullbylanguage(string)
[update customfield customfield set customfield.idx = null where customfield.language = :language ]
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]

Syntactic Similarity:0.38366803816682865
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.38366803816682865
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.3763575934447972
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.3763575934447972
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.3763575934447972
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.3763575934447972
Path matching:False
Request matching:False



======================================= 30 given SQL query ===========================================
Given individual SQL query: select this_.id as id1_0_0_, this_.created_at as created_2_0_0_, this_.created_by as created_3_0_0_, this_.updated_at as updated_4_0_0_, this_.updated_by as updated_5_0_0_, this_.code as code6_0_0_, this_.default_value as default_7_0_0_, this_.description as descript8_0_0_, this_.field_type as field_ty9_0_0_, this_.idx as idx10_0_0_, this_.language as languag11_0_0_, this_.name as name12_0_0_, options2_.custom_field_id as custom_f1_7_2_, options2_.language as language2_7_2_, options2_.name as name3_7_2_, options2_.idx as idx4_2_ from custom_field this_ left outer join custom_field_option options2_ on this_.id=options2_.custom_field_id where (this_.id in (?))
Pre-processed SQL query : select from customfield left outer join customfieldoption options where (this_.id in (?)) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| customfieldsearchrequest org.wallride.web.controller.admin.customfield.customfieldsearchform.tocustomfieldsearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchform.getkeyword() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| page org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getcustomfields(customfieldsearchrequest, pageable) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| page org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest, pageable) 
called| page com.sun.proxy..proxy191.search(customfieldsearchrequest, pageable) 
called| page org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest, pageable) 
called| fulltextquery org.wallride.repository.customfieldrepositoryimpl.buildfulltextquery(customfieldsearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_0_0_, this_.created_at as created_2_0_0_, this_.created_by as created_3_0_0_, this_.updated_at as updated_4_0_0_, this_.updated_by as updated_5_0_0_, this_.code as code6_0_0_, this_.default_value as default_7_0_0_, this_.description as descript8_0_0_, this_.field_type as field_ty9_0_0_, this_.idx as idx10_0_0_, this_.language as languag11_0_0_, this_.name as name12_0_0_, options2_.custom_field_id as custom_f1_7_2_, options2_.language as language2_7_2_, options2_.name as name3_7_2_, options2_.idx as idx4_2_ from custom_field this_ left outer join custom_field_option options2_ on this_.id=options2_.custom_field_id where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| string org.wallride.web.support.pagination.geturl() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| customfieldsearchrequest org.wallride.web.controller.admin.customfield.customfieldsearchform.tocustomfieldsearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchform.getkeyword() 
called| page org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getcustomfields(customfieldsearchrequest, pageable) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| page org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest, pageable) 
called| page com.sun.proxy..proxy191.search(customfieldsearchrequest, pageable) 
called| page org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest, pageable) 
called| fulltextquery org.wallride.repository.customfieldrepositoryimpl.buildfulltextquery(customfieldsearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_0_0_, this_.created_at as created_2_0_0_, this_.created_by as created_3_0_0_, this_.updated_at as updated_4_0_0_, this_.updated_by as updated_5_0_0_, this_.code as code6_0_0_, this_.default_value as default_7_0_0_, this_.description as descript8_0_0_, this_.field_type as field_ty9_0_0_, this_.idx as idx10_0_0_, this_.language as languag11_0_0_, this_.name as name12_0_0_, options2_.custom_field_id as custom_f1_7_2_, options2_.language as language2_7_2_, options2_.name as name3_7_2_, options2_.idx as idx4_2_ from custom_field this_ left outer join custom_field_option options2_ on this_.id=options2_.custom_field_id where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string, customfieldsearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| string org.wallride.web.support.pagination.geturl() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]

Syntactic Similarity:0.46621022992988953
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4662102299298896
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.23000455876118917
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2300045587611892
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.23000455876118917
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2300045587611892
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.23000455876118917
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2300045587611892
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.23000455876118917
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2300045587611892
Path matching:False
Request matching:False



======================================= 31 given SQL query ===========================================
Given individual SQL query: select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
Pre-processed SQL query : select from customfield where customfiel.id=? for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldupdaterequest org.wallride.web.controller.admin.customfield.customfieldeditform.buildcustomfieldupdaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findoneforupdatebyid(long) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
sql|select options0_.custom_field_id as custom_f1_7_0_, options0_.language as language2_7_0_, options0_.name as name3_7_0_, options0_.idx as idx4_0_ from custom_field_option options0_ where options0_.custom_field_id=?
called| object com.sun.proxy..proxy191.save(object) 
sql|update custom_field set description=?, field_type=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.6428571428571428
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.6428571428571428

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string,customfieldeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findoneforupdatebyid(long)
[select from customfield customfield where customfield.id=:id for update  ]

Syntactic Similarity:0.9071289131081168
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9071289131081168
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.34346575630624976
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3434657563062498
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.34346575630624976
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3434657563062498
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.34346575630624976
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3434657563062498
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.34346575630624976
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3434657563062498
Path matching:False
Request matching:False



======================================= 32 given SQL query ===========================================
Given individual SQL query: select options0_.custom_field_id as custom_f1_7_0_, options0_.language as language2_7_0_, options0_.name as name3_7_0_, options0_.idx as idx4_0_ from custom_field_option options0_ where options0_.custom_field_id=?
Pre-processed SQL query : select from customfieldoption options where options.custom_field_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldupdaterequest org.wallride.web.controller.admin.customfield.customfieldeditform.buildcustomfieldupdaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findoneforupdatebyid(long) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
sql|select options0_.custom_field_id as custom_f1_7_0_, options0_.language as language2_7_0_, options0_.name as name3_7_0_, options0_.idx as idx4_0_ from custom_field_option options0_ where options0_.custom_field_id=?
called| object com.sun.proxy..proxy191.save(object) 
sql|update custom_field set description=?, field_type=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.010638297872340425
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.010638297872340425

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]

Syntactic Similarity:0.12372486095970908
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.12372486095970908
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.10788306007634252
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.10788306007634252
Path matching:False
Request matching:False



======================================= 33 given SQL query ===========================================
Given individual SQL query: update custom_field set description=?, field_type=? where id=?
Pre-processed SQL query : update custom_field set description=?, field_type=? where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| customfieldupdaterequest org.wallride.web.controller.admin.customfield.customfieldeditform.buildcustomfieldupdaterequest() 
called| customfield org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| customfield org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest, authorizeduser) 
called| customfield com.sun.proxy..proxy191.findoneforupdatebyid(long) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
sql|select options0_.custom_field_id as custom_f1_7_0_, options0_.language as language2_7_0_, options0_.name as name3_7_0_, options0_.idx as idx4_0_ from custom_field_option options0_ where options0_.custom_field_id=?
called| object com.sun.proxy..proxy191.save(object) 
sql|update custom_field set description=?, field_type=? where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string, customfieldeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.527027027027027
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.527027027027027

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string,customfieldeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findoneforupdatebyid(long)
[select from customfield customfield where customfield.id=:id for update  ]
method:org.wallride.repository.customfieldrepository.saveupdate(customfield)
[update customfield custom_field set description=?, field_type=? where id=?]

Syntactic Similarity:0.6365251885869092
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1365251885869092
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldrestcontroller.sort(string,list,bindingresult)
method:org.wallride.service.customfieldservice.updatecustomfieldorder(list,string,bindingresult)
method:org.wallride.repository.customfieldrepository.updatenullbylanguage(string)
[update customfield customfield set customfield.idx = null where customfield.language = :language ]
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]

Syntactic Similarity:0.13202609256188058
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6320260925618806
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.5740569511685117
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5740569511685117
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.user.usereditcontroller.save(string,usereditform,bindingresult,string,authorizeduser,httpservletrequest,redirectattributes)
method:org.wallride.service.userservice.updateuser(userupdaterequest,errors,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.5740569511685117
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5740569511685117
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]

Syntactic Similarity:0.5740569511685117
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5740569511685117
Path matching:False
Request matching:False



======================================= 34 given SQL query ===========================================
Given individual SQL query: select customfiel0_.id as col_0_0_ from custom_field customfiel0_ where customfiel0_.id=1 for update
Pre-processed SQL query : select customfiel.id from customfield where customfiel.id= for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| boolean org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.isconfirmed() 
called| customfieldbulkdeleterequest org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.buildcustomfieldbulkdeleterequest() 
called| list org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| list org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| customfield org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest, bindingresult) 
called| void com.sun.proxy..proxy191.lock(long) 
called| void org.wallride.repository.customfieldrepositoryimpl.lock(long) 
sql|select customfiel0_.id as col_0_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
called| customfield com.sun.proxy..proxy191.findonebyidandlanguage(long, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.id=? and customfiel0_.language=?
called| void com.sun.proxy..proxy191.delete(object) 
sql|select customfiel0_.custom_field_id as custom_11_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.custom_field_id=?
sql|delete from custom_field where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.1
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.1

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string,customfieldeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findoneforupdatebyid(long)
[select from customfield customfield where customfield.id=:id for update  ]

Syntactic Similarity:0.91538067690095
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.91538067690095
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.42585286173173764
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4258528617317376
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.42585286173173764
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4258528617317376
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.42585286173173764
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4258528617317376
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.42585286173173764
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4258528617317376
Path matching:False
Request matching:False



======================================= 35 given SQL query ===========================================
Given individual SQL query: select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.id=? and customfiel0_.language=?
Pre-processed SQL query : select from customfield left outer join customfieldoption options where customfiel.id=? and customfiel.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| boolean org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.isconfirmed() 
called| customfieldbulkdeleterequest org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.buildcustomfieldbulkdeleterequest() 
called| list org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| list org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| customfield org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest, bindingresult) 
called| void com.sun.proxy..proxy191.lock(long) 
called| void org.wallride.repository.customfieldrepositoryimpl.lock(long) 
sql|select customfiel0_.id as col_0_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
called| customfield com.sun.proxy..proxy191.findonebyidandlanguage(long, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.id=? and customfiel0_.language=?
called| void com.sun.proxy..proxy191.delete(object) 
sql|select customfiel0_.custom_field_id as custom_11_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.custom_field_id=?
sql|delete from custom_field where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.1111111111111111
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.1111111111111111

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.3832662369421882
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3832662369421882
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.3832662369421882
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3832662369421882
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.3832662369421882
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3832662369421882
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.3832662369421882
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3832662369421882
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]

Syntactic Similarity:0.2788078230317634
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2788078230317634
Path matching:False
Request matching:False



======================================= 36 given SQL query ===========================================
Given individual SQL query: select customfiel0_.custom_field_id as custom_11_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.custom_field_id=?
Pre-processed SQL query : select from customfieldvalue where customfiel.custom_field_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| boolean org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.isconfirmed() 
called| customfieldbulkdeleterequest org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.buildcustomfieldbulkdeleterequest() 
called| list org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| list org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| customfield org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest, bindingresult) 
called| void com.sun.proxy..proxy191.lock(long) 
called| void org.wallride.repository.customfieldrepositoryimpl.lock(long) 
sql|select customfiel0_.id as col_0_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
called| customfield com.sun.proxy..proxy191.findonebyidandlanguage(long, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.id=? and customfiel0_.language=?
called| void com.sun.proxy..proxy191.delete(object) 
sql|select customfiel0_.custom_field_id as custom_11_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.custom_field_id=?
sql|delete from custom_field where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.16666666666666666
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.16666666666666666

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]

Syntactic Similarity:0.36558360694084685
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.36558360694084685
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False



======================================= 37 given SQL query ===========================================
Given individual SQL query: delete from custom_field where id=?
Pre-processed SQL query : delete from custom_field where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| boolean org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.isconfirmed() 
called| customfieldbulkdeleterequest org.wallride.web.controller.admin.customfield.customfieldbulkdeleteform.buildcustomfieldbulkdeleterequest() 
called| list org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| int org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.getindex(signature) 
called| int org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f..fastclassbyspringcglib..e00b89d8.getindex(signature) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| list org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest, bindingresult) 
called| customfield org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest, bindingresult) 
called| void com.sun.proxy..proxy191.lock(long) 
called| void org.wallride.repository.customfieldrepositoryimpl.lock(long) 
sql|select customfiel0_.id as col_0_0_ from custom_field customfiel0_ where customfiel0_.id=? for update
called| customfield com.sun.proxy..proxy191.findonebyidandlanguage(long, string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.id=? and customfiel0_.language=?
called| void com.sun.proxy..proxy191.delete(object) 
sql|select customfiel0_.custom_field_id as custom_11_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.custom_field_id=?
sql|delete from custom_field where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.query(string) 
called| customfieldsearchform org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.setupcustomfieldsearchform() 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6889376164386937
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1889376164386936
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.5519935326723595
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5519935326723595
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.44149803590364767
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.44149803590364767
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.44149803590364767
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.44149803590364767
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.44149803590364767
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.44149803590364767
Path matching:False
Request matching:False



======================================= 38 given SQL query ===========================================
Given individual SQL query: select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then 1 when post0_2_.id is not null then 2 when post0_.id is not null then 0 end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
Pre-processed SQL query : select from post left outer join page left outer join article left outer join media left outer join user user where post.code=? and post.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, True, False]
path_matching_number_k:[0, 0, 0, 1, 1]
path_precision_k:[0.0, 0.0, 0.0, 0.25, 0.2]
path_ap:0.21761190000681432
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, True, False]
request_matching_number_k:[0, 0, 0, 1, 1]
request_precision_k:[0.0, 0.0, 0.0, 0.25, 0.2]
request_ap:0.2187235215804807

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,string)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9408166115300706
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9408166115300705
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.searchcontroller.search(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9408166115300706
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9408166115300705
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.9310266340295734
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9310266340295734
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.9310266340295734
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9310266340295734
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.9310266340295734
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9310266340295734
Path matching:False
Request matching:False



======================================= 39 given SQL query ===========================================
Given individual SQL query: select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
Pre-processed SQL query : select from category left outer join category where category.id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.014925373134328358
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.10904463742732795

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.7172770098531481
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7172770098531482
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.676072866389843
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.676072866389843
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]

Syntactic Similarity:0.5928132157371551
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.592813215737155
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.4793836984060844
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4793836984060844
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification,sort)
[select * from category category where category.id in :spec]

Syntactic Similarity:0.4793836984060844
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4793836984060844
Path matching:False
Request matching:False



======================================= 40 given SQL query ===========================================
Given individual SQL query: insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Pre-processed SQL query : insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.253125
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, True]
request_matching_number_k:[1, 2, 2, 2, 3]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.6]
request_ap:0.45892863889091856

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7754723967760381
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.025472396776038
Path matching:False
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7754723967760381
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.025472396776038
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7754723967760381
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.025472396776038
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7754723967760381
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.025472396776038
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.683063699540531
Semantic Similarity:0.2
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.883063699540531
Path matching:False
Request matching:True



======================================= 41 given SQL query ===========================================
Given individual SQL query: insert into article (id) values (?)
Pre-processed SQL query : insert into article (id) values (?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.35
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, True]
request_matching_number_k:[1, 2, 2, 2, 3]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.6]
request_ap:0.6488304093567251

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8155882426423371
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.065588242642337
Path matching:False
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8155882426423371
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.065588242642337
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8155882426423371
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.065588242642337
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.8155882426423371
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.065588242642337
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.6840321867860131
Semantic Similarity:0.2
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.884032186786013
Path matching:False
Request matching:True



======================================= 42 given SQL query ===========================================
Given individual SQL query: insert into post_category (post_id, category_id) values (?, ?)
Pre-processed SQL query : insert into post_category (post_id, category_id) values (?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| articlecreaterequest org.wallride.web.controller.admin.article.articlecreateform.buildarticlecreaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.createarticle(articlecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy184.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into article (id) values (?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string, articlecreateform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.24369747899159663
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, False]
request_matching_number_k:[1, 2, 2, 2, 2]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
request_ap:0.4306903291893638

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7786627789362378
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.028662778936238
Path matching:False
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7786627789362378
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.028662778936238
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7786627789362378
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.028662778936238
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.7786627789362378
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.028662778936238
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.7495959975209965
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8924531403781393
Path matching:False
Request matching:False



======================================= 43 given SQL query ===========================================
Given individual SQL query: select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then 1 when post3_2_.id is not null then 2 when post3_.id is not null then 0 end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then 1 when post9_2_.id is not null then 2 when post9_.id is not null then 0 end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=?
Pre-processed SQL query : select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user user6 left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebyid(long) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebyid(long) 
called| article com.sun.proxy..proxy184.findonebyid(long) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=?
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebyid(long) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebyid(long) 
called| article com.sun.proxy..proxy184.findonebyid(long) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=?
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.article.articledescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, True, False, False, False]
path_matching_number_k:[1, 2, 2, 2, 2]
path_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, True, False, False, False]
request_matching_number_k:[1, 2, 2, 2, 2]
request_precision_k:[1.0, 1.0, 0.6666666666666666, 0.5, 0.4]
request_ap:0.7575757575757575

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.9966564262032666
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9966564262032667
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.9966564262032666
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9966564262032667
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]

Syntactic Similarity:0.9966260126428945
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9966260126428945
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.99480025596132
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.99480025596132
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlesearchcontroller.search(string,articlesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.99480025596132
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.99480025596132
Path matching:False
Request matching:False



======================================= 44 given SQL query ===========================================
Given individual SQL query: select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then 1 when post3_2_.id is not null then 2 when post3_.id is not null then 0 end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then 1 when post9_2_.id is not null then 2 when post9_.id is not null then 0 end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
Pre-processed SQL query : select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user user6 left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code=? and article.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebycode(string, string) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebycode(string, string) 
called| article com.sun.proxy..proxy184.findonebycodeandlanguage(string, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| locale org.wallride.web.support.bloglanguagelocaleresolver.resolvelocale(httpservletrequest) 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.metadescription(post) 
called| string org.wallride.web.support.posts.metakeywords(post) 
called| string org.wallride.web.support.posts.title(post) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| pages org.wallride.autoconfigure.wallrideexpressionobjectfactory.createpages(iexpressioncontext) 
called| list org.wallride.web.support.pages.getnodes() 
called| list org.wallride.support.pageutils.getnodes() 
called| list org.wallride.support.pageutils.getnodes(boolean) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| string org.wallride.web.support.users.path(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| modelandview org.wallride.web.controller.guest.page.pagedescribecontroller.handlerequestinternal(httpservletrequest, httpservletresponse) 
called| string org.wallride.web.support.languageurlpathhelper.getlookuppathforrequest(httpservletrequest) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebycode(string, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebycode(string, string) 
called| page com.sun.proxy..proxy192.findonebycodeandlanguage(string, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_1_.code=? and page0_1_.language=?
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebycode(string, string) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebycode(string, string) 
called| article com.sun.proxy..proxy184.findonebycodeandlanguage(string, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.bloglanguagelocaleresolver.resolvelocale(httpservletrequest) 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.metadescription(post) 
called| string org.wallride.web.support.posts.metakeywords(post) 
called| string org.wallride.web.support.posts.title(post) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| pages org.wallride.autoconfigure.wallrideexpressionobjectfactory.createpages(iexpressioncontext) 
called| list org.wallride.web.support.pages.getnodes() 
called| list org.wallride.support.pageutils.getnodes() 
called| list org.wallride.support.pageutils.getnodes(boolean) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| string org.wallride.web.support.users.path(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.12878787878787878
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.14267676767676765

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]

Syntactic Similarity:0.9949571663511293
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9949571663511292
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.9948950573703191
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9948950573703192
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.9930237863111042
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9930237863111042
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.9930237863111042
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9930237863111042
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.9923046751273386
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9923046751273386
Path matching:False
Request matching:False



======================================= 45 given SQL query ===========================================
Given individual SQL query: select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then 1 when post4_2_.id is not null then 2 when post4_.id is not null then 0 end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_1_.code=? and page0_1_.language=?
Pre-processed SQL query : select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user user8 left outer join postcategory left outer join category left outer join posttag left outer join tag where page.code=? and page.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebycode(string, string) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebycode(string, string) 
called| article com.sun.proxy..proxy184.findonebycodeandlanguage(string, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| locale org.wallride.web.support.bloglanguagelocaleresolver.resolvelocale(httpservletrequest) 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.metadescription(post) 
called| string org.wallride.web.support.posts.metakeywords(post) 
called| string org.wallride.web.support.posts.title(post) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| pages org.wallride.autoconfigure.wallrideexpressionobjectfactory.createpages(iexpressioncontext) 
called| list org.wallride.web.support.pages.getnodes() 
called| list org.wallride.support.pageutils.getnodes() 
called| list org.wallride.support.pageutils.getnodes(boolean) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| string org.wallride.web.support.users.path(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| modelandview org.wallride.web.controller.guest.page.pagedescribecontroller.handlerequestinternal(httpservletrequest, httpservletresponse) 
called| string org.wallride.web.support.languageurlpathhelper.getlookuppathforrequest(httpservletrequest) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebycode(string, string) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebycode(string, string) 
called| page com.sun.proxy..proxy192.findonebycodeandlanguage(string, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_1_.code=? and page0_1_.language=?
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]

Syntactic Similarity:0.9982568699318134
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9982568699318133
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.996940831548101
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.996940831548101
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.996940831548101
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.996940831548101
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpageeditdialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9956590541652945
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9956590541652945
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9947061699697815
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9947061699697815
Path matching:False
Request matching:False



======================================= 46 given SQL query ===========================================
Given individual SQL query: select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then 1 when post0_2_.id is not null then 2 when post0_.id is not null then 0 end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
Pre-processed SQL query : select from post left outer join page left outer join article left outer join media left outer join user user where post.id=? and post.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.03225806451612903
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.03225806451612903

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,string)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9488980690059082
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9488980690059083
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.searchcontroller.search(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9488980690059082
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9488980690059083
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8967945596933212
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8967945596933213
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8967945596933212
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8967945596933213
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8967945596933212
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8967945596933213
Path matching:False
Request matching:False



======================================= 47 given SQL query ===========================================
Given individual SQL query: insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Pre-processed SQL query : insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform,bindingresult,bloglanguage,authorizeduser)
method:org.wallride.service.commentservice.createcomment(commentcreaterequest,authorizeduser)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.repository.commentrepository.saveandflushcreate(comment)
[insert into comment comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.7521473863852047
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.085480719718538
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
method:org.wallride.repository.commentrepository.saveandflushupdate(comment)
[update comment comment set updated_at=?, content=? where comment.id = ?]

Syntactic Similarity:0.45904585851063145
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.45904585851063145
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.2874556041556605
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.2874556041556605
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.2874556041556605
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.2874556041556605
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]

Syntactic Similarity:0.2874556041556605
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.2874556041556605
Path matching:False
Request matching:False



======================================= 48 given SQL query ===========================================
Given individual SQL query: select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
Pre-processed SQL query : select from customfieldvalue where customfiel.post_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.015151515151515152
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.015151515151515152

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]

Syntactic Similarity:0.36558360694084685
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.36558360694084685
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.318774075998914
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.318774075998914
Path matching:False
Request matching:False



======================================= 49 given SQL query ===========================================
Given individual SQL query: select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
Pre-processed SQL query : select from postcategory inner join category left outer join category where categories.post_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.feedcontroller.categoryrss(string,bloglanguage,model)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.7579247375164354
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7579247375164354
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.feedcontroller.categoryatom(string,bloglanguage,model)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.7579247375164354
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7579247375164354
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.7278802136795155
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7278802136795155
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.6858746349575049
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6858746349575049
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlesearchcontroller.search(string,articlesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.6858746349575049
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6858746349575049
Path matching:False
Request matching:False



======================================= 50 given SQL query ===========================================
Given individual SQL query: select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
Pre-processed SQL query : select from posttag inner join tag where tags.post_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| commentcreaterequest org.wallride.web.controller.guest.comment.commentform.tocommentcreaterequest(bloglanguage, user) 
called| long org.wallride.web.controller.guest.comment.commentform.getpostid() 
called| string org.wallride.web.controller.guest.comment.commentform.getcontent() 
called| comment org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.createcomment(commentcreaterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| comment org.wallride.service.commentservice.createcomment(commentcreaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebyidandlanguage(long, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.id=? and post0_.language=?
called| user com.sun.proxy..proxy190.findonebyid(long) 
sql|select user0_.id as id1_19_, user0_.created_at as created_2_19_, user0_.created_by as created_3_19_, user0_.updated_at as updated_4_19_, user0_.updated_by as updated_5_19_, user0_.description as descript6_19_, user0_.email as email7_19_, user0_.login_id as login_id8_19_, user0_.login_password as login_pa9_19_, user0_.name_first as name_fi10_19_, user0_.name_last as name_la11_19_, user0_.nickname as nicknam12_19_ from user user0_ where user0_.id=?
called| object com.sun.proxy..proxy189.saveandflush(object) 
sql|insert into comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select customfiel0_.post_id as post_id12_1_0_, customfiel0_.id as id1_1_0_, customfiel0_.id as id1_1_1_, customfiel0_.created_at as created_2_1_1_, customfiel0_.created_by as created_3_1_1_, customfiel0_.updated_at as updated_4_1_1_, customfiel0_.updated_by as updated_5_1_1_, customfiel0_.custom_field_id as custom_11_1_1_, customfiel0_.date_value as date_val6_1_1_, customfiel0_.datetime_value as datetime7_1_1_, customfiel0_.number_value as number_v8_1_1_, customfiel0_.post_id as post_id12_1_1_, customfiel0_.string_value as string_v9_1_1_, customfiel0_.text_value as text_va10_1_1_ from custom_field_value customfiel0_ where customfiel0_.post_id=?
sql|select categories0_.post_id as post_id2_14_0_, categories0_.category_id as category1_14_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, category2_.id as id1_5_2_, category2_.created_at as created_2_5_2_, category2_.created_by as created_3_5_2_, category2_.updated_at as updated_4_5_2_, category2_.updated_by as updated_5_5_2_, category2_.code as code6_5_2_, category2_.description as descript7_5_2_, category2_.language as language8_5_2_, category2_.lft as lft9_5_2_, category2_.name as name10_5_2_, category2_.parent_id as parent_12_5_2_, category2_.rgt as rgt11_5_2_ from post_category categories0_ inner join category category1_ on categories0_.category_id=category1_.id left outer join category category2_ on category1_.parent_id=category2_.id where categories0_.post_id=?
sql|select tags0_.post_id as post_id2_17_0_, tags0_.tag_id as tag_id1_17_0_, tag1_.id as id1_18_1_, tag1_.created_at as created_2_18_1_, tag1_.created_by as created_3_18_1_, tag1_.updated_at as updated_4_18_1_, tag1_.updated_by as updated_5_18_1_, tag1_.language as language6_18_1_, tag1_.name as name7_18_1_ from post_tag tags0_ inner join tag tag1_ on tags0_.tag_id=tag1_.id where tags0_.post_id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| commentsavedmodel org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform, bindingresult, bloglanguage, authorizeduser) 
called| serializable org.wallride.web.support.domainobjectsavedmodel.getid() 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getauthorname() 
called| localdatetime org.wallride.web.controller.guest.comment.commentsavedmodel.getdate() 
called| void org.wallride.support.localdatetimeserializer.serialize(localdatetime, jsongenerator, serializerprovider) 
called| string org.wallride.web.controller.guest.comment.commentsavedmodel.getcontent() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.support.bloglanguagerewritematch.getmatchingurl() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| string org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.gettarget() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.islast() 
called| boolean org.wallride.web.support.extendedurlrewritefilter.rewrittenurlimpl.dorewrite(httpservletrequest, httpservletresponse, filterchain) 
called| boolean org.wallride.web.support.bloglanguagerewritematch.execute(httpservletrequest, httpservletresponse) 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| object org.wallride.web.support.bloglanguagemethodargumentresolver.resolveargument(methodparameter, modelandviewcontainer, nativewebrequest, webdatabinderfactory) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.5169345459136384
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5169345459136384
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string,tagsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.49842626001964807
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49842626001964807
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.tagcontroller.index(pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.49842626001964807
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49842626001964807
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,string)
method:org.wallride.service.tagservice.gettags(tagsearchrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]

Syntactic Similarity:0.49842626001964807
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49842626001964807
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]

Syntactic Similarity:0.47609535686966953
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.47609535686966953
Path matching:False
Request matching:False



======================================= 51 given SQL query ===========================================
Given individual SQL query: select this_.id as id1_6_6_, this_.created_at as created_2_6_6_, this_.created_by as created_3_6_6_, this_.updated_at as updated_4_6_6_, this_.updated_by as updated_5_6_6_, this_.approved as approved6_6_6_, this_.author_id as author_10_6_6_, this_.author_name as author_n7_6_6_, this_.content as content8_6_6_, this_.date as date9_6_6_, this_.post_id as post_id11_6_6_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, post3_.id as id1_13_1_, post3_.created_at as created_2_13_1_, post3_.created_by as created_3_13_1_, post3_.updated_at as updated_4_13_1_, post3_.updated_by as updated_5_13_1_, post3_.author_id as author_17_13_1_, post3_.body as body6_13_1_, post3_.code as code7_13_1_, post3_.cover_id as cover_i18_13_1_, post3_.date as date8_13_1_, post3_.drafted_id as drafted19_13_1_, post3_.drafted_code as drafted_9_13_1_, post3_.language as languag10_13_1_, post3_.seo_description as seo_des11_13_1_, post3_.seo_keywords as seo_key12_13_1_, post3_.seo_title as seo_tit13_13_1_, post3_.status as status14_13_1_, post3_.title as title15_13_1_, post3_.views as views16_13_1_, post3_1_.lft as lft1_10_1_, post3_1_.parent_id as parent_i4_10_1_, post3_1_.rgt as rgt2_10_1_, case when post3_1_.id is not null then 1 when post3_2_.id is not null then 2 when post3_.id is not null then 0 end as clazz_1_, user4_.id as id1_19_2_, user4_.created_at as created_2_19_2_, user4_.created_by as created_3_19_2_, user4_.updated_at as updated_4_19_2_, user4_.updated_by as updated_5_19_2_, user4_.description as descript6_19_2_, user4_.email as email7_19_2_, user4_.login_id as login_id8_19_2_, user4_.login_password as login_pa9_19_2_, user4_.name_first as name_fi10_19_2_, user4_.name_last as name_la11_19_2_, user4_.nickname as nicknam12_19_2_, media5_.id as id1_8_3_, media5_.created_at as created_2_8_3_, media5_.created_by as created_3_8_3_, media5_.updated_at as updated_4_8_3_, media5_.updated_by as updated_5_8_3_, media5_.mime_type as mime_typ6_8_3_, media5_.original_name as original7_8_3_, post6_.id as id1_13_4_, post6_.created_at as created_2_13_4_, post6_.created_by as created_3_13_4_, post6_.updated_at as updated_4_13_4_, post6_.updated_by as updated_5_13_4_, post6_.author_id as author_17_13_4_, post6_.body as body6_13_4_, post6_.code as code7_13_4_, post6_.cover_id as cover_i18_13_4_, post6_.date as date8_13_4_, post6_.drafted_id as drafted19_13_4_, post6_.drafted_code as drafted_9_13_4_, post6_.language as languag10_13_4_, post6_.seo_description as seo_des11_13_4_, post6_.seo_keywords as seo_key12_13_4_, post6_.seo_title as seo_tit13_13_4_, post6_.status as status14_13_4_, post6_.title as title15_13_4_, post6_.views as views16_13_4_, post6_1_.lft as lft1_10_4_, post6_1_.parent_id as parent_i4_10_4_, post6_1_.rgt as rgt2_10_4_, case when post6_1_.id is not null then 1 when post6_2_.id is not null then 2 when post6_.id is not null then 0 end as clazz_4_, page7_.id as id1_13_5_, page7_1_.created_at as created_2_13_5_, page7_1_.created_by as created_3_13_5_, page7_1_.updated_at as updated_4_13_5_, page7_1_.updated_by as updated_5_13_5_, page7_1_.author_id as author_17_13_5_, page7_1_.body as body6_13_5_, page7_1_.code as code7_13_5_, page7_1_.cover_id as cover_i18_13_5_, page7_1_.date as date8_13_5_, page7_1_.drafted_id as drafted19_13_5_, page7_1_.drafted_code as drafted_9_13_5_, page7_1_.language as languag10_13_5_, page7_1_.seo_description as seo_des11_13_5_, page7_1_.seo_keywords as seo_key12_13_5_, page7_1_.seo_title as seo_tit13_13_5_, page7_1_.status as status14_13_5_, page7_1_.title as title15_13_5_, page7_1_.views as views16_13_5_, page7_.lft as lft1_10_5_, page7_.parent_id as parent_i4_10_5_, page7_.rgt as rgt2_10_5_ from comment this_ left outer join user user2_ on this_.author_id=user2_.id inner join post post3_ on this_.post_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join user user4_ on post3_.author_id=user4_.id left outer join media media5_ on post3_.cover_id=media5_.id left outer join post post6_ on post3_.drafted_id=post6_.id left outer join page post6_1_ on post6_.id=post6_1_.id left outer join article post6_2_ on post6_.id=post6_2_.id left outer join page page7_ on post3_1_.parent_id=page7_.id left outer join post page7_1_ on page7_.id=page7_1_.id where (this_.id in (?))
Pre-processed SQL query : select from comment this left outer join user user inner join post left outer join page left outer join article left outer join user user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (this_.id in (?)) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.comment.commentsearchcontroller.search(string, commentsearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.comment.commentsearchcontroller.search(string, commentsearchform, bindingresult, pageable, model, httpservletrequest) 
called| commentsearchrequest org.wallride.web.controller.admin.comment.commentsearchform.tocommentsearchrequest() 
called| string org.wallride.web.controller.admin.comment.commentsearchform.getkeyword() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_6_6_, this_.created_at as created_2_6_6_, this_.created_by as created_3_6_6_, this_.updated_at as updated_4_6_6_, this_.updated_by as updated_5_6_6_, this_.approved as approved6_6_6_, this_.author_id as author_10_6_6_, this_.author_name as author_n7_6_6_, this_.content as content8_6_6_, this_.date as date9_6_6_, this_.post_id as post_id11_6_6_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, post3_.id as id1_13_1_, post3_.created_at as created_2_13_1_, post3_.created_by as created_3_13_1_, post3_.updated_at as updated_4_13_1_, post3_.updated_by as updated_5_13_1_, post3_.author_id as author_17_13_1_, post3_.body as body6_13_1_, post3_.code as code7_13_1_, post3_.cover_id as cover_i18_13_1_, post3_.date as date8_13_1_, post3_.drafted_id as drafted19_13_1_, post3_.drafted_code as drafted_9_13_1_, post3_.language as languag10_13_1_, post3_.seo_description as seo_des11_13_1_, post3_.seo_keywords as seo_key12_13_1_, post3_.seo_title as seo_tit13_13_1_, post3_.status as status14_13_1_, post3_.title as title15_13_1_, post3_.views as views16_13_1_, post3_1_.lft as lft1_10_1_, post3_1_.parent_id as parent_i4_10_1_, post3_1_.rgt as rgt2_10_1_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_1_, user4_.id as id1_19_2_, user4_.created_at as created_2_19_2_, user4_.created_by as created_3_19_2_, user4_.updated_at as updated_4_19_2_, user4_.updated_by as updated_5_19_2_, user4_.description as descript6_19_2_, user4_.email as email7_19_2_, user4_.login_id as login_id8_19_2_, user4_.login_password as login_pa9_19_2_, user4_.name_first as name_fi10_19_2_, user4_.name_last as name_la11_19_2_, user4_.nickname as nicknam12_19_2_, media5_.id as id1_8_3_, media5_.created_at as created_2_8_3_, media5_.created_by as created_3_8_3_, media5_.updated_at as updated_4_8_3_, media5_.updated_by as updated_5_8_3_, media5_.mime_type as mime_typ6_8_3_, media5_.original_name as original7_8_3_, post6_.id as id1_13_4_, post6_.created_at as created_2_13_4_, post6_.created_by as created_3_13_4_, post6_.updated_at as updated_4_13_4_, post6_.updated_by as updated_5_13_4_, post6_.author_id as author_17_13_4_, post6_.body as body6_13_4_, post6_.code as code7_13_4_, post6_.cover_id as cover_i18_13_4_, post6_.date as date8_13_4_, post6_.drafted_id as drafted19_13_4_, post6_.drafted_code as drafted_9_13_4_, post6_.language as languag10_13_4_, post6_.seo_description as seo_des11_13_4_, post6_.seo_keywords as seo_key12_13_4_, post6_.seo_title as seo_tit13_13_4_, post6_.status as status14_13_4_, post6_.title as title15_13_4_, post6_.views as views16_13_4_, post6_1_.lft as lft1_10_4_, post6_1_.parent_id as parent_i4_10_4_, post6_1_.rgt as rgt2_10_4_, case when post6_1_.id is not null then ? when post6_2_.id is not null then ? when post6_.id is not null then ? end as clazz_4_, page7_.id as id1_13_5_, page7_1_.created_at as created_2_13_5_, page7_1_.created_by as created_3_13_5_, page7_1_.updated_at as updated_4_13_5_, page7_1_.updated_by as updated_5_13_5_, page7_1_.author_id as author_17_13_5_, page7_1_.body as body6_13_5_, page7_1_.code as code7_13_5_, page7_1_.cover_id as cover_i18_13_5_, page7_1_.date as date8_13_5_, page7_1_.drafted_id as drafted19_13_5_, page7_1_.drafted_code as drafted_9_13_5_, page7_1_.language as languag10_13_5_, page7_1_.seo_description as seo_des11_13_5_, page7_1_.seo_keywords as seo_key12_13_5_, page7_1_.seo_title as seo_tit13_13_5_, page7_1_.status as status14_13_5_, page7_1_.title as title15_13_5_, page7_1_.views as views16_13_5_, page7_.lft as lft1_10_5_, page7_.parent_id as parent_i4_10_5_, page7_.rgt as rgt2_10_5_ from comment this_ left outer join user user2_ on this_.author_id=user2_.id inner join post post3_ on this_.post_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join user user4_ on post3_.author_id=user4_.id left outer join media media5_ on post3_.cover_id=media5_.id left outer join post post6_ on post3_.drafted_id=post6_.id left outer join page post6_1_ on post6_.id=post6_1_.id left outer join article post6_2_ on post6_.id=post6_2_.id left outer join page page7_ on post3_1_.parent_id=page7_.id left outer join post page7_1_ on page7_.id=page7_1_.id where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
after rest| string org.wallride.web.controller.admin.comment.commentsearchcontroller.search(string, commentsearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| string org.wallride.web.support.pagination.geturl() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentsearchcontroller.search(string,commentsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]

Syntactic Similarity:0.958953317954376
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9589533179543759
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.953715531517736
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.453715531517736
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.9498952272673091
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4498952272673091
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]

Syntactic Similarity:0.9406749195110568
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4406749195110566
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]

Syntactic Similarity:0.9406749195110568
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4406749195110566
Path matching:False
Request matching:False



======================================= 52 given SQL query ===========================================
Given individual SQL query: select comment0_.id as id1_6_0_, user1_.id as id1_19_1_, comment0_.created_at as created_2_6_0_, comment0_.created_by as created_3_6_0_, comment0_.updated_at as updated_4_6_0_, comment0_.updated_by as updated_5_6_0_, comment0_.approved as approved6_6_0_, comment0_.author_id as author_10_6_0_, comment0_.author_name as author_n7_6_0_, comment0_.content as content8_6_0_, comment0_.date as date9_6_0_, comment0_.post_id as post_id11_6_0_, user1_.created_at as created_2_19_1_, user1_.created_by as created_3_19_1_, user1_.updated_at as updated_4_19_1_, user1_.updated_by as updated_5_19_1_, user1_.description as descript6_19_1_, user1_.email as email7_19_1_, user1_.login_id as login_id8_19_1_, user1_.login_password as login_pa9_19_1_, user1_.name_first as name_fi10_19_1_, user1_.name_last as name_la11_19_1_, user1_.nickname as nicknam12_19_1_ from comment comment0_ left outer join user user1_ on comment0_.author_id=user1_.id where comment0_.id=? for update
Pre-processed SQL query : select from comment comment left outer join user user where comment.id=? for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| boolean org.wallride.web.controller.admin.comment.commentbulkdeleteform.isconfirmed() 
called| commentbulkdeleterequest org.wallride.web.controller.admin.comment.commentbulkdeleteform.tocommentbulkdeleterequest() 
called| list org.wallride.web.controller.admin.comment.commentbulkdeleteform.getids() 
called| string org.wallride.web.controller.admin.comment.commentbulkdeleteform.getlanguage() 
called| list org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.bulkdeletecomment(commentbulkdeleterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| list org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest, authorizeduser) 
called| comment org.wallride.service.commentservice.deletecomment(commentdeleterequest, authorizeduser) 
called| comment com.sun.proxy..proxy189.findoneforupdatebyid(long) 
sql|select comment0_.id as id1_6_0_, user1_.id as id1_19_1_, comment0_.created_at as created_2_6_0_, comment0_.created_by as created_3_6_0_, comment0_.updated_at as updated_4_6_0_, comment0_.updated_by as updated_5_6_0_, comment0_.approved as approved6_6_0_, comment0_.author_id as author_10_6_0_, comment0_.author_name as author_n7_6_0_, comment0_.content as content8_6_0_, comment0_.date as date9_6_0_, comment0_.post_id as post_id11_6_0_, user1_.created_at as created_2_19_1_, user1_.created_by as created_3_19_1_, user1_.updated_at as updated_4_19_1_, user1_.updated_by as updated_5_19_1_, user1_.description as descript6_19_1_, user1_.email as email7_19_1_, user1_.login_id as login_id8_19_1_, user1_.login_password as login_pa9_19_1_, user1_.name_first as name_fi10_19_1_, user1_.name_last as name_la11_19_1_, user1_.nickname as nicknam12_19_1_ from comment comment0_ left outer join user user1_ on comment0_.author_id=user1_.id where comment0_.id=? for update
called| void com.sun.proxy..proxy189.delete(object) 
sql|delete from comment where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.comment.commentsearchcontroller.query(string) 
called| commentsearchform org.wallride.web.controller.admin.comment.commentsearchcontroller.setupcommentsearchform() 
called| string org.wallride.support.stringformatter.parse(string, locale) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.5277492028222267
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5277492028222266
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.5277492028222267
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5277492028222266
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkunapprovecontroller.unapprove(commentbulkunapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkunapprovecomment(commentbulkunapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.5277492028222267
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5277492028222266
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.delete(long,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.5277492028222267
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5277492028222266
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkapprovecontroller.approve(commentbulkapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkapprovecomment(commentbulkapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.5277492028222267
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.5277492028222266
Path matching:False
Request matching:False



======================================= 53 given SQL query ===========================================
Given individual SQL query: delete from comment where id=?
Pre-processed SQL query : delete from comment where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| boolean org.wallride.web.controller.admin.comment.commentbulkdeleteform.isconfirmed() 
called| commentbulkdeleterequest org.wallride.web.controller.admin.comment.commentbulkdeleteform.tocommentbulkdeleterequest() 
called| list org.wallride.web.controller.admin.comment.commentbulkdeleteform.getids() 
called| string org.wallride.web.controller.admin.comment.commentbulkdeleteform.getlanguage() 
called| list org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.bulkdeletecomment(commentbulkdeleterequest, authorizeduser) 
called| int org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.getindex(signature) 
called| int org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4..fastclassbyspringcglib..67ab527.getindex(signature) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| list org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest, authorizeduser) 
called| comment org.wallride.service.commentservice.deletecomment(commentdeleterequest, authorizeduser) 
called| comment com.sun.proxy..proxy189.findoneforupdatebyid(long) 
sql|select comment0_.id as id1_6_0_, user1_.id as id1_19_1_, comment0_.created_at as created_2_6_0_, comment0_.created_by as created_3_6_0_, comment0_.updated_at as updated_4_6_0_, comment0_.updated_by as updated_5_6_0_, comment0_.approved as approved6_6_0_, comment0_.author_id as author_10_6_0_, comment0_.author_name as author_n7_6_0_, comment0_.content as content8_6_0_, comment0_.date as date9_6_0_, comment0_.post_id as post_id11_6_0_, user1_.created_at as created_2_19_1_, user1_.created_by as created_3_19_1_, user1_.updated_at as updated_4_19_1_, user1_.updated_by as updated_5_19_1_, user1_.description as descript6_19_1_, user1_.email as email7_19_1_, user1_.login_id as login_id8_19_1_, user1_.login_password as login_pa9_19_1_, user1_.name_first as name_fi10_19_1_, user1_.name_last as name_la11_19_1_, user1_.nickname as nicknam12_19_1_ from comment comment0_ left outer join user user1_ on comment0_.author_id=user1_.id where comment0_.id=? for update
called| void com.sun.proxy..proxy189.delete(object) 
sql|delete from comment where id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform, bindingresult, string, authorizeduser, redirectattributes, model) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.comment.commentsearchcontroller.query(string) 
called| commentsearchform org.wallride.web.controller.admin.comment.commentsearchcontroller.setupcommentsearchform() 
called| string org.wallride.support.stringformatter.parse(string, locale) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.7943059165756107
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7943059165756107
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.7943059165756107
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7943059165756107
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkunapprovecontroller.unapprove(commentbulkunapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkunapprovecomment(commentbulkunapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.7943059165756107
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7943059165756107
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.delete(long,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.7943059165756107
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7943059165756107
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkapprovecontroller.approve(commentbulkapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkapprovecomment(commentbulkapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.7943059165756107
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7943059165756107
Path matching:False
Request matching:False



======================================= 54 given SQL query ===========================================
Given individual SQL query: select this_.id as id1_13_9_, this_1_.created_at as created_2_13_9_, this_1_.created_by as created_3_13_9_, this_1_.updated_at as updated_4_13_9_, this_1_.updated_by as updated_5_13_9_, this_1_.author_id as author_17_13_9_, this_1_.body as body6_13_9_, this_1_.code as code7_13_9_, this_1_.cover_id as cover_i18_13_9_, this_1_.date as date8_13_9_, this_1_.drafted_id as drafted19_13_9_, this_1_.drafted_code as drafted_9_13_9_, this_1_.language as languag10_13_9_, this_1_.seo_description as seo_des11_13_9_, this_1_.seo_keywords as seo_key12_13_9_, this_1_.seo_title as seo_tit13_13_9_, this_1_.status as status14_13_9_, this_1_.title as title15_13_9_, this_1_.views as views16_13_9_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, categories3_.post_id as post_id2_14_11_, category4_.id as category1_14_11_, category4_.id as id1_5_1_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, category5_.id as id1_5_2_, category5_.created_at as created_2_5_2_, category5_.created_by as created_3_5_2_, category5_.updated_at as updated_4_5_2_, category5_.updated_by as updated_5_5_2_, category5_.code as code6_5_2_, category5_.description as descript7_5_2_, category5_.language as language8_5_2_, category5_.lft as lft9_5_2_, category5_.name as name10_5_2_, category5_.parent_id as parent_12_5_2_, category5_.rgt as rgt11_5_2_, media6_.id as id1_8_3_, media6_.created_at as created_2_8_3_, media6_.created_by as created_3_8_3_, media6_.updated_at as updated_4_8_3_, media6_.updated_by as updated_5_8_3_, media6_.mime_type as mime_typ6_8_3_, media6_.original_name as original7_8_3_, customfiel7_.post_id as post_id12_1_12_, customfiel7_.id as id1_1_12_, customfiel7_.id as id1_1_4_, customfiel7_.created_at as created_2_1_4_, customfiel7_.created_by as created_3_1_4_, customfiel7_.updated_at as updated_4_1_4_, customfiel7_.updated_by as updated_5_1_4_, customfiel7_.custom_field_id as custom_11_1_4_, customfiel7_.date_value as date_val6_1_4_, customfiel7_.datetime_value as datetime7_1_4_, customfiel7_.number_value as number_v8_1_4_, customfiel7_.post_id as post_id12_1_4_, customfiel7_.string_value as string_v9_1_4_, customfiel7_.text_value as text_va10_1_4_, customfiel8_.id as id1_0_5_, customfiel8_.created_at as created_2_0_5_, customfiel8_.created_by as created_3_0_5_, customfiel8_.updated_at as updated_4_0_5_, customfiel8_.updated_by as updated_5_0_5_, customfiel8_.code as code6_0_5_, customfiel8_.default_value as default_7_0_5_, customfiel8_.description as descript8_0_5_, customfiel8_.field_type as field_ty9_0_5_, customfiel8_.idx as idx10_0_5_, customfiel8_.language as languag11_0_5_, customfiel8_.name as name12_0_5_, post9_.id as id1_13_6_, post9_.created_at as created_2_13_6_, post9_.created_by as created_3_13_6_, post9_.updated_at as updated_4_13_6_, post9_.updated_by as updated_5_13_6_, post9_.author_id as author_17_13_6_, post9_.body as body6_13_6_, post9_.code as code7_13_6_, post9_.cover_id as cover_i18_13_6_, post9_.date as date8_13_6_, post9_.drafted_id as drafted19_13_6_, post9_.drafted_code as drafted_9_13_6_, post9_.language as languag10_13_6_, post9_.seo_description as seo_des11_13_6_, post9_.seo_keywords as seo_key12_13_6_, post9_.seo_title as seo_tit13_13_6_, post9_.status as status14_13_6_, post9_.title as title15_13_6_, post9_.views as views16_13_6_, post9_1_.lft as lft1_10_6_, post9_1_.parent_id as parent_i4_10_6_, post9_1_.rgt as rgt2_10_6_, case when post9_1_.id is not null then 1 when post9_2_.id is not null then 2 when post9_.id is not null then 0 end as clazz_6_, page10_.id as id1_13_7_, page10_1_.created_at as created_2_13_7_, page10_1_.created_by as created_3_13_7_, page10_1_.updated_at as updated_4_13_7_, page10_1_.updated_by as updated_5_13_7_, page10_1_.author_id as author_17_13_7_, page10_1_.body as body6_13_7_, page10_1_.code as code7_13_7_, page10_1_.cover_id as cover_i18_13_7_, page10_1_.date as date8_13_7_, page10_1_.drafted_id as drafted19_13_7_, page10_1_.drafted_code as drafted_9_13_7_, page10_1_.language as languag10_13_7_, page10_1_.seo_description as seo_des11_13_7_, page10_1_.seo_keywords as seo_key12_13_7_, page10_1_.seo_title as seo_tit13_13_7_, page10_1_.status as status14_13_7_, page10_1_.title as title15_13_7_, page10_1_.views as views16_13_7_, page10_.lft as lft1_10_7_, page10_.parent_id as parent_i4_10_7_, page10_.rgt as rgt2_10_7_, tags11_.post_id as post_id2_17_13_, tag12_.id as tag_id1_17_13_, tag12_.id as id1_18_8_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_ from article this_ inner join post this_1_ on this_.id=this_1_.id left outer join user user2_ on this_1_.author_id=user2_.id left outer join post_category categories3_ on this_.id=categories3_.post_id left outer join category category4_ on categories3_.category_id=category4_.id left outer join category category5_ on category4_.parent_id=category5_.id left outer join media media6_ on this_1_.cover_id=media6_.id left outer join custom_field_value customfiel7_ on this_.id=customfiel7_.post_id left outer join custom_field customfiel8_ on customfiel7_.custom_field_id=customfiel8_.id left outer join post post9_ on this_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join page page10_ on post9_1_.parent_id=page10_.id left outer join post page10_1_ on page10_.id=page10_1_.id left outer join post_tag tags11_ on this_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where (this_.id in (?))
Pre-processed SQL query : select from article inner join post left outer join user user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (this_.id in (?)) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlesearchcontroller.search(string, articlesearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.search(string, articlesearchform, bindingresult, pageable, model, httpservletrequest) 
called| articlesearchrequest org.wallride.web.controller.admin.article.articlesearchform.toarticlesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.article.articlesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.gettagid() 
called| long org.wallride.web.controller.admin.article.articlesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.article.articlesearchform.getstatus() 
called| page org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticles(articlesearchrequest, pageable) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| page org.wallride.service.articleservice.getarticles(articlesearchrequest, pageable) 
called| page com.sun.proxy..proxy184.search(articlesearchrequest, pageable) 
called| page org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_13_9_, this_1_.created_at as created_2_13_9_, this_1_.created_by as created_3_13_9_, this_1_.updated_at as updated_4_13_9_, this_1_.updated_by as updated_5_13_9_, this_1_.author_id as author_17_13_9_, this_1_.body as body6_13_9_, this_1_.code as code7_13_9_, this_1_.cover_id as cover_i18_13_9_, this_1_.date as date8_13_9_, this_1_.drafted_id as drafted19_13_9_, this_1_.drafted_code as drafted_9_13_9_, this_1_.language as languag10_13_9_, this_1_.seo_description as seo_des11_13_9_, this_1_.seo_keywords as seo_key12_13_9_, this_1_.seo_title as seo_tit13_13_9_, this_1_.status as status14_13_9_, this_1_.title as title15_13_9_, this_1_.views as views16_13_9_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, categories3_.post_id as post_id2_14_11_, category4_.id as category1_14_11_, category4_.id as id1_5_1_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, category5_.id as id1_5_2_, category5_.created_at as created_2_5_2_, category5_.created_by as created_3_5_2_, category5_.updated_at as updated_4_5_2_, category5_.updated_by as updated_5_5_2_, category5_.code as code6_5_2_, category5_.description as descript7_5_2_, category5_.language as language8_5_2_, category5_.lft as lft9_5_2_, category5_.name as name10_5_2_, category5_.parent_id as parent_12_5_2_, category5_.rgt as rgt11_5_2_, media6_.id as id1_8_3_, media6_.created_at as created_2_8_3_, media6_.created_by as created_3_8_3_, media6_.updated_at as updated_4_8_3_, media6_.updated_by as updated_5_8_3_, media6_.mime_type as mime_typ6_8_3_, media6_.original_name as original7_8_3_, customfiel7_.post_id as post_id12_1_12_, customfiel7_.id as id1_1_12_, customfiel7_.id as id1_1_4_, customfiel7_.created_at as created_2_1_4_, customfiel7_.created_by as created_3_1_4_, customfiel7_.updated_at as updated_4_1_4_, customfiel7_.updated_by as updated_5_1_4_, customfiel7_.custom_field_id as custom_11_1_4_, customfiel7_.date_value as date_val6_1_4_, customfiel7_.datetime_value as datetime7_1_4_, customfiel7_.number_value as number_v8_1_4_, customfiel7_.post_id as post_id12_1_4_, customfiel7_.string_value as string_v9_1_4_, customfiel7_.text_value as text_va10_1_4_, customfiel8_.id as id1_0_5_, customfiel8_.created_at as created_2_0_5_, customfiel8_.created_by as created_3_0_5_, customfiel8_.updated_at as updated_4_0_5_, customfiel8_.updated_by as updated_5_0_5_, customfiel8_.code as code6_0_5_, customfiel8_.default_value as default_7_0_5_, customfiel8_.description as descript8_0_5_, customfiel8_.field_type as field_ty9_0_5_, customfiel8_.idx as idx10_0_5_, customfiel8_.language as languag11_0_5_, customfiel8_.name as name12_0_5_, post9_.id as id1_13_6_, post9_.created_at as created_2_13_6_, post9_.created_by as created_3_13_6_, post9_.updated_at as updated_4_13_6_, post9_.updated_by as updated_5_13_6_, post9_.author_id as author_17_13_6_, post9_.body as body6_13_6_, post9_.code as code7_13_6_, post9_.cover_id as cover_i18_13_6_, post9_.date as date8_13_6_, post9_.drafted_id as drafted19_13_6_, post9_.drafted_code as drafted_9_13_6_, post9_.language as languag10_13_6_, post9_.seo_description as seo_des11_13_6_, post9_.seo_keywords as seo_key12_13_6_, post9_.seo_title as seo_tit13_13_6_, post9_.status as status14_13_6_, post9_.title as title15_13_6_, post9_.views as views16_13_6_, post9_1_.lft as lft1_10_6_, post9_1_.parent_id as parent_i4_10_6_, post9_1_.rgt as rgt2_10_6_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_6_, page10_.id as id1_13_7_, page10_1_.created_at as created_2_13_7_, page10_1_.created_by as created_3_13_7_, page10_1_.updated_at as updated_4_13_7_, page10_1_.updated_by as updated_5_13_7_, page10_1_.author_id as author_17_13_7_, page10_1_.body as body6_13_7_, page10_1_.code as code7_13_7_, page10_1_.cover_id as cover_i18_13_7_, page10_1_.date as date8_13_7_, page10_1_.drafted_id as drafted19_13_7_, page10_1_.drafted_code as drafted_9_13_7_, page10_1_.language as languag10_13_7_, page10_1_.seo_description as seo_des11_13_7_, page10_1_.seo_keywords as seo_key12_13_7_, page10_1_.seo_title as seo_tit13_13_7_, page10_1_.status as status14_13_7_, page10_1_.title as title15_13_7_, page10_1_.views as views16_13_7_, page10_.lft as lft1_10_7_, page10_.parent_id as parent_i4_10_7_, page10_.rgt as rgt2_10_7_, tags11_.post_id as post_id2_17_13_, tag12_.id as tag_id1_17_13_, tag12_.id as id1_18_8_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_ from article this_ inner join post this_1_ on this_.id=this_1_.id left outer join user user2_ on this_1_.author_id=user2_.id left outer join post_category categories3_ on this_.id=categories3_.post_id left outer join category category4_ on categories3_.category_id=category4_.id left outer join category category5_ on category4_.parent_id=category5_.id left outer join media media6_ on this_1_.cover_id=media6_.id left outer join custom_field_value customfiel7_ on this_.id=customfiel7_.post_id left outer join custom_field customfiel8_ on customfiel7_.custom_field_id=customfiel8_.id left outer join post post9_ on this_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join page page10_ on post9_1_.parent_id=page10_.id left outer join post page10_1_ on page10_.id=page10_1_.id left outer join post_tag tags11_ on this_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
after rest| string org.wallride.web.controller.admin.article.articlesearchcontroller.search(string, articlesearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| string org.wallride.web.support.pagination.geturl() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9991660098018968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9991660098018968
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlesearchcontroller.search(string,articlesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9991660098018968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9991660098018968
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.month(int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9991660098018968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9991660098018968
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.feedcontroller.indexatom(bloglanguage,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9991660098018968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9991660098018968
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.year(int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9991660098018968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9991660098018968
Path matching:False
Request matching:False



======================================= 55 given SQL query ===========================================
Given individual SQL query: select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
Pre-processed SQL query : select from customfield left outer join customfieldoption options where customfiel.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| sortedset org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getallcustomfields(string) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| sortedset org.wallride.service.customfieldservice.getallcustomfields(string) 
called| list com.sun.proxy..proxy191.findallbylanguage(string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
called| articleeditform org.wallride.web.controller.admin.article.articleeditform.fromdomainobject(article, set) 
called| void org.wallride.web.controller.admin.article.articleeditform.setbody(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setcode(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setdate(localdatetime) 
called| void org.wallride.web.controller.admin.article.articleeditform.setid(long) 
called| void org.wallride.web.controller.admin.article.articleeditform.setlanguage(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.settitle(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setcoverid(string) 
called| set org.wallride.web.controller.admin.article.articleeditform.getcategoryids() 
called| void org.wallride.web.controller.admin.article.articleeditform.settags(string) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getdraftbyid(long) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.web.controller.admin.article.articleeditform.getcoverid() 
called| string org.wallride.web.controller.admin.article.articleeditform.gettitle() 
called| string org.wallride.web.controller.admin.article.articleeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.print(string, locale) 
called| string org.wallride.web.controller.admin.article.articleeditform.getbody() 
called| localdatetime org.wallride.web.controller.admin.article.articleeditform.getdate() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long, string) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long, string) 
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| sortedset org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getallcustomfields(string) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| sortedset org.wallride.service.customfieldservice.getallcustomfields(string) 
called| list com.sun.proxy..proxy191.findallbylanguage(string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
called| pageeditform org.wallride.web.controller.admin.page.pageeditform.fromdomainobject(page, set) 
called| void org.wallride.web.controller.admin.page.pageeditform.setbody(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcode(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setdate(localdatetime) 
called| void org.wallride.web.controller.admin.page.pageeditform.setid(long) 
called| void org.wallride.web.controller.admin.page.pageeditform.setlanguage(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.settitle(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcoverid(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setparentid(long) 
called| set org.wallride.web.controller.admin.page.pageeditform.getcategoryids() 
called| void org.wallride.web.controller.admin.page.pageeditform.settags(string) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getdraftbyid(long) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pageeditform.getid() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.web.controller.admin.page.pageeditform.getcoverid() 
called| string org.wallride.web.controller.admin.page.pageeditform.gettitle() 
called| string org.wallride.web.controller.admin.page.pageeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.print(string, locale) 
called| string org.wallride.web.controller.admin.page.pageeditform.getbody() 
called| localdatetime org.wallride.web.controller.admin.page.pageeditform.getdate() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.1388888888888889
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.1388888888888889

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.2620324336774345
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2620324336774345
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.2620324336774345
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2620324336774345
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.2620324336774345
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2620324336774345
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]

Syntactic Similarity:0.2620324336774345
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2620324336774345
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.findmaxidxbylanguage(string)
[select coalesce(max(idx), 0) from customfield customfield where customfield.language = :language ]

Syntactic Similarity:0.24063873430789234
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2406387343078924
Path matching:False
Request matching:False



======================================= 56 given SQL query ===========================================
Given individual SQL query: select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then 1 when post4_2_.id is not null then 2 when post4_.id is not null then 0 end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then 1 when post10_2_.id is not null then 2 when post10_.id is not null then 0 end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
Pre-processed SQL query : select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user user7 left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.drafted_id=? and article.id=(select max(article.id) from article article inner join post article on article.id=article.id where article.drafted_id=?) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| sortedset org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getallcustomfields(string) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| sortedset org.wallride.service.customfieldservice.getallcustomfields(string) 
called| list com.sun.proxy..proxy191.findallbylanguage(string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
called| articleeditform org.wallride.web.controller.admin.article.articleeditform.fromdomainobject(article, set) 
called| void org.wallride.web.controller.admin.article.articleeditform.setbody(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setcode(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setdate(localdatetime) 
called| void org.wallride.web.controller.admin.article.articleeditform.setid(long) 
called| void org.wallride.web.controller.admin.article.articleeditform.setlanguage(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.settitle(string) 
called| void org.wallride.web.controller.admin.article.articleeditform.setcoverid(string) 
called| set org.wallride.web.controller.admin.article.articleeditform.getcategoryids() 
called| void org.wallride.web.controller.admin.article.articleeditform.settags(string) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getdraftbyid(long) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.web.controller.admin.article.articleeditform.getcoverid() 
called| string org.wallride.web.controller.admin.article.articleeditform.gettitle() 
called| string org.wallride.web.controller.admin.article.articleeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.print(string, locale) 
called| string org.wallride.web.controller.admin.article.articleeditform.getbody() 
called| localdatetime org.wallride.web.controller.admin.article.articleeditform.getdate() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.08791666666666667
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.14153068111767786

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.9878272266018217
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9878272266018215
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.9878272266018217
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9878272266018215
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.9836194764272773
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9836194764272772
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]

Syntactic Similarity:0.9822803994271617
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9822803994271618
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9817584878325468
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.981758487832547
Path matching:False
Request matching:False



======================================= 57 given SQL query ===========================================
Given individual SQL query: select post0_.id as col_0_0_ from post post0_ where post0_.id=2 for update
Pre-processed SQL query : select post.id from post where post.id= for update 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.042328042328042326
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.056146069538926674

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.postservice.getpostbyid(long,string)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]

Syntactic Similarity:0.4028002044179485
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4028002044179484
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform,bindingresult,bloglanguage,authorizeduser)
method:org.wallride.service.commentservice.createcomment(commentcreaterequest,authorizeduser)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]

Syntactic Similarity:0.4028002044179485
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4028002044179484
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.post.postdescribecontroller.describe(string,long,redirectattributes)
method:org.wallride.service.postservice.getpostbyid(long,string)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]

Syntactic Similarity:0.4028002044179485
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.4028002044179484
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.15015983458597662
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1501598345859767
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.15015983458597662
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1501598345859767
Path matching:False
Request matching:False



======================================= 58 given SQL query ===========================================
Given individual SQL query: select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then 1 when post3_2_.id is not null then 2 when post3_.id is not null then 0 end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then 1 when post9_2_.id is not null then 2 when post9_.id is not null then 0 end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
Pre-processed SQL query : select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user user6 left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id=? and article.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.06623901808785529
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.10716381103039674

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.9953715856977021
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9953715856977021
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.9953715856977021
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9953715856977021
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]

Syntactic Similarity:0.9953412113449984
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9953412113449984
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.9945173269675646
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9945173269675647
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]

Syntactic Similarity:0.9935178083392505
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9935178083392504
Path matching:False
Request matching:False



======================================= 59 given SQL query ===========================================
Given individual SQL query: update post set updated_at=?, body=?, date=? where id=?
Pre-processed SQL query : update post set updated_at=?, body=?, date=? where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.024390243902439025
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.12064605852882795

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.36487995227574016
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.507737095132883
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.36487995227574016
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.507737095132883
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.36257370360004204
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48757370360004204
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.36257370360004204
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48757370360004204
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.33024268564484627
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4730998285019891
Path matching:False
Request matching:False



======================================= 60 given SQL query ===========================================
Given individual SQL query: delete from post_media where post_id=?
Pre-processed SQL query : delete from post_media where post_id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3149270482603816
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.24144693900867747

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.48663565267670095
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48663565267670095
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False



======================================= 61 given SQL query ===========================================
Given individual SQL query: select count(id) from comment where post_id =?
Pre-processed SQL query : select from comment where post_id =? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.06565407772304324
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.10379356860067213

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkunapprovecontroller.unapprove(commentbulkunapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkunapprovecomment(commentbulkunapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.delete(long,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkapprovecontroller.approve(commentbulkapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkapprovecomment(commentbulkapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False



======================================= 62 given SQL query ===========================================
Given individual SQL query: select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
Pre-processed SQL query : select from comment comments where comments.post_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| articleupdaterequest org.wallride.web.controller.admin.article.articleeditform.buildarticleupdaterequest() 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| article org.wallride.service.articleservice.publisharticle(article) 
called| article org.wallride.service.articleservice.getdraftbyid(long) 
called| specification org.wallride.repository.articlespecifications.draft(article) 
called| article com.sun.proxy..proxy184.findone(specification) 
called| predicate org.wallride.repository.articlespecifications.lambda$draft$2d738d7f$1(article, root, criteriaquery, criteriabuilder) 
sql|select article0_.id as id1_13_0_, media2_.id as id1_8_1_, post4_.id as id1_13_2_, customfiel5_.id as id1_1_3_, customfiel6_.id as id1_0_4_, user7_.id as id1_19_5_, category9_.id as id1_5_6_, post10_.id as id1_13_7_, tag12_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, post4_.created_at as created_2_13_2_, post4_.created_by as created_3_13_2_, post4_.updated_at as updated_4_13_2_, post4_.updated_by as updated_5_13_2_, post4_.author_id as author_17_13_2_, post4_.body as body6_13_2_, post4_.code as code7_13_2_, post4_.cover_id as cover_i18_13_2_, post4_.date as date8_13_2_, post4_.drafted_id as drafted19_13_2_, post4_.drafted_code as drafted_9_13_2_, post4_.language as languag10_13_2_, post4_.seo_description as seo_des11_13_2_, post4_.seo_keywords as seo_key12_13_2_, post4_.seo_title as seo_tit13_13_2_, post4_.status as status14_13_2_, post4_.title as title15_13_2_, post4_.views as views16_13_2_, post4_1_.lft as lft1_10_2_, post4_1_.parent_id as parent_i4_10_2_, post4_1_.rgt as rgt2_10_2_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_2_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_3_, customfiel5_.created_by as created_3_1_3_, customfiel5_.updated_at as updated_4_1_3_, customfiel5_.updated_by as updated_5_1_3_, customfiel5_.custom_field_id as custom_11_1_3_, customfiel5_.date_value as date_val6_1_3_, customfiel5_.datetime_value as datetime7_1_3_, customfiel5_.number_value as number_v8_1_3_, customfiel5_.post_id as post_id12_1_3_, customfiel5_.string_value as string_v9_1_3_, customfiel5_.text_value as text_va10_1_3_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_4_, customfiel6_.created_by as created_3_0_4_, customfiel6_.updated_at as updated_4_0_4_, customfiel6_.updated_by as updated_5_0_4_, customfiel6_.code as code6_0_4_, customfiel6_.default_value as default_7_0_4_, customfiel6_.description as descript8_0_4_, customfiel6_.field_type as field_ty9_0_4_, customfiel6_.idx as idx10_0_4_, customfiel6_.language as languag11_0_4_, customfiel6_.name as name12_0_4_, user7_.created_at as created_2_19_5_, user7_.created_by as created_3_19_5_, user7_.updated_at as updated_4_19_5_, user7_.updated_by as updated_5_19_5_, user7_.description as descript6_19_5_, user7_.email as email7_19_5_, user7_.login_id as login_id8_19_5_, user7_.login_password as login_pa9_19_5_, user7_.name_first as name_fi10_19_5_, user7_.name_last as name_la11_19_5_, user7_.nickname as nicknam12_19_5_, category9_.created_at as created_2_5_6_, category9_.created_by as created_3_5_6_, category9_.updated_at as updated_4_5_6_, category9_.updated_by as updated_5_5_6_, category9_.code as code6_5_6_, category9_.description as descript7_5_6_, category9_.language as language8_5_6_, category9_.lft as lft9_5_6_, category9_.name as name10_5_6_, category9_.parent_id as parent_12_5_6_, category9_.rgt as rgt11_5_6_, categories8_.post_id as post_id2_14_2__, categories8_.category_id as category1_14_2__, post10_.created_at as created_2_13_7_, post10_.created_by as created_3_13_7_, post10_.updated_at as updated_4_13_7_, post10_.updated_by as updated_5_13_7_, post10_.author_id as author_17_13_7_, post10_.body as body6_13_7_, post10_.code as code7_13_7_, post10_.cover_id as cover_i18_13_7_, post10_.date as date8_13_7_, post10_.drafted_id as drafted19_13_7_, post10_.drafted_code as drafted_9_13_7_, post10_.language as languag10_13_7_, post10_.seo_description as seo_des11_13_7_, post10_.seo_keywords as seo_key12_13_7_, post10_.seo_title as seo_tit13_13_7_, post10_.status as status14_13_7_, post10_.title as title15_13_7_, post10_.views as views16_13_7_, post10_1_.lft as lft1_10_7_, post10_1_.parent_id as parent_i4_10_7_, post10_1_.rgt as rgt2_10_7_, case when post10_1_.id is not null then ? when post10_2_.id is not null then ? when post10_.id is not null then ? end as clazz_7_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, tags11_.post_id as post_id2_17_3__, tags11_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media2_ on article0_1_.cover_id=media2_.id left outer join post_related_post relatedtop3_ on article0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on article0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join user user7_ on article0_1_.author_id=user7_.id left outer join post_category categories8_ on article0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post post10_ on article0_1_.drafted_id=post10_.id left outer join page post10_1_ on post10_.id=post10_1_.id left outer join article post10_2_ on post10_.id=post10_2_.id left outer join post_tag tags11_ on article0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where article0_1_.drafted_id=? and article0_.id=(select max(article1_.id) from article article1_ inner join post article1_1_ on article1_.id=article1_1_.id where article1_1_.drafted_id=?)
called| object com.sun.proxy..proxy184.save(object) 
called| article org.wallride.service.articleservice.savearticle(articleupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string, articleeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articledescribecontroller.query(string) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++ 4 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.06918992884510125
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.11072841584477863

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkunapprovecontroller.unapprove(commentbulkunapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkunapprovecomment(commentbulkunapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.delete(long,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.comment.commentbulkapprovecontroller.approve(commentbulkapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkapprovecomment(commentbulkapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]

Syntactic Similarity:0.9122772249385765
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9122772249385767
Path matching:False
Request matching:False



======================================= 63 given SQL query ===========================================
Given individual SQL query: select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
Pre-processed SQL query : select count(article.id) from article inner join post where article.language=? and (article.drafted_id is null) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| article org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticlebycode(string, string) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| article org.wallride.service.articleservice.getarticlebycode(string, string) 
called| article com.sun.proxy..proxy184.findonebycodeandlanguage(string, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_1_.code=? and article0_1_.language=?
called| page org.wallride.service.commentservice..enhancerbyspringcglib..836a8be4.getcomments(commentsearchrequest, pageable) 
called| object org.wallride.service.commentservice..fastclassbyspringcglib..1b0b5671.invoke(int, object, object[]) 
called| page org.wallride.service.commentservice.getcomments(commentsearchrequest, pageable) 
called| page com.sun.proxy..proxy189.search(commentsearchrequest, pageable) 
called| page org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest, pageable) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.bloglanguagelocaleresolver.resolvelocale(httpservletrequest) 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.getarticleids(articlesearchrequest) 
called| list org.wallride.service.articleservice.getarticleids(articlesearchrequest) 
called| list com.sun.proxy..proxy184.searchforid(articlesearchrequest) 
called| list org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest) 
called| fulltextquery org.wallride.repository.articlerepositoryimpl.buildfulltextquery(articlesearchrequest, pageable, criteria) 
called| long org.wallride.repository.articlerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.guest.article.articledescribecontroller.describe(int, int, int, string, bloglanguage, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.metadescription(post) 
called| string org.wallride.web.support.posts.metakeywords(post) 
called| string org.wallride.web.support.posts.title(post) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.web.support.posts.path(article) 
called| string org.wallride.support.postutils.path(article) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, article, boolean) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| pages org.wallride.autoconfigure.wallrideexpressionobjectfactory.createpages(iexpressioncontext) 
called| list org.wallride.web.support.pages.getnodes() 
called| list org.wallride.support.pageutils.getnodes() 
called| list org.wallride.support.pageutils.getnodes(boolean) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| users org.wallride.autoconfigure.wallrideexpressionobjectfactory.createusers(iexpressioncontext) 
called| string org.wallride.web.support.users.path(user) 
called| string org.wallride.web.support.users.path(uricomponentsbuilder, user, boolean) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.20247568523430592
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.18006189213085766

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.13742010401208968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1374201040120897
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.13742010401208968
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1374201040120897
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]

Syntactic Similarity:0.13319254907183437
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1331925490718344
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]

Syntactic Similarity:0.1283118136017504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1283118136017505
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]

Syntactic Similarity:0.1283118136017504
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1283118136017505
Path matching:False
Request matching:False



======================================= 64 given SQL query ===========================================
Given individual SQL query: select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then 1 when drafts0_2_.id is not null then 2 when drafts0_.id is not null then 0 end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
Pre-processed SQL query : select from post left outer join page left outer join article left outer join user user left outer join media left outer join page left outer join post where drafts.drafted_id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,string)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9804100372611215
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9804100372611215
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.guest.searchcontroller.search(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]

Syntactic Similarity:0.9804100372611215
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9804100372611215
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8849297717804931
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8849297717804931
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8849297717804931
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8849297717804931
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]

Syntactic Similarity:0.8849297717804931
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.8849297717804931
Path matching:False
Request matching:False



======================================= 65 given SQL query ===========================================
Given individual SQL query: delete from post_related_post where related_id=?
Pre-processed SQL query : delete from post_related_post where related_id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.6666666666666666
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.6666666666666666

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.48663565267670095
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48663565267670095
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False



======================================= 66 given SQL query ===========================================
Given individual SQL query: delete from post_category where post_id=?
Pre-processed SQL query : delete from post_category where post_id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.4461152882205513
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.28403631888239195

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.24446804877611183
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49446804877611183
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.48663565267670095
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48663565267670095
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False



======================================= 67 given SQL query ===========================================
Given individual SQL query: delete from article where id=?
Pre-processed SQL query : delete from article where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6237560904813293
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6237560904813293
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.4416490213683683
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5845061642255112
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.4416490213683683
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5845061642255112
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.49976851270005784
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49976851270005784
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.4092445239749436
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4092445239749436
Path matching:False
Request matching:False



======================================= 68 given SQL query ===========================================
Given individual SQL query: delete from post where id=?
Pre-processed SQL query : delete from post where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| boolean org.wallride.web.controller.admin.article.articlebulkdeleteform.isconfirmed() 
called| articlebulkdeleterequest org.wallride.web.controller.admin.article.articlebulkdeleteform.buildarticlebulkdeleterequest() 
called| list org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| int org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.getindex(signature) 
called| int org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48..fastclassbyspringcglib..6f59152c.getindex(signature) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| list org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest, bindingresult) 
called| article org.wallride.service.articleservice.deletearticle(articledeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| article com.sun.proxy..proxy184.findonebyidandlanguage(long, string) 
sql|select article0_.id as id1_13_0_, media1_.id as id1_8_1_, post3_.id as id1_13_2_, customfiel4_.id as id1_1_3_, customfiel5_.id as id1_0_4_, user6_.id as id1_19_5_, category8_.id as id1_5_6_, post9_.id as id1_13_7_, tag11_.id as id1_18_8_, article0_1_.created_at as created_2_13_0_, article0_1_.created_by as created_3_13_0_, article0_1_.updated_at as updated_4_13_0_, article0_1_.updated_by as updated_5_13_0_, article0_1_.author_id as author_17_13_0_, article0_1_.body as body6_13_0_, article0_1_.code as code7_13_0_, article0_1_.cover_id as cover_i18_13_0_, article0_1_.date as date8_13_0_, article0_1_.drafted_id as drafted19_13_0_, article0_1_.drafted_code as drafted_9_13_0_, article0_1_.language as languag10_13_0_, article0_1_.seo_description as seo_des11_13_0_, article0_1_.seo_keywords as seo_key12_13_0_, article0_1_.seo_title as seo_tit13_13_0_, article0_1_.status as status14_13_0_, article0_1_.title as title15_13_0_, article0_1_.views as views16_13_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, post3_.created_at as created_2_13_2_, post3_.created_by as created_3_13_2_, post3_.updated_at as updated_4_13_2_, post3_.updated_by as updated_5_13_2_, post3_.author_id as author_17_13_2_, post3_.body as body6_13_2_, post3_.code as code7_13_2_, post3_.cover_id as cover_i18_13_2_, post3_.date as date8_13_2_, post3_.drafted_id as drafted19_13_2_, post3_.drafted_code as drafted_9_13_2_, post3_.language as languag10_13_2_, post3_.seo_description as seo_des11_13_2_, post3_.seo_keywords as seo_key12_13_2_, post3_.seo_title as seo_tit13_13_2_, post3_.status as status14_13_2_, post3_.title as title15_13_2_, post3_.views as views16_13_2_, post3_1_.lft as lft1_10_2_, post3_1_.parent_id as parent_i4_10_2_, post3_1_.rgt as rgt2_10_2_, case when post3_1_.id is not null then ? when post3_2_.id is not null then ? when post3_.id is not null then ? end as clazz_2_, relatedtop2_.post_id as post_id1_16_0__, relatedtop2_.related_id as related_2_16_0__, customfiel4_.created_at as created_2_1_3_, customfiel4_.created_by as created_3_1_3_, customfiel4_.updated_at as updated_4_1_3_, customfiel4_.updated_by as updated_5_1_3_, customfiel4_.custom_field_id as custom_11_1_3_, customfiel4_.date_value as date_val6_1_3_, customfiel4_.datetime_value as datetime7_1_3_, customfiel4_.number_value as number_v8_1_3_, customfiel4_.post_id as post_id12_1_3_, customfiel4_.string_value as string_v9_1_3_, customfiel4_.text_value as text_va10_1_3_, customfiel4_.post_id as post_id12_1_1__, customfiel4_.id as id1_1_1__, customfiel5_.created_at as created_2_0_4_, customfiel5_.created_by as created_3_0_4_, customfiel5_.updated_at as updated_4_0_4_, customfiel5_.updated_by as updated_5_0_4_, customfiel5_.code as code6_0_4_, customfiel5_.default_value as default_7_0_4_, customfiel5_.description as descript8_0_4_, customfiel5_.field_type as field_ty9_0_4_, customfiel5_.idx as idx10_0_4_, customfiel5_.language as languag11_0_4_, customfiel5_.name as name12_0_4_, user6_.created_at as created_2_19_5_, user6_.created_by as created_3_19_5_, user6_.updated_at as updated_4_19_5_, user6_.updated_by as updated_5_19_5_, user6_.description as descript6_19_5_, user6_.email as email7_19_5_, user6_.login_id as login_id8_19_5_, user6_.login_password as login_pa9_19_5_, user6_.name_first as name_fi10_19_5_, user6_.name_last as name_la11_19_5_, user6_.nickname as nicknam12_19_5_, category8_.created_at as created_2_5_6_, category8_.created_by as created_3_5_6_, category8_.updated_at as updated_4_5_6_, category8_.updated_by as updated_5_5_6_, category8_.code as code6_5_6_, category8_.description as descript7_5_6_, category8_.language as language8_5_6_, category8_.lft as lft9_5_6_, category8_.name as name10_5_6_, category8_.parent_id as parent_12_5_6_, category8_.rgt as rgt11_5_6_, categories7_.post_id as post_id2_14_2__, categories7_.category_id as category1_14_2__, post9_.created_at as created_2_13_7_, post9_.created_by as created_3_13_7_, post9_.updated_at as updated_4_13_7_, post9_.updated_by as updated_5_13_7_, post9_.author_id as author_17_13_7_, post9_.body as body6_13_7_, post9_.code as code7_13_7_, post9_.cover_id as cover_i18_13_7_, post9_.date as date8_13_7_, post9_.drafted_id as drafted19_13_7_, post9_.drafted_code as drafted_9_13_7_, post9_.language as languag10_13_7_, post9_.seo_description as seo_des11_13_7_, post9_.seo_keywords as seo_key12_13_7_, post9_.seo_title as seo_tit13_13_7_, post9_.status as status14_13_7_, post9_.title as title15_13_7_, post9_.views as views16_13_7_, post9_1_.lft as lft1_10_7_, post9_1_.parent_id as parent_i4_10_7_, post9_1_.rgt as rgt2_10_7_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_7_, tag11_.created_at as created_2_18_8_, tag11_.created_by as created_3_18_8_, tag11_.updated_at as updated_4_18_8_, tag11_.updated_by as updated_5_18_8_, tag11_.language as language6_18_8_, tag11_.name as name7_18_8_, tags10_.post_id as post_id2_17_3__, tags10_.tag_id as tag_id1_17_3__ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join media media1_ on article0_1_.cover_id=media1_.id left outer join post_related_post relatedtop2_ on article0_.id=relatedtop2_.post_id left outer join post post3_ on relatedtop2_.related_id=post3_.id left outer join page post3_1_ on post3_.id=post3_1_.id left outer join article post3_2_ on post3_.id=post3_2_.id left outer join custom_field_value customfiel4_ on article0_.id=customfiel4_.post_id left outer join custom_field customfiel5_ on customfiel4_.custom_field_id=customfiel5_.id left outer join user user6_ on article0_1_.author_id=user6_.id left outer join post_category categories7_ on article0_.id=categories7_.post_id left outer join category category8_ on categories7_.category_id=category8_.id left outer join post post9_ on article0_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join post_tag tags10_ on article0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id where article0_.id=? and article0_1_.language=?
called| void com.sun.proxy..proxy184.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from article where id=?
sql|delete from post where id=?
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
after rest| string org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.article.articlesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countdraft(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbystatus(post.status, string) 
called| long org.wallride.service.articleservice.countarticlesbystatus(post.status, string) 
called| long com.sun.proxy..proxy184.countbystatus(post.status, string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.status=? and article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countall(string) 
called| long org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticles(string) 
called| long org.wallride.service.articleservice.countarticles(string) 
called| long com.sun.proxy..proxy184.count(string) 
sql|select count(article0_.id) as col_0_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id where article0_1_.language=? and (article0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.article.articlesearchcontroller.countscheduled(string) 
called| articlesearchform org.wallride.web.controller.admin.article.articlesearchcontroller.setuparticlesearchform() 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, True, True]
path_matching_number_k:[0, 0, 0, 1, 2]
path_precision_k:[0.0, 0.0, 0.0, 0.25, 0.4]
path_ap:0.325
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, True, True]
request_matching_number_k:[0, 0, 0, 1, 2]
request_precision_k:[0.0, 0.0, 0.0, 0.25, 0.4]
request_ap:0.325

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6301706385934932
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6301706385934932
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.4721423979453146
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5971423979453145
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.4721423979453146
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5971423979453145
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.4721423979453146
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5971423979453145
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.4101450481225395
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5530021909796823
Path matching:True
Request matching:True



======================================= 69 given SQL query ===========================================
Given individual SQL query: select coalesce(max(page0_.rgt), 0) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
Pre-processed SQL query : select coalesce(max(page.rgt), from page inner join post 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.034239130434782605
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.10184104936446525

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]

Syntactic Similarity:0.32951700146396384
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.329517001463964
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.3018163124973379
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3018163124973379
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.27882534008330706
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2788253400833072
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]

Syntactic Similarity:0.2577586830242529
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2577586830242529
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.2479944094217823
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2479944094217823
Path matching:False
Request matching:False



======================================= 70 given SQL query ===========================================
Given individual SQL query: insert into page (lft, rgt, id) values (?, ?, ?)
Pre-processed SQL query : insert into page (lft, rgt, id) values (?, ?, ?)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| pagecreaterequest org.wallride.web.controller.admin.page.pagecreateform.buildpagecreaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.createpage(pagecreaterequest, post.status, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.createpage(pagecreaterequest, post.status, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| int com.sun.proxy..proxy192.findmaxrgt() 
sql|select coalesce(max(page0_.rgt), ?) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id
sql|select category0_.id as id1_5_0_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.id as id1_5_1_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id where category0_.id=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
called| object com.sun.proxy..proxy192.save(object) 
sql|insert into post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql|insert into page (lft, rgt, id) values (?, ?, ?)
sql|insert into post_category (post_id, category_id) values (?, ?)
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
sql|select user0_.id as id1_19_0_, user0_.created_at as created_2_19_0_, user0_.created_by as created_3_19_0_, user0_.updated_at as updated_4_19_0_, user0_.updated_by as updated_5_19_0_, user0_.description as descript6_19_0_, user0_.email as email7_19_0_, user0_.login_id as login_id8_19_0_, user0_.login_password as login_pa9_19_0_, user0_.name_first as name_fi10_19_0_, user0_.name_last as name_la11_19_0_, user0_.nickname as nicknam12_19_0_ from user user0_ where user0_.id=?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string, pagecreateform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 
called| boolean org.wallride.web.support.authorizedusermethodargumentresolver.supportsparameter(methodparameter) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.05625
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, True, False]
request_matching_number_k:[0, 0, 1, 2, 2]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.5, 0.4]
request_ap:0.33398824347934836

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.8734805466643633
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0163376895215062
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.8734805466643633
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0163376895215062
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.8734805466643633
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0163376895215062
Path matching:False
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.8734805466643633
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0163376895215062
Path matching:False
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.8734805466643633
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0163376895215062
Path matching:False
Request matching:False



======================================= 71 given SQL query ===========================================
Given individual SQL query: select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then 1 when post4_2_.id is not null then 2 when post4_.id is not null then 0 end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=?
Pre-processed SQL query : select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user user8 left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long) 
called| page com.sun.proxy..proxy192.findonebyid(long) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=?
called| pagesearchrequest org.wallride.web.controller.admin.page.pagesearchform.topagesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.page.pagesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.gettagid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.page.pagesearchform.getstatus() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpageids(pagesearchrequest) 
called| list org.wallride.service.pageservice.getpageids(pagesearchrequest) 
called| list com.sun.proxy..proxy192.searchforid(pagesearchrequest) 
called| list org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest) 
called| fulltextquery org.wallride.repository.pagerepositoryimpl.buildfulltextquery(pagesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.pagerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(page) 
called| string org.wallride.support.postutils.path(page) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, page, boolean) 
called| map org.wallride.support.pageutils.getpaths(page) 
called| map org.wallride.support.pageutils.getpaths(page, boolean) 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpathpages(page, boolean) 
called| list org.wallride.service.pageservice.getpathpages(page, boolean) 
called| specification org.wallride.repository.pagespecifications.path(page, boolean) 
called| list com.sun.proxy..proxy192.findall(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$path$b2e51f7a$1(page, boolean, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media4_.id as id1_8_1_, page5_.id as id1_13_2_, children6_.id as id1_13_3_, user7_.id as id1_19_4_, category9_.id as id1_5_5_, tag11_.id as id1_18_6_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media4_.created_at as created_2_8_1_, media4_.created_by as created_3_8_1_, media4_.updated_at as updated_4_8_1_, media4_.updated_by as updated_5_8_1_, media4_.mime_type as mime_typ6_8_1_, media4_.original_name as original7_8_1_, page5_1_.created_at as created_2_13_2_, page5_1_.created_by as created_3_13_2_, page5_1_.updated_at as updated_4_13_2_, page5_1_.updated_by as updated_5_13_2_, page5_1_.author_id as author_17_13_2_, page5_1_.body as body6_13_2_, page5_1_.code as code7_13_2_, page5_1_.cover_id as cover_i18_13_2_, page5_1_.date as date8_13_2_, page5_1_.drafted_id as drafted19_13_2_, page5_1_.drafted_code as drafted_9_13_2_, page5_1_.language as languag10_13_2_, page5_1_.seo_description as seo_des11_13_2_, page5_1_.seo_keywords as seo_key12_13_2_, page5_1_.seo_title as seo_tit13_13_2_, page5_1_.status as status14_13_2_, page5_1_.title as title15_13_2_, page5_1_.views as views16_13_2_, page5_.lft as lft1_10_2_, page5_.parent_id as parent_i4_10_2_, page5_.rgt as rgt2_10_2_, children6_1_.created_at as created_2_13_3_, children6_1_.created_by as created_3_13_3_, children6_1_.updated_at as updated_4_13_3_, children6_1_.updated_by as updated_5_13_3_, children6_1_.author_id as author_17_13_3_, children6_1_.body as body6_13_3_, children6_1_.code as code7_13_3_, children6_1_.cover_id as cover_i18_13_3_, children6_1_.date as date8_13_3_, children6_1_.drafted_id as drafted19_13_3_, children6_1_.drafted_code as drafted_9_13_3_, children6_1_.language as languag10_13_3_, children6_1_.seo_description as seo_des11_13_3_, children6_1_.seo_keywords as seo_key12_13_3_, children6_1_.seo_title as seo_tit13_13_3_, children6_1_.status as status14_13_3_, children6_1_.title as title15_13_3_, children6_1_.views as views16_13_3_, children6_.lft as lft1_10_3_, children6_.parent_id as parent_i4_10_3_, children6_.rgt as rgt2_10_3_, children6_.parent_id as parent_i4_10_0__, children6_.id as id3_10_0__, user7_.created_at as created_2_19_4_, user7_.created_by as created_3_19_4_, user7_.updated_at as updated_4_19_4_, user7_.updated_by as updated_5_19_4_, user7_.description as descript6_19_4_, user7_.email as email7_19_4_, user7_.login_id as login_id8_19_4_, user7_.login_password as login_pa9_19_4_, user7_.name_first as name_fi10_19_4_, user7_.name_last as name_la11_19_4_, user7_.nickname as nicknam12_19_4_, category9_.created_at as created_2_5_5_, category9_.created_by as created_3_5_5_, category9_.updated_at as updated_4_5_5_, category9_.updated_by as updated_5_5_5_, category9_.code as code6_5_5_, category9_.description as descript7_5_5_, category9_.language as language8_5_5_, category9_.lft as lft9_5_5_, category9_.name as name10_5_5_, category9_.parent_id as parent_12_5_5_, category9_.rgt as rgt11_5_5_, categories8_.post_id as post_id2_14_1__, categories8_.category_id as category1_14_1__, tag11_.created_at as created_2_18_6_, tag11_.created_by as created_3_18_6_, tag11_.updated_at as updated_4_18_6_, tag11_.updated_by as updated_5_18_6_, tag11_.language as language6_18_6_, tag11_.name as name7_18_6_, tags10_.post_id as post_id2_17_2__, tags10_.tag_id as tag_id1_17_2__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media4_ on page0_1_.cover_id=media4_.id left outer join page page5_ on page0_.parent_id=page5_.id left outer join post page5_1_ on page5_.id=page5_1_.id left outer join page children6_ on page0_.id=children6_.parent_id left outer join post children6_1_ on children6_.id=children6_1_.id left outer join user user7_ on page0_1_.author_id=user7_.id left outer join post_category categories8_ on page0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post_tag tags10_ on page0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id cross join page page1_ inner join post page1_1_ on page1_.id=page1_1_.id cross join page page2_ inner join post page2_1_ on page2_.id=page2_1_.id where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt) order by page0_.rgt-page0_.lft desc
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| string org.wallride.support.postutils.lambda$path$0(page) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long) 
called| page com.sun.proxy..proxy192.findonebyid(long) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=?
called| pagesearchrequest org.wallride.web.controller.admin.page.pagesearchform.topagesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.page.pagesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.gettagid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.page.pagesearchform.getstatus() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpageids(pagesearchrequest) 
called| list org.wallride.service.pageservice.getpageids(pagesearchrequest) 
called| list com.sun.proxy..proxy192.searchforid(pagesearchrequest) 
called| list org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest) 
called| fulltextquery org.wallride.repository.pagerepositoryimpl.buildfulltextquery(pagesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.pagerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(page) 
called| string org.wallride.support.postutils.path(page) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, page, boolean) 
called| map org.wallride.support.pageutils.getpaths(page) 
called| map org.wallride.support.pageutils.getpaths(page, boolean) 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpathpages(page, boolean) 
called| list org.wallride.service.pageservice.getpathpages(page, boolean) 
called| specification org.wallride.repository.pagespecifications.path(page, boolean) 
called| list com.sun.proxy..proxy192.findall(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$path$b2e51f7a$1(page, boolean, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media4_.id as id1_8_1_, page5_.id as id1_13_2_, children6_.id as id1_13_3_, user7_.id as id1_19_4_, category9_.id as id1_5_5_, tag11_.id as id1_18_6_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media4_.created_at as created_2_8_1_, media4_.created_by as created_3_8_1_, media4_.updated_at as updated_4_8_1_, media4_.updated_by as updated_5_8_1_, media4_.mime_type as mime_typ6_8_1_, media4_.original_name as original7_8_1_, page5_1_.created_at as created_2_13_2_, page5_1_.created_by as created_3_13_2_, page5_1_.updated_at as updated_4_13_2_, page5_1_.updated_by as updated_5_13_2_, page5_1_.author_id as author_17_13_2_, page5_1_.body as body6_13_2_, page5_1_.code as code7_13_2_, page5_1_.cover_id as cover_i18_13_2_, page5_1_.date as date8_13_2_, page5_1_.drafted_id as drafted19_13_2_, page5_1_.drafted_code as drafted_9_13_2_, page5_1_.language as languag10_13_2_, page5_1_.seo_description as seo_des11_13_2_, page5_1_.seo_keywords as seo_key12_13_2_, page5_1_.seo_title as seo_tit13_13_2_, page5_1_.status as status14_13_2_, page5_1_.title as title15_13_2_, page5_1_.views as views16_13_2_, page5_.lft as lft1_10_2_, page5_.parent_id as parent_i4_10_2_, page5_.rgt as rgt2_10_2_, children6_1_.created_at as created_2_13_3_, children6_1_.created_by as created_3_13_3_, children6_1_.updated_at as updated_4_13_3_, children6_1_.updated_by as updated_5_13_3_, children6_1_.author_id as author_17_13_3_, children6_1_.body as body6_13_3_, children6_1_.code as code7_13_3_, children6_1_.cover_id as cover_i18_13_3_, children6_1_.date as date8_13_3_, children6_1_.drafted_id as drafted19_13_3_, children6_1_.drafted_code as drafted_9_13_3_, children6_1_.language as languag10_13_3_, children6_1_.seo_description as seo_des11_13_3_, children6_1_.seo_keywords as seo_key12_13_3_, children6_1_.seo_title as seo_tit13_13_3_, children6_1_.status as status14_13_3_, children6_1_.title as title15_13_3_, children6_1_.views as views16_13_3_, children6_.lft as lft1_10_3_, children6_.parent_id as parent_i4_10_3_, children6_.rgt as rgt2_10_3_, children6_.parent_id as parent_i4_10_0__, children6_.id as id3_10_0__, user7_.created_at as created_2_19_4_, user7_.created_by as created_3_19_4_, user7_.updated_at as updated_4_19_4_, user7_.updated_by as updated_5_19_4_, user7_.description as descript6_19_4_, user7_.email as email7_19_4_, user7_.login_id as login_id8_19_4_, user7_.login_password as login_pa9_19_4_, user7_.name_first as name_fi10_19_4_, user7_.name_last as name_la11_19_4_, user7_.nickname as nicknam12_19_4_, category9_.created_at as created_2_5_5_, category9_.created_by as created_3_5_5_, category9_.updated_at as updated_4_5_5_, category9_.updated_by as updated_5_5_5_, category9_.code as code6_5_5_, category9_.description as descript7_5_5_, category9_.language as language8_5_5_, category9_.lft as lft9_5_5_, category9_.name as name10_5_5_, category9_.parent_id as parent_12_5_5_, category9_.rgt as rgt11_5_5_, categories8_.post_id as post_id2_14_1__, categories8_.category_id as category1_14_1__, tag11_.created_at as created_2_18_6_, tag11_.created_by as created_3_18_6_, tag11_.updated_at as updated_4_18_6_, tag11_.updated_by as updated_5_18_6_, tag11_.language as language6_18_6_, tag11_.name as name7_18_6_, tags10_.post_id as post_id2_17_2__, tags10_.tag_id as tag_id1_17_2__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media4_ on page0_1_.cover_id=media4_.id left outer join page page5_ on page0_.parent_id=page5_.id left outer join post page5_1_ on page5_.id=page5_1_.id left outer join page children6_ on page0_.id=children6_.parent_id left outer join post children6_1_ on children6_.id=children6_1_.id left outer join user user7_ on page0_1_.author_id=user7_.id left outer join post_category categories8_ on page0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post_tag tags10_ on page0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id cross join page page1_ inner join post page1_1_ on page1_.id=page1_1_.id cross join page page2_ inner join post page2_1_ on page2_.id=page2_1_.id where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt) order by page0_.rgt-page0_.lft desc
called| string org.wallride.support.postutils.lambda$path$0(page) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.09453781512605042
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.12429971988795518

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]

Syntactic Similarity:0.9994038749793791
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9994038749793792
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9972437624298921
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9972437624298922
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9972437624298921
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9972437624298922
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpageeditdialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9967833538235888
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9967833538235888
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.index(string,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.9955391857472388
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9955391857472389
Path matching:False
Request matching:False



======================================= 72 given SQL query ===========================================
Given individual SQL query: select page0_.id as id1_13_0_, media4_.id as id1_8_1_, page5_.id as id1_13_2_, children6_.id as id1_13_3_, user7_.id as id1_19_4_, category9_.id as id1_5_5_, tag11_.id as id1_18_6_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media4_.created_at as created_2_8_1_, media4_.created_by as created_3_8_1_, media4_.updated_at as updated_4_8_1_, media4_.updated_by as updated_5_8_1_, media4_.mime_type as mime_typ6_8_1_, media4_.original_name as original7_8_1_, page5_1_.created_at as created_2_13_2_, page5_1_.created_by as created_3_13_2_, page5_1_.updated_at as updated_4_13_2_, page5_1_.updated_by as updated_5_13_2_, page5_1_.author_id as author_17_13_2_, page5_1_.body as body6_13_2_, page5_1_.code as code7_13_2_, page5_1_.cover_id as cover_i18_13_2_, page5_1_.date as date8_13_2_, page5_1_.drafted_id as drafted19_13_2_, page5_1_.drafted_code as drafted_9_13_2_, page5_1_.language as languag10_13_2_, page5_1_.seo_description as seo_des11_13_2_, page5_1_.seo_keywords as seo_key12_13_2_, page5_1_.seo_title as seo_tit13_13_2_, page5_1_.status as status14_13_2_, page5_1_.title as title15_13_2_, page5_1_.views as views16_13_2_, page5_.lft as lft1_10_2_, page5_.parent_id as parent_i4_10_2_, page5_.rgt as rgt2_10_2_, children6_1_.created_at as created_2_13_3_, children6_1_.created_by as created_3_13_3_, children6_1_.updated_at as updated_4_13_3_, children6_1_.updated_by as updated_5_13_3_, children6_1_.author_id as author_17_13_3_, children6_1_.body as body6_13_3_, children6_1_.code as code7_13_3_, children6_1_.cover_id as cover_i18_13_3_, children6_1_.date as date8_13_3_, children6_1_.drafted_id as drafted19_13_3_, children6_1_.drafted_code as drafted_9_13_3_, children6_1_.language as languag10_13_3_, children6_1_.seo_description as seo_des11_13_3_, children6_1_.seo_keywords as seo_key12_13_3_, children6_1_.seo_title as seo_tit13_13_3_, children6_1_.status as status14_13_3_, children6_1_.title as title15_13_3_, children6_1_.views as views16_13_3_, children6_.lft as lft1_10_3_, children6_.parent_id as parent_i4_10_3_, children6_.rgt as rgt2_10_3_, children6_.parent_id as parent_i4_10_0__, children6_.id as id3_10_0__, user7_.created_at as created_2_19_4_, user7_.created_by as created_3_19_4_, user7_.updated_at as updated_4_19_4_, user7_.updated_by as updated_5_19_4_, user7_.description as descript6_19_4_, user7_.email as email7_19_4_, user7_.login_id as login_id8_19_4_, user7_.login_password as login_pa9_19_4_, user7_.name_first as name_fi10_19_4_, user7_.name_last as name_la11_19_4_, user7_.nickname as nicknam12_19_4_, category9_.created_at as created_2_5_5_, category9_.created_by as created_3_5_5_, category9_.updated_at as updated_4_5_5_, category9_.updated_by as updated_5_5_5_, category9_.code as code6_5_5_, category9_.description as descript7_5_5_, category9_.language as language8_5_5_, category9_.lft as lft9_5_5_, category9_.name as name10_5_5_, category9_.parent_id as parent_12_5_5_, category9_.rgt as rgt11_5_5_, categories8_.post_id as post_id2_14_1__, categories8_.category_id as category1_14_1__, tag11_.created_at as created_2_18_6_, tag11_.created_by as created_3_18_6_, tag11_.updated_at as updated_4_18_6_, tag11_.updated_by as updated_5_18_6_, tag11_.language as language6_18_6_, tag11_.name as name7_18_6_, tags10_.post_id as post_id2_17_2__, tags10_.tag_id as tag_id1_17_2__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media4_ on page0_1_.cover_id=media4_.id left outer join page page5_ on page0_.parent_id=page5_.id left outer join post page5_1_ on page5_.id=page5_1_.id left outer join page children6_ on page0_.id=children6_.parent_id left outer join post children6_1_ on children6_.id=children6_1_.id left outer join user user7_ on page0_1_.author_id=user7_.id left outer join post_category categories8_ on page0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post_tag tags10_ on page0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id cross join page page1_ inner join post page1_1_ on page1_.id=page1_1_.id cross join page page2_ inner join post page2_1_ on page2_.id=page2_1_.id where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=1 and page3_.rgt>=2) and page2_.id=2 and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt) order by page0_.rgt-page0_.lft desc
Pre-processed SQL query : select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user user7 left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page.language=? and page.status=? and page.id=(select page.id from page page inner join post page on page.id=page.id where page.language=? and (page.parent_id is null) and page.lft<= and page.rgt>=) and page.id= and (page.lft between page.lft and page.rgt) and (page.lft between page.lft and page.rgt)  order by 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long) 
called| page com.sun.proxy..proxy192.findonebyid(long) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=?
called| pagesearchrequest org.wallride.web.controller.admin.page.pagesearchform.topagesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.page.pagesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.gettagid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.page.pagesearchform.getstatus() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpageids(pagesearchrequest) 
called| list org.wallride.service.pageservice.getpageids(pagesearchrequest) 
called| list com.sun.proxy..proxy192.searchforid(pagesearchrequest) 
called| list org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest) 
called| fulltextquery org.wallride.repository.pagerepositoryimpl.buildfulltextquery(pagesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.pagerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(page) 
called| string org.wallride.support.postutils.path(page) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, page, boolean) 
called| map org.wallride.support.pageutils.getpaths(page) 
called| map org.wallride.support.pageutils.getpaths(page, boolean) 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpathpages(page, boolean) 
called| list org.wallride.service.pageservice.getpathpages(page, boolean) 
called| specification org.wallride.repository.pagespecifications.path(page, boolean) 
called| list com.sun.proxy..proxy192.findall(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$path$b2e51f7a$1(page, boolean, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media4_.id as id1_8_1_, page5_.id as id1_13_2_, children6_.id as id1_13_3_, user7_.id as id1_19_4_, category9_.id as id1_5_5_, tag11_.id as id1_18_6_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media4_.created_at as created_2_8_1_, media4_.created_by as created_3_8_1_, media4_.updated_at as updated_4_8_1_, media4_.updated_by as updated_5_8_1_, media4_.mime_type as mime_typ6_8_1_, media4_.original_name as original7_8_1_, page5_1_.created_at as created_2_13_2_, page5_1_.created_by as created_3_13_2_, page5_1_.updated_at as updated_4_13_2_, page5_1_.updated_by as updated_5_13_2_, page5_1_.author_id as author_17_13_2_, page5_1_.body as body6_13_2_, page5_1_.code as code7_13_2_, page5_1_.cover_id as cover_i18_13_2_, page5_1_.date as date8_13_2_, page5_1_.drafted_id as drafted19_13_2_, page5_1_.drafted_code as drafted_9_13_2_, page5_1_.language as languag10_13_2_, page5_1_.seo_description as seo_des11_13_2_, page5_1_.seo_keywords as seo_key12_13_2_, page5_1_.seo_title as seo_tit13_13_2_, page5_1_.status as status14_13_2_, page5_1_.title as title15_13_2_, page5_1_.views as views16_13_2_, page5_.lft as lft1_10_2_, page5_.parent_id as parent_i4_10_2_, page5_.rgt as rgt2_10_2_, children6_1_.created_at as created_2_13_3_, children6_1_.created_by as created_3_13_3_, children6_1_.updated_at as updated_4_13_3_, children6_1_.updated_by as updated_5_13_3_, children6_1_.author_id as author_17_13_3_, children6_1_.body as body6_13_3_, children6_1_.code as code7_13_3_, children6_1_.cover_id as cover_i18_13_3_, children6_1_.date as date8_13_3_, children6_1_.drafted_id as drafted19_13_3_, children6_1_.drafted_code as drafted_9_13_3_, children6_1_.language as languag10_13_3_, children6_1_.seo_description as seo_des11_13_3_, children6_1_.seo_keywords as seo_key12_13_3_, children6_1_.seo_title as seo_tit13_13_3_, children6_1_.status as status14_13_3_, children6_1_.title as title15_13_3_, children6_1_.views as views16_13_3_, children6_.lft as lft1_10_3_, children6_.parent_id as parent_i4_10_3_, children6_.rgt as rgt2_10_3_, children6_.parent_id as parent_i4_10_0__, children6_.id as id3_10_0__, user7_.created_at as created_2_19_4_, user7_.created_by as created_3_19_4_, user7_.updated_at as updated_4_19_4_, user7_.updated_by as updated_5_19_4_, user7_.description as descript6_19_4_, user7_.email as email7_19_4_, user7_.login_id as login_id8_19_4_, user7_.login_password as login_pa9_19_4_, user7_.name_first as name_fi10_19_4_, user7_.name_last as name_la11_19_4_, user7_.nickname as nicknam12_19_4_, category9_.created_at as created_2_5_5_, category9_.created_by as created_3_5_5_, category9_.updated_at as updated_4_5_5_, category9_.updated_by as updated_5_5_5_, category9_.code as code6_5_5_, category9_.description as descript7_5_5_, category9_.language as language8_5_5_, category9_.lft as lft9_5_5_, category9_.name as name10_5_5_, category9_.parent_id as parent_12_5_5_, category9_.rgt as rgt11_5_5_, categories8_.post_id as post_id2_14_1__, categories8_.category_id as category1_14_1__, tag11_.created_at as created_2_18_6_, tag11_.created_by as created_3_18_6_, tag11_.updated_at as updated_4_18_6_, tag11_.updated_by as updated_5_18_6_, tag11_.language as language6_18_6_, tag11_.name as name7_18_6_, tags10_.post_id as post_id2_17_2__, tags10_.tag_id as tag_id1_17_2__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media4_ on page0_1_.cover_id=media4_.id left outer join page page5_ on page0_.parent_id=page5_.id left outer join post page5_1_ on page5_.id=page5_1_.id left outer join page children6_ on page0_.id=children6_.parent_id left outer join post children6_1_ on children6_.id=children6_1_.id left outer join user user7_ on page0_1_.author_id=user7_.id left outer join post_category categories8_ on page0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post_tag tags10_ on page0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id cross join page page1_ inner join post page1_1_ on page1_.id=page1_1_.id cross join page page2_ inner join post page2_1_ on page2_.id=page2_1_.id where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt) order by page0_.rgt-page0_.lft desc
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| string org.wallride.support.postutils.lambda$path$0(page) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long) 
called| page com.sun.proxy..proxy192.findonebyid(long) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=?
called| pagesearchrequest org.wallride.web.controller.admin.page.pagesearchform.topagesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.page.pagesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.gettagid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.page.pagesearchform.getstatus() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpageids(pagesearchrequest) 
called| list org.wallride.service.pageservice.getpageids(pagesearchrequest) 
called| list com.sun.proxy..proxy192.searchforid(pagesearchrequest) 
called| list org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest) 
called| fulltextquery org.wallride.repository.pagerepositoryimpl.buildfulltextquery(pagesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| long org.wallride.repository.pagerepositoryimpl.lambda$searchforid$0(object[]) 
after rest| string org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string, long, string, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| object org.wallride.autoconfigure.wallrideexpressionobjectfactory.buildobject(iexpressioncontext, string) 
called| posts org.wallride.autoconfigure.wallrideexpressionobjectfactory.createposts(iexpressioncontext) 
called| boolean org.wallride.autoconfigure.wallrideexpressionobjectfactory.iscacheable(string) 
called| string org.wallride.web.support.posts.path(page) 
called| string org.wallride.support.postutils.path(page) 
called| string org.wallride.support.postutils.path(uricomponentsbuilder, page, boolean) 
called| map org.wallride.support.pageutils.getpaths(page) 
called| map org.wallride.support.pageutils.getpaths(page, boolean) 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpathpages(page, boolean) 
called| list org.wallride.service.pageservice.getpathpages(page, boolean) 
called| specification org.wallride.repository.pagespecifications.path(page, boolean) 
called| list com.sun.proxy..proxy192.findall(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$path$b2e51f7a$1(page, boolean, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media4_.id as id1_8_1_, page5_.id as id1_13_2_, children6_.id as id1_13_3_, user7_.id as id1_19_4_, category9_.id as id1_5_5_, tag11_.id as id1_18_6_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media4_.created_at as created_2_8_1_, media4_.created_by as created_3_8_1_, media4_.updated_at as updated_4_8_1_, media4_.updated_by as updated_5_8_1_, media4_.mime_type as mime_typ6_8_1_, media4_.original_name as original7_8_1_, page5_1_.created_at as created_2_13_2_, page5_1_.created_by as created_3_13_2_, page5_1_.updated_at as updated_4_13_2_, page5_1_.updated_by as updated_5_13_2_, page5_1_.author_id as author_17_13_2_, page5_1_.body as body6_13_2_, page5_1_.code as code7_13_2_, page5_1_.cover_id as cover_i18_13_2_, page5_1_.date as date8_13_2_, page5_1_.drafted_id as drafted19_13_2_, page5_1_.drafted_code as drafted_9_13_2_, page5_1_.language as languag10_13_2_, page5_1_.seo_description as seo_des11_13_2_, page5_1_.seo_keywords as seo_key12_13_2_, page5_1_.seo_title as seo_tit13_13_2_, page5_1_.status as status14_13_2_, page5_1_.title as title15_13_2_, page5_1_.views as views16_13_2_, page5_.lft as lft1_10_2_, page5_.parent_id as parent_i4_10_2_, page5_.rgt as rgt2_10_2_, children6_1_.created_at as created_2_13_3_, children6_1_.created_by as created_3_13_3_, children6_1_.updated_at as updated_4_13_3_, children6_1_.updated_by as updated_5_13_3_, children6_1_.author_id as author_17_13_3_, children6_1_.body as body6_13_3_, children6_1_.code as code7_13_3_, children6_1_.cover_id as cover_i18_13_3_, children6_1_.date as date8_13_3_, children6_1_.drafted_id as drafted19_13_3_, children6_1_.drafted_code as drafted_9_13_3_, children6_1_.language as languag10_13_3_, children6_1_.seo_description as seo_des11_13_3_, children6_1_.seo_keywords as seo_key12_13_3_, children6_1_.seo_title as seo_tit13_13_3_, children6_1_.status as status14_13_3_, children6_1_.title as title15_13_3_, children6_1_.views as views16_13_3_, children6_.lft as lft1_10_3_, children6_.parent_id as parent_i4_10_3_, children6_.rgt as rgt2_10_3_, children6_.parent_id as parent_i4_10_0__, children6_.id as id3_10_0__, user7_.created_at as created_2_19_4_, user7_.created_by as created_3_19_4_, user7_.updated_at as updated_4_19_4_, user7_.updated_by as updated_5_19_4_, user7_.description as descript6_19_4_, user7_.email as email7_19_4_, user7_.login_id as login_id8_19_4_, user7_.login_password as login_pa9_19_4_, user7_.name_first as name_fi10_19_4_, user7_.name_last as name_la11_19_4_, user7_.nickname as nicknam12_19_4_, category9_.created_at as created_2_5_5_, category9_.created_by as created_3_5_5_, category9_.updated_at as updated_4_5_5_, category9_.updated_by as updated_5_5_5_, category9_.code as code6_5_5_, category9_.description as descript7_5_5_, category9_.language as language8_5_5_, category9_.lft as lft9_5_5_, category9_.name as name10_5_5_, category9_.parent_id as parent_12_5_5_, category9_.rgt as rgt11_5_5_, categories8_.post_id as post_id2_14_1__, categories8_.category_id as category1_14_1__, tag11_.created_at as created_2_18_6_, tag11_.created_by as created_3_18_6_, tag11_.updated_at as updated_4_18_6_, tag11_.updated_by as updated_5_18_6_, tag11_.language as language6_18_6_, tag11_.name as name7_18_6_, tags10_.post_id as post_id2_17_2__, tags10_.tag_id as tag_id1_17_2__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media4_ on page0_1_.cover_id=media4_.id left outer join page page5_ on page0_.parent_id=page5_.id left outer join post page5_1_ on page5_.id=page5_1_.id left outer join page children6_ on page0_.id=children6_.parent_id left outer join post children6_1_ on children6_.id=children6_1_.id left outer join user user7_ on page0_1_.author_id=user7_.id left outer join post_category categories8_ on page0_.id=categories8_.post_id left outer join category category9_ on categories8_.category_id=category9_.id left outer join post_tag tags10_ on page0_.id=tags10_.post_id left outer join tag tag11_ on tags10_.tag_id=tag11_.id cross join page page1_ inner join post page1_1_ on page1_.id=page1_1_.id cross join page page2_ inner join post page2_1_ on page2_.id=page2_1_.id where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt) order by page0_.rgt-page0_.lft desc
called| string org.wallride.support.postutils.lambda$path$0(page) 
called| string org.wallride.web.support.posts.body(post) 
called| string org.wallride.web.support.posts.parse(string) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5909090909090909
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5194805194805194

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]

Syntactic Similarity:0.9627649457216025
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9627649457216025
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.7602150734686581
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7602150734686581
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.7525490389496987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7525490389496987
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.7525490389496987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7525490389496987
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.7525490389496987
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.7525490389496987
Path matching:False
Request matching:False



======================================= 73 given SQL query ===========================================
Given individual SQL query: select this_.id as id1_13_11_, this_1_.created_at as created_2_13_11_, this_1_.created_by as created_3_13_11_, this_1_.updated_at as updated_4_13_11_, this_1_.updated_by as updated_5_13_11_, this_1_.author_id as author_17_13_11_, this_1_.body as body6_13_11_, this_1_.code as code7_13_11_, this_1_.cover_id as cover_i18_13_11_, this_1_.date as date8_13_11_, this_1_.drafted_id as drafted19_13_11_, this_1_.drafted_code as drafted_9_13_11_, this_1_.language as languag10_13_11_, this_1_.seo_description as seo_des11_13_11_, this_1_.seo_keywords as seo_key12_13_11_, this_1_.seo_title as seo_tit13_13_11_, this_1_.status as status14_13_11_, this_1_.title as title15_13_11_, this_1_.views as views16_13_11_, this_.lft as lft1_10_11_, this_.parent_id as parent_i4_10_11_, this_.rgt as rgt2_10_11_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, categories3_.post_id as post_id2_14_13_, category4_.id as category1_14_13_, category4_.id as id1_5_1_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, category5_.id as id1_5_2_, category5_.created_at as created_2_5_2_, category5_.created_by as created_3_5_2_, category5_.updated_at as updated_4_5_2_, category5_.updated_by as updated_5_5_2_, category5_.code as code6_5_2_, category5_.description as descript7_5_2_, category5_.language as language8_5_2_, category5_.lft as lft9_5_2_, category5_.name as name10_5_2_, category5_.parent_id as parent_12_5_2_, category5_.rgt as rgt11_5_2_, media6_.id as id1_8_3_, media6_.created_at as created_2_8_3_, media6_.created_by as created_3_8_3_, media6_.updated_at as updated_4_8_3_, media6_.updated_by as updated_5_8_3_, media6_.mime_type as mime_typ6_8_3_, media6_.original_name as original7_8_3_, customfiel7_.post_id as post_id12_1_14_, customfiel7_.id as id1_1_14_, customfiel7_.id as id1_1_4_, customfiel7_.created_at as created_2_1_4_, customfiel7_.created_by as created_3_1_4_, customfiel7_.updated_at as updated_4_1_4_, customfiel7_.updated_by as updated_5_1_4_, customfiel7_.custom_field_id as custom_11_1_4_, customfiel7_.date_value as date_val6_1_4_, customfiel7_.datetime_value as datetime7_1_4_, customfiel7_.number_value as number_v8_1_4_, customfiel7_.post_id as post_id12_1_4_, customfiel7_.string_value as string_v9_1_4_, customfiel7_.text_value as text_va10_1_4_, customfiel8_.id as id1_0_5_, customfiel8_.created_at as created_2_0_5_, customfiel8_.created_by as created_3_0_5_, customfiel8_.updated_at as updated_4_0_5_, customfiel8_.updated_by as updated_5_0_5_, customfiel8_.code as code6_0_5_, customfiel8_.default_value as default_7_0_5_, customfiel8_.description as descript8_0_5_, customfiel8_.field_type as field_ty9_0_5_, customfiel8_.idx as idx10_0_5_, customfiel8_.language as languag11_0_5_, customfiel8_.name as name12_0_5_, post9_.id as id1_13_6_, post9_.created_at as created_2_13_6_, post9_.created_by as created_3_13_6_, post9_.updated_at as updated_4_13_6_, post9_.updated_by as updated_5_13_6_, post9_.author_id as author_17_13_6_, post9_.body as body6_13_6_, post9_.code as code7_13_6_, post9_.cover_id as cover_i18_13_6_, post9_.date as date8_13_6_, post9_.drafted_id as drafted19_13_6_, post9_.drafted_code as drafted_9_13_6_, post9_.language as languag10_13_6_, post9_.seo_description as seo_des11_13_6_, post9_.seo_keywords as seo_key12_13_6_, post9_.seo_title as seo_tit13_13_6_, post9_.status as status14_13_6_, post9_.title as title15_13_6_, post9_.views as views16_13_6_, post9_1_.lft as lft1_10_6_, post9_1_.parent_id as parent_i4_10_6_, post9_1_.rgt as rgt2_10_6_, case when post9_1_.id is not null then 1 when post9_2_.id is not null then 2 when post9_.id is not null then 0 end as clazz_6_, page10_.id as id1_13_7_, page10_1_.created_at as created_2_13_7_, page10_1_.created_by as created_3_13_7_, page10_1_.updated_at as updated_4_13_7_, page10_1_.updated_by as updated_5_13_7_, page10_1_.author_id as author_17_13_7_, page10_1_.body as body6_13_7_, page10_1_.code as code7_13_7_, page10_1_.cover_id as cover_i18_13_7_, page10_1_.date as date8_13_7_, page10_1_.drafted_id as drafted19_13_7_, page10_1_.drafted_code as drafted_9_13_7_, page10_1_.language as languag10_13_7_, page10_1_.seo_description as seo_des11_13_7_, page10_1_.seo_keywords as seo_key12_13_7_, page10_1_.seo_title as seo_tit13_13_7_, page10_1_.status as status14_13_7_, page10_1_.title as title15_13_7_, page10_1_.views as views16_13_7_, page10_.lft as lft1_10_7_, page10_.parent_id as parent_i4_10_7_, page10_.rgt as rgt2_10_7_, tags11_.post_id as post_id2_17_15_, tag12_.id as tag_id1_17_15_, tag12_.id as id1_18_8_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, children13_.parent_id as parent_i4_10_16_, children13_.id as id3_10_16_, children13_.id as id1_13_9_, children13_1_.created_at as created_2_13_9_, children13_1_.created_by as created_3_13_9_, children13_1_.updated_at as updated_4_13_9_, children13_1_.updated_by as updated_5_13_9_, children13_1_.author_id as author_17_13_9_, children13_1_.body as body6_13_9_, children13_1_.code as code7_13_9_, children13_1_.cover_id as cover_i18_13_9_, children13_1_.date as date8_13_9_, children13_1_.drafted_id as drafted19_13_9_, children13_1_.drafted_code as drafted_9_13_9_, children13_1_.language as languag10_13_9_, children13_1_.seo_description as seo_des11_13_9_, children13_1_.seo_keywords as seo_key12_13_9_, children13_1_.seo_title as seo_tit13_13_9_, children13_1_.status as status14_13_9_, children13_1_.title as title15_13_9_, children13_1_.views as views16_13_9_, children13_.lft as lft1_10_9_, children13_.parent_id as parent_i4_10_9_, children13_.rgt as rgt2_10_9_, page14_.id as id1_13_10_, page14_1_.created_at as created_2_13_10_, page14_1_.created_by as created_3_13_10_, page14_1_.updated_at as updated_4_13_10_, page14_1_.updated_by as updated_5_13_10_, page14_1_.author_id as author_17_13_10_, page14_1_.body as body6_13_10_, page14_1_.code as code7_13_10_, page14_1_.cover_id as cover_i18_13_10_, page14_1_.date as date8_13_10_, page14_1_.drafted_id as drafted19_13_10_, page14_1_.drafted_code as drafted_9_13_10_, page14_1_.language as languag10_13_10_, page14_1_.seo_description as seo_des11_13_10_, page14_1_.seo_keywords as seo_key12_13_10_, page14_1_.seo_title as seo_tit13_13_10_, page14_1_.status as status14_13_10_, page14_1_.title as title15_13_10_, page14_1_.views as views16_13_10_, page14_.lft as lft1_10_10_, page14_.parent_id as parent_i4_10_10_, page14_.rgt as rgt2_10_10_ from page this_ inner join post this_1_ on this_.id=this_1_.id left outer join user user2_ on this_1_.author_id=user2_.id left outer join post_category categories3_ on this_.id=categories3_.post_id left outer join category category4_ on categories3_.category_id=category4_.id left outer join category category5_ on category4_.parent_id=category5_.id left outer join media media6_ on this_1_.cover_id=media6_.id left outer join custom_field_value customfiel7_ on this_.id=customfiel7_.post_id left outer join custom_field customfiel8_ on customfiel7_.custom_field_id=customfiel8_.id left outer join post post9_ on this_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join page page10_ on post9_1_.parent_id=page10_.id left outer join post page10_1_ on page10_.id=page10_1_.id left outer join post_tag tags11_ on this_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id left outer join page children13_ on this_.id=children13_.parent_id left outer join post children13_1_ on children13_.id=children13_1_.id left outer join page page14_ on this_.parent_id=page14_.id left outer join post page14_1_ on page14_.id=page14_1_.id where (this_.id in (?))
Pre-processed SQL query : select from page inner join post left outer join user user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (this_.id in (?)) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagesearchcontroller.search(string, pagesearchform, bindingresult, pageable, model, httpservletrequest) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.search(string, pagesearchform, bindingresult, pageable, model, httpservletrequest) 
called| pagesearchrequest org.wallride.web.controller.admin.page.pagesearchform.topagesearchrequest() 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.web.controller.admin.page.pagesearchform.getkeyword() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getcategoryid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.gettagid() 
called| long org.wallride.web.controller.admin.page.pagesearchform.getauthorid() 
called| post.status org.wallride.web.controller.admin.page.pagesearchform.getstatus() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpages(pagesearchrequest, pageable) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpages(pagesearchrequest, pageable) 
called| page com.sun.proxy..proxy192.search(pagesearchrequest, pageable) 
called| page org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest, pageable) 
called| fulltextquery org.wallride.repository.pagerepositoryimpl.buildfulltextquery(pagesearchrequest, pageable, criteria) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
sql|select this_.id as id1_13_11_, this_1_.created_at as created_2_13_11_, this_1_.created_by as created_3_13_11_, this_1_.updated_at as updated_4_13_11_, this_1_.updated_by as updated_5_13_11_, this_1_.author_id as author_17_13_11_, this_1_.body as body6_13_11_, this_1_.code as code7_13_11_, this_1_.cover_id as cover_i18_13_11_, this_1_.date as date8_13_11_, this_1_.drafted_id as drafted19_13_11_, this_1_.drafted_code as drafted_9_13_11_, this_1_.language as languag10_13_11_, this_1_.seo_description as seo_des11_13_11_, this_1_.seo_keywords as seo_key12_13_11_, this_1_.seo_title as seo_tit13_13_11_, this_1_.status as status14_13_11_, this_1_.title as title15_13_11_, this_1_.views as views16_13_11_, this_.lft as lft1_10_11_, this_.parent_id as parent_i4_10_11_, this_.rgt as rgt2_10_11_, user2_.id as id1_19_0_, user2_.created_at as created_2_19_0_, user2_.created_by as created_3_19_0_, user2_.updated_at as updated_4_19_0_, user2_.updated_by as updated_5_19_0_, user2_.description as descript6_19_0_, user2_.email as email7_19_0_, user2_.login_id as login_id8_19_0_, user2_.login_password as login_pa9_19_0_, user2_.name_first as name_fi10_19_0_, user2_.name_last as name_la11_19_0_, user2_.nickname as nicknam12_19_0_, categories3_.post_id as post_id2_14_13_, category4_.id as category1_14_13_, category4_.id as id1_5_1_, category4_.created_at as created_2_5_1_, category4_.created_by as created_3_5_1_, category4_.updated_at as updated_4_5_1_, category4_.updated_by as updated_5_5_1_, category4_.code as code6_5_1_, category4_.description as descript7_5_1_, category4_.language as language8_5_1_, category4_.lft as lft9_5_1_, category4_.name as name10_5_1_, category4_.parent_id as parent_12_5_1_, category4_.rgt as rgt11_5_1_, category5_.id as id1_5_2_, category5_.created_at as created_2_5_2_, category5_.created_by as created_3_5_2_, category5_.updated_at as updated_4_5_2_, category5_.updated_by as updated_5_5_2_, category5_.code as code6_5_2_, category5_.description as descript7_5_2_, category5_.language as language8_5_2_, category5_.lft as lft9_5_2_, category5_.name as name10_5_2_, category5_.parent_id as parent_12_5_2_, category5_.rgt as rgt11_5_2_, media6_.id as id1_8_3_, media6_.created_at as created_2_8_3_, media6_.created_by as created_3_8_3_, media6_.updated_at as updated_4_8_3_, media6_.updated_by as updated_5_8_3_, media6_.mime_type as mime_typ6_8_3_, media6_.original_name as original7_8_3_, customfiel7_.post_id as post_id12_1_14_, customfiel7_.id as id1_1_14_, customfiel7_.id as id1_1_4_, customfiel7_.created_at as created_2_1_4_, customfiel7_.created_by as created_3_1_4_, customfiel7_.updated_at as updated_4_1_4_, customfiel7_.updated_by as updated_5_1_4_, customfiel7_.custom_field_id as custom_11_1_4_, customfiel7_.date_value as date_val6_1_4_, customfiel7_.datetime_value as datetime7_1_4_, customfiel7_.number_value as number_v8_1_4_, customfiel7_.post_id as post_id12_1_4_, customfiel7_.string_value as string_v9_1_4_, customfiel7_.text_value as text_va10_1_4_, customfiel8_.id as id1_0_5_, customfiel8_.created_at as created_2_0_5_, customfiel8_.created_by as created_3_0_5_, customfiel8_.updated_at as updated_4_0_5_, customfiel8_.updated_by as updated_5_0_5_, customfiel8_.code as code6_0_5_, customfiel8_.default_value as default_7_0_5_, customfiel8_.description as descript8_0_5_, customfiel8_.field_type as field_ty9_0_5_, customfiel8_.idx as idx10_0_5_, customfiel8_.language as languag11_0_5_, customfiel8_.name as name12_0_5_, post9_.id as id1_13_6_, post9_.created_at as created_2_13_6_, post9_.created_by as created_3_13_6_, post9_.updated_at as updated_4_13_6_, post9_.updated_by as updated_5_13_6_, post9_.author_id as author_17_13_6_, post9_.body as body6_13_6_, post9_.code as code7_13_6_, post9_.cover_id as cover_i18_13_6_, post9_.date as date8_13_6_, post9_.drafted_id as drafted19_13_6_, post9_.drafted_code as drafted_9_13_6_, post9_.language as languag10_13_6_, post9_.seo_description as seo_des11_13_6_, post9_.seo_keywords as seo_key12_13_6_, post9_.seo_title as seo_tit13_13_6_, post9_.status as status14_13_6_, post9_.title as title15_13_6_, post9_.views as views16_13_6_, post9_1_.lft as lft1_10_6_, post9_1_.parent_id as parent_i4_10_6_, post9_1_.rgt as rgt2_10_6_, case when post9_1_.id is not null then ? when post9_2_.id is not null then ? when post9_.id is not null then ? end as clazz_6_, page10_.id as id1_13_7_, page10_1_.created_at as created_2_13_7_, page10_1_.created_by as created_3_13_7_, page10_1_.updated_at as updated_4_13_7_, page10_1_.updated_by as updated_5_13_7_, page10_1_.author_id as author_17_13_7_, page10_1_.body as body6_13_7_, page10_1_.code as code7_13_7_, page10_1_.cover_id as cover_i18_13_7_, page10_1_.date as date8_13_7_, page10_1_.drafted_id as drafted19_13_7_, page10_1_.drafted_code as drafted_9_13_7_, page10_1_.language as languag10_13_7_, page10_1_.seo_description as seo_des11_13_7_, page10_1_.seo_keywords as seo_key12_13_7_, page10_1_.seo_title as seo_tit13_13_7_, page10_1_.status as status14_13_7_, page10_1_.title as title15_13_7_, page10_1_.views as views16_13_7_, page10_.lft as lft1_10_7_, page10_.parent_id as parent_i4_10_7_, page10_.rgt as rgt2_10_7_, tags11_.post_id as post_id2_17_15_, tag12_.id as tag_id1_17_15_, tag12_.id as id1_18_8_, tag12_.created_at as created_2_18_8_, tag12_.created_by as created_3_18_8_, tag12_.updated_at as updated_4_18_8_, tag12_.updated_by as updated_5_18_8_, tag12_.language as language6_18_8_, tag12_.name as name7_18_8_, children13_.parent_id as parent_i4_10_16_, children13_.id as id3_10_16_, children13_.id as id1_13_9_, children13_1_.created_at as created_2_13_9_, children13_1_.created_by as created_3_13_9_, children13_1_.updated_at as updated_4_13_9_, children13_1_.updated_by as updated_5_13_9_, children13_1_.author_id as author_17_13_9_, children13_1_.body as body6_13_9_, children13_1_.code as code7_13_9_, children13_1_.cover_id as cover_i18_13_9_, children13_1_.date as date8_13_9_, children13_1_.drafted_id as drafted19_13_9_, children13_1_.drafted_code as drafted_9_13_9_, children13_1_.language as languag10_13_9_, children13_1_.seo_description as seo_des11_13_9_, children13_1_.seo_keywords as seo_key12_13_9_, children13_1_.seo_title as seo_tit13_13_9_, children13_1_.status as status14_13_9_, children13_1_.title as title15_13_9_, children13_1_.views as views16_13_9_, children13_.lft as lft1_10_9_, children13_.parent_id as parent_i4_10_9_, children13_.rgt as rgt2_10_9_, page14_.id as id1_13_10_, page14_1_.created_at as created_2_13_10_, page14_1_.created_by as created_3_13_10_, page14_1_.updated_at as updated_4_13_10_, page14_1_.updated_by as updated_5_13_10_, page14_1_.author_id as author_17_13_10_, page14_1_.body as body6_13_10_, page14_1_.code as code7_13_10_, page14_1_.cover_id as cover_i18_13_10_, page14_1_.date as date8_13_10_, page14_1_.drafted_id as drafted19_13_10_, page14_1_.drafted_code as drafted_9_13_10_, page14_1_.language as languag10_13_10_, page14_1_.seo_description as seo_des11_13_10_, page14_1_.seo_keywords as seo_key12_13_10_, page14_1_.seo_title as seo_tit13_13_10_, page14_1_.status as status14_13_10_, page14_1_.title as title15_13_10_, page14_1_.views as views16_13_10_, page14_.lft as lft1_10_10_, page14_.parent_id as parent_i4_10_10_, page14_.rgt as rgt2_10_10_ from page this_ inner join post this_1_ on this_.id=this_1_.id left outer join user user2_ on this_1_.author_id=user2_.id left outer join post_category categories3_ on this_.id=categories3_.post_id left outer join category category4_ on categories3_.category_id=category4_.id left outer join category category5_ on category4_.parent_id=category5_.id left outer join media media6_ on this_1_.cover_id=media6_.id left outer join custom_field_value customfiel7_ on this_.id=customfiel7_.post_id left outer join custom_field customfiel8_ on customfiel7_.custom_field_id=customfiel8_.id left outer join post post9_ on this_1_.drafted_id=post9_.id left outer join page post9_1_ on post9_.id=post9_1_.id left outer join article post9_2_ on post9_.id=post9_2_.id left outer join page page10_ on post9_1_.parent_id=page10_.id left outer join post page10_1_ on page10_.id=page10_1_.id left outer join post_tag tags11_ on this_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id left outer join page children13_ on this_.id=children13_.parent_id left outer join post children13_1_ on children13_.id=children13_1_.id left outer join page page14_ on this_.parent_id=page14_.id left outer join post page14_1_ on page14_.id=page14_1_.id where (this_.id in (?))
called| multivaluemap org.wallride.web.support.controllerutils.convertbeanforqueryparams(object, conversionservice) 
after rest| string org.wallride.web.controller.admin.page.pagesearchcontroller.search(string, pagesearchform, bindingresult, pageable, model, httpservletrequest) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| long org.wallride.web.support.pagination.getnumberoffirstelement() 
called| long org.wallride.web.support.pagination.getnumberoflastelement() 
called| long org.wallride.web.support.pagination.gettotalelements() 
called| boolean org.wallride.web.support.pagination.haspreviouspage() 
called| string org.wallride.web.support.pagination.geturl() 
called| int org.wallride.web.support.pagination.getpreviouspagenumber() 
called| int org.wallride.web.support.pagination.getcurrentpagenumber() 
called| list org.wallride.web.support.pagination.getpageables(pageable) 
called| list org.wallride.web.support.pagination.getpageables(pageable, int) 
called| boolean org.wallride.web.support.pagination.hasnextpage() 
called| int org.wallride.web.support.pagination.getnextpagenumber() 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, False]
path_matching_number_k:[0, 1, 1, 1, 1]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:0.5
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, False]
request_matching_number_k:[0, 1, 1, 1, 1]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:0.5

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.index(string,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.999537491128959
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999537491128959
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagesearchcontroller.search(string,pagesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.999537491128959
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999537491128959
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpagecreatedialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.999537491128959
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999537491128959
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.sort(string,list<map>)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.999537491128959
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999537491128959
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.index(string)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]

Syntactic Similarity:0.999537491128959
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999537491128959
Path matching:False
Request matching:False



======================================= 74 given SQL query ===========================================
Given individual SQL query: select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then 1 when post4_2_.id is not null then 2 when post4_.id is not null then 0 end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
Pre-processed SQL query : select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user user8 left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id=? and page.language=? 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long, string) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long, string) 
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| sortedset org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getallcustomfields(string) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| sortedset org.wallride.service.customfieldservice.getallcustomfields(string) 
called| list com.sun.proxy..proxy191.findallbylanguage(string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
called| pageeditform org.wallride.web.controller.admin.page.pageeditform.fromdomainobject(page, set) 
called| void org.wallride.web.controller.admin.page.pageeditform.setbody(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcode(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setdate(localdatetime) 
called| void org.wallride.web.controller.admin.page.pageeditform.setid(long) 
called| void org.wallride.web.controller.admin.page.pageeditform.setlanguage(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.settitle(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcoverid(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setparentid(long) 
called| set org.wallride.web.controller.admin.page.pageeditform.getcategoryids() 
called| void org.wallride.web.controller.admin.page.pageeditform.settags(string) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getdraftbyid(long) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pageeditform.getid() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.web.controller.admin.page.pageeditform.getcoverid() 
called| string org.wallride.web.controller.admin.page.pageeditform.gettitle() 
called| string org.wallride.web.controller.admin.page.pageeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.print(string, locale) 
called| string org.wallride.web.controller.admin.page.pageeditform.getbody() 
called| localdatetime org.wallride.web.controller.admin.page.pageeditform.getdate() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++ 3 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, True, False, False, True]
path_matching_number_k:[0, 1, 1, 1, 2]
path_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.4]
path_ap:0.2824656235182551
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, True, False, False, True]
request_matching_number_k:[0, 1, 1, 1, 2]
request_precision_k:[0.0, 0.5, 0.3333333333333333, 0.25, 0.4]
request_ap:0.2485894849568553

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]

Syntactic Similarity:0.9994640173540771
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.999464017354077
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9987158793927038
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9987158793927038
Path matching:True
Request matching:True
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9987158793927038
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9987158793927038
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpageeditdialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9972126827195401
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9972126827195402
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9967585412669827
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9967585412669826
Path matching:True
Request matching:True



======================================= 75 given SQL query ===========================================
Given individual SQL query: select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then 1 when post5_2_.id is not null then 2 when post5_.id is not null then 0 end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
Pre-processed SQL query : select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user user9 left outer join postcategory left outer join category left outer join posttag left outer join tag where page.drafted_id=? and page.id=(select max(page.id) from page page inner join post page on page.id=page.id where page.drafted_id=?) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getpagebyid(long, string) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.getpagebyid(long, string) 
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| sortedset org.wallride.service.customfieldservice..enhancerbyspringcglib..5f91c28f.getallcustomfields(string) 
called| object org.wallride.service.customfieldservice..fastclassbyspringcglib..110c807.invoke(int, object, object[]) 
called| sortedset org.wallride.service.customfieldservice.getallcustomfields(string) 
called| list com.sun.proxy..proxy191.findallbylanguage(string) 
sql|select customfiel0_.id as id1_0_, customfiel0_.created_at as created_2_0_, customfiel0_.created_by as created_3_0_, customfiel0_.updated_at as updated_4_0_, customfiel0_.updated_by as updated_5_0_, customfiel0_.code as code6_0_, customfiel0_.default_value as default_7_0_, customfiel0_.description as descript8_0_, customfiel0_.field_type as field_ty9_0_, customfiel0_.idx as idx10_0_, customfiel0_.language as languag11_0_, customfiel0_.name as name12_0_, options1_.custom_field_id as custom_f1_7_0__, options1_.language as language2_7_0__, options1_.name as name3_7_0__, options1_.idx as idx4_0__ from custom_field customfiel0_ left outer join custom_field_option options1_ on customfiel0_.id=options1_.custom_field_id where customfiel0_.language=?
called| pageeditform org.wallride.web.controller.admin.page.pageeditform.fromdomainobject(page, set) 
called| void org.wallride.web.controller.admin.page.pageeditform.setbody(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcode(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setdate(localdatetime) 
called| void org.wallride.web.controller.admin.page.pageeditform.setid(long) 
called| void org.wallride.web.controller.admin.page.pageeditform.setlanguage(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.settitle(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setcoverid(string) 
called| void org.wallride.web.controller.admin.page.pageeditform.setparentid(long) 
called| set org.wallride.web.controller.admin.page.pageeditform.getcategoryids() 
called| void org.wallride.web.controller.admin.page.pageeditform.settags(string) 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.getdraftbyid(long) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.edit(string, long, model, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| map org.wallride.web.support.defaultmodelattributeinterceptor.buildlanguagelinks(string, list, httpservletrequest) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildguestpath(string, list) 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminlink() 
called| string org.wallride.web.support.defaultmodelattributeinterceptor.buildadminpath(string) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| itemplateresource org.wallride.autoconfigure.wallrideresourcetemplateresolver.computetemplateresource(iengineconfiguration, string, string, string, string, map) 
called| boolean org.wallride.autoconfigure.wallrideresourcetemplateresource.exists() 
called| reader org.wallride.autoconfigure.wallrideresourcetemplateresource.reader() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| set org.wallride.autoconfigure.wallrideexpressionobjectfactory.getallexpressionobjectnames() 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pageeditform.getid() 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processaction(httpservletrequest, string, string) 
called| map org.wallride.web.support.bloglanguagedatavalueprocessor.getextrahiddenfields(httpservletrequest) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processformfieldvalue(httpservletrequest, string, string, string) 
called| string org.wallride.web.controller.admin.page.pageeditform.getcoverid() 
called| string org.wallride.web.controller.admin.page.pageeditform.gettitle() 
called| string org.wallride.web.controller.admin.page.pageeditform.getcode() 
called| class com.sun.proxy..proxy221.annotationtype() 
called| boolean com.sun.proxy..proxy221.equals(object) 
called| int com.sun.proxy..proxy221.hashcode() 
called| string org.wallride.support.codeformatter.print(string, locale) 
called| string org.wallride.web.controller.admin.page.pageeditform.getbody() 
called| localdatetime org.wallride.web.controller.admin.page.pageeditform.getdate() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 

+++++++++++++++++++++++ 2 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| pageupdaterequest org.wallride.web.controller.admin.page.pageeditform.buildpageupdaterequest() 
called| page org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.savepageaspublished(pageupdaterequest, authorizeduser) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| page org.wallride.service.pageservice.savepageaspublished(pageupdaterequest, authorizeduser) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| page org.wallride.service.pageservice.getdraftbyid(long) 
called| specification org.wallride.repository.pagespecifications.draft(page) 
called| page com.sun.proxy..proxy192.findone(specification) 
called| predicate org.wallride.repository.pagespecifications.lambda$draft$8f926efb$1(page, root, criteriaquery, criteriabuilder) 
sql|select page0_.id as id1_13_0_, media2_.id as id1_8_1_, page3_.id as id1_13_2_, post5_.id as id1_13_3_, customfiel6_.id as id1_1_4_, customfiel7_.id as id1_0_5_, children8_.id as id1_13_6_, user9_.id as id1_19_7_, category11_.id as id1_5_8_, tag13_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media2_.created_at as created_2_8_1_, media2_.created_by as created_3_8_1_, media2_.updated_at as updated_4_8_1_, media2_.updated_by as updated_5_8_1_, media2_.mime_type as mime_typ6_8_1_, media2_.original_name as original7_8_1_, page3_1_.created_at as created_2_13_2_, page3_1_.created_by as created_3_13_2_, page3_1_.updated_at as updated_4_13_2_, page3_1_.updated_by as updated_5_13_2_, page3_1_.author_id as author_17_13_2_, page3_1_.body as body6_13_2_, page3_1_.code as code7_13_2_, page3_1_.cover_id as cover_i18_13_2_, page3_1_.date as date8_13_2_, page3_1_.drafted_id as drafted19_13_2_, page3_1_.drafted_code as drafted_9_13_2_, page3_1_.language as languag10_13_2_, page3_1_.seo_description as seo_des11_13_2_, page3_1_.seo_keywords as seo_key12_13_2_, page3_1_.seo_title as seo_tit13_13_2_, page3_1_.status as status14_13_2_, page3_1_.title as title15_13_2_, page3_1_.views as views16_13_2_, page3_.lft as lft1_10_2_, page3_.parent_id as parent_i4_10_2_, page3_.rgt as rgt2_10_2_, post5_.created_at as created_2_13_3_, post5_.created_by as created_3_13_3_, post5_.updated_at as updated_4_13_3_, post5_.updated_by as updated_5_13_3_, post5_.author_id as author_17_13_3_, post5_.body as body6_13_3_, post5_.code as code7_13_3_, post5_.cover_id as cover_i18_13_3_, post5_.date as date8_13_3_, post5_.drafted_id as drafted19_13_3_, post5_.drafted_code as drafted_9_13_3_, post5_.language as languag10_13_3_, post5_.seo_description as seo_des11_13_3_, post5_.seo_keywords as seo_key12_13_3_, post5_.seo_title as seo_tit13_13_3_, post5_.status as status14_13_3_, post5_.title as title15_13_3_, post5_.views as views16_13_3_, post5_1_.lft as lft1_10_3_, post5_1_.parent_id as parent_i4_10_3_, post5_1_.rgt as rgt2_10_3_, case when post5_1_.id is not null then ? when post5_2_.id is not null then ? when post5_.id is not null then ? end as clazz_3_, relatedtop4_.post_id as post_id1_16_0__, relatedtop4_.related_id as related_2_16_0__, customfiel6_.created_at as created_2_1_4_, customfiel6_.created_by as created_3_1_4_, customfiel6_.updated_at as updated_4_1_4_, customfiel6_.updated_by as updated_5_1_4_, customfiel6_.custom_field_id as custom_11_1_4_, customfiel6_.date_value as date_val6_1_4_, customfiel6_.datetime_value as datetime7_1_4_, customfiel6_.number_value as number_v8_1_4_, customfiel6_.post_id as post_id12_1_4_, customfiel6_.string_value as string_v9_1_4_, customfiel6_.text_value as text_va10_1_4_, customfiel6_.post_id as post_id12_1_1__, customfiel6_.id as id1_1_1__, customfiel7_.created_at as created_2_0_5_, customfiel7_.created_by as created_3_0_5_, customfiel7_.updated_at as updated_4_0_5_, customfiel7_.updated_by as updated_5_0_5_, customfiel7_.code as code6_0_5_, customfiel7_.default_value as default_7_0_5_, customfiel7_.description as descript8_0_5_, customfiel7_.field_type as field_ty9_0_5_, customfiel7_.idx as idx10_0_5_, customfiel7_.language as languag11_0_5_, customfiel7_.name as name12_0_5_, children8_1_.created_at as created_2_13_6_, children8_1_.created_by as created_3_13_6_, children8_1_.updated_at as updated_4_13_6_, children8_1_.updated_by as updated_5_13_6_, children8_1_.author_id as author_17_13_6_, children8_1_.body as body6_13_6_, children8_1_.code as code7_13_6_, children8_1_.cover_id as cover_i18_13_6_, children8_1_.date as date8_13_6_, children8_1_.drafted_id as drafted19_13_6_, children8_1_.drafted_code as drafted_9_13_6_, children8_1_.language as languag10_13_6_, children8_1_.seo_description as seo_des11_13_6_, children8_1_.seo_keywords as seo_key12_13_6_, children8_1_.seo_title as seo_tit13_13_6_, children8_1_.status as status14_13_6_, children8_1_.title as title15_13_6_, children8_1_.views as views16_13_6_, children8_.lft as lft1_10_6_, children8_.parent_id as parent_i4_10_6_, children8_.rgt as rgt2_10_6_, children8_.parent_id as parent_i4_10_2__, children8_.id as id3_10_2__, user9_.created_at as created_2_19_7_, user9_.created_by as created_3_19_7_, user9_.updated_at as updated_4_19_7_, user9_.updated_by as updated_5_19_7_, user9_.description as descript6_19_7_, user9_.email as email7_19_7_, user9_.login_id as login_id8_19_7_, user9_.login_password as login_pa9_19_7_, user9_.name_first as name_fi10_19_7_, user9_.name_last as name_la11_19_7_, user9_.nickname as nicknam12_19_7_, category11_.created_at as created_2_5_8_, category11_.created_by as created_3_5_8_, category11_.updated_at as updated_4_5_8_, category11_.updated_by as updated_5_5_8_, category11_.code as code6_5_8_, category11_.description as descript7_5_8_, category11_.language as language8_5_8_, category11_.lft as lft9_5_8_, category11_.name as name10_5_8_, category11_.parent_id as parent_12_5_8_, category11_.rgt as rgt11_5_8_, categories10_.post_id as post_id2_14_3__, categories10_.category_id as category1_14_3__, tag13_.created_at as created_2_18_9_, tag13_.created_by as created_3_18_9_, tag13_.updated_at as updated_4_18_9_, tag13_.updated_by as updated_5_18_9_, tag13_.language as language6_18_9_, tag13_.name as name7_18_9_, tags12_.post_id as post_id2_17_4__, tags12_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media2_ on page0_1_.cover_id=media2_.id left outer join page page3_ on page0_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id left outer join post_related_post relatedtop4_ on page0_.id=relatedtop4_.post_id left outer join post post5_ on relatedtop4_.related_id=post5_.id left outer join page post5_1_ on post5_.id=post5_1_.id left outer join article post5_2_ on post5_.id=post5_2_.id left outer join custom_field_value customfiel6_ on page0_.id=customfiel6_.post_id left outer join custom_field customfiel7_ on customfiel6_.custom_field_id=customfiel7_.id left outer join page children8_ on page0_.id=children8_.parent_id left outer join post children8_1_ on children8_.id=children8_1_.id left outer join user user9_ on page0_1_.author_id=user9_.id left outer join post_category categories10_ on page0_.id=categories10_.post_id left outer join category category11_ on categories10_.category_id=category11_.id left outer join post_tag tags12_ on page0_.id=tags12_.post_id left outer join tag tag13_ on tags12_.tag_id=tag13_.id where page0_1_.drafted_id=? and page0_.id=(select max(page1_.id) from page page1_ inner join post page1_1_ on page1_.id=page1_1_.id where page1_1_.drafted_id=?)
called| object com.sun.proxy..proxy192.save(object) 
called| page org.wallride.service.pageservice.savepage(pageupdaterequest, authorizeduser) 
called| post com.sun.proxy..proxy182.findonebycodeandlanguage(string, string) 
sql|select post0_.id as id1_13_0_, media1_.id as id1_8_1_, user2_.id as id1_19_2_, post0_.created_at as created_2_13_0_, post0_.created_by as created_3_13_0_, post0_.updated_at as updated_4_13_0_, post0_.updated_by as updated_5_13_0_, post0_.author_id as author_17_13_0_, post0_.body as body6_13_0_, post0_.code as code7_13_0_, post0_.cover_id as cover_i18_13_0_, post0_.date as date8_13_0_, post0_.drafted_id as drafted19_13_0_, post0_.drafted_code as drafted_9_13_0_, post0_.language as languag10_13_0_, post0_.seo_description as seo_des11_13_0_, post0_.seo_keywords as seo_key12_13_0_, post0_.seo_title as seo_tit13_13_0_, post0_.status as status14_13_0_, post0_.title as title15_13_0_, post0_.views as views16_13_0_, post0_1_.lft as lft1_10_0_, post0_1_.parent_id as parent_i4_10_0_, post0_1_.rgt as rgt2_10_0_, case when post0_1_.id is not null then ? when post0_2_.id is not null then ? when post0_.id is not null then ? end as clazz_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, user2_.created_at as created_2_19_2_, user2_.created_by as created_3_19_2_, user2_.updated_at as updated_4_19_2_, user2_.updated_by as updated_5_19_2_, user2_.description as descript6_19_2_, user2_.email as email7_19_2_, user2_.login_id as login_id8_19_2_, user2_.login_password as login_pa9_19_2_, user2_.name_first as name_fi10_19_2_, user2_.name_last as name_la11_19_2_, user2_.nickname as nicknam12_19_2_ from post post0_ left outer join page post0_1_ on post0_.id=post0_1_.id left outer join article post0_2_ on post0_.id=post0_2_.id left outer join media media1_ on post0_.cover_id=media1_.id left outer join user user2_ on post0_.author_id=user2_.id where post0_.code=? and post0_.language=?
called| string org.wallride.autoconfigure.wallrideproperties.getmediaurlprefix() 
sql|update post set updated_at=?, body=?, date=? where id=?
sql|delete from post_media where post_id=?
sql|delete from post_category where post_id=?
sql|insert into post_category (post_id, category_id) values (?, ?)
sql|select count(id) from comment where post_id =?
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
called| void org.wallride.support.customfieldvaluesbridge.set(string, object, document, luceneoptions) 
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
after rest| string org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string, pageeditform, bindingresult, string, authorizeduser, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagedescribecontroller.query(string) 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, True, False]
path_matching_number_k:[1, 1, 1, 2, 2]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.4]
path_ap:0.4024656235182551
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, True, False]
request_matching_number_k:[1, 1, 1, 2, 2]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.5, 0.4]
request_ap:0.27747429504425775

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9889820404794248
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9889820404794247
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.9889820404794248
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9889820404794247
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]

Syntactic Similarity:0.988190936734256
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.9881909367342558
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.987795229964954
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.987795229964954
Path matching:True
Request matching:True
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.987795229964954
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.987795229964954
Path matching:False
Request matching:False



======================================= 76 given SQL query ===========================================
Given individual SQL query: delete from page where id=?
Pre-processed SQL query : delete from page where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.3333333333333333

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.5184564399511715
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6434564399511715
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.5184564399511715
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6434564399511715
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.5184564399511715
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6434564399511715
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.14276379016314622
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6427637901631462
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6275043978574695
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6275043978574695
Path matching:False
Request matching:False



======================================= 77 given SQL query ===========================================
Given individual SQL query: insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
Pre-processed SQL query : insert into ht_page select page.id as id from page page inner join post page on page.id=page.id where page.lft between ? and ?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.3333333333333333

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6512318104285716
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7762318104285716
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6512318104285716
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7762318104285716
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6512318104285716
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7762318104285716
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.601568193654782
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7444253365119249
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.601568193654782
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7444253365119249
Path matching:False
Request matching:False



======================================= 78 given SQL query ===========================================
Given individual SQL query: update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
Pre-processed SQL query : update page set rgt=rgt-, lft=lft- where (id) in (select id from ht_page)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.027777777777777776
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.027777777777777776

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.6621520446506455
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8050091875077883
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.6621520446506455
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8050091875077883
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.6621520446506455
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8050091875077883
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.6621520446506455
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8050091875077883
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.6621520446506455
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8050091875077883
Path matching:False
Request matching:False



======================================= 79 given SQL query ===========================================
Given individual SQL query: insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
Pre-processed SQL query : insert into ht_page select page.id as id from page page inner join post page on page.id=page.id where page.rgt>?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.3333333333333333

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.67354329270548
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.79854329270548
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.67354329270548
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.79854329270548
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.67354329270548
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.79854329270548
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.6272995888406294
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7701567316977722
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.6272995888406294
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7701567316977722
Path matching:False
Request matching:False



======================================= 80 given SQL query ===========================================
Given individual SQL query: update page set rgt=rgt-2 where (id) in (select id from ht_page)
Pre-processed SQL query : update page set rgt=rgt- where (id) in (select id from ht_page)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.05
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.05

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.5690580772831285
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7119152201402714
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.5690580772831285
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7119152201402714
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.5690580772831285
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7119152201402714
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.5690580772831285
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7119152201402714
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]

Syntactic Similarity:0.5690580772831285
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7119152201402714
Path matching:False
Request matching:False



======================================= 81 given SQL query ===========================================
Given individual SQL query: insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
Pre-processed SQL query : insert into ht_page select page.id as id from page page inner join post page on page.id=page.id where page.lft>?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.3333333333333333

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6816146390043301
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8066146390043301
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6816146390043301
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8066146390043301
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.6816146390043301
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8066146390043301
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.6272995888406294
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7701567316977722
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.6272995888406294
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7701567316977722
Path matching:False
Request matching:False



======================================= 82 given SQL query ===========================================
Given individual SQL query: update page set lft=lft-2 where (id) in (select id from ht_page)
Pre-processed SQL query : update page set lft=lft- where (id) in (select id from ht_page)

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.14285714285714285
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.14285714285714285

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.5335004202321617
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6763575630893046
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.5335004202321617
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6763575630893046
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.5317403228984369
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6567403228984369
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]

Syntactic Similarity:0.5317403228984369
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6567403228984369
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.5192349296165835
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6442349296165835
Path matching:False
Request matching:False



======================================= 83 given SQL query ===========================================
Given individual SQL query: select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
Pre-processed SQL query : select count(page.id) from page inner join post where page.language=? and (page.drafted_id is null) 

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| boolean org.wallride.web.controller.admin.page.pagebulkdeleteform.isconfirmed() 
called| pagebulkdeleterequest org.wallride.web.controller.admin.page.pagebulkdeleteform.buildpagebulkdeleterequest() 
called| list org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| int org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.getindex(signature) 
called| int org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb..fastclassbyspringcglib..718887d1.getindex(signature) 
called| object org.wallride.service.pageservice..fastclassbyspringcglib..278f9beb.invoke(int, object, object[]) 
called| list org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest, bindingresult) 
called| page org.wallride.service.pageservice.deletepage(pagedeleterequest, bindingresult) 
called| void com.sun.proxy..proxy182.lock(long) 
called| void org.wallride.repository.postrepositoryimpl.lock(long) 
sql|select post0_.id as col_0_0_ from post post0_ where post0_.id=? for update
called| page com.sun.proxy..proxy192.findonebyidandlanguage(long, string) 
sql|select page0_.id as id1_13_0_, media1_.id as id1_8_1_, page2_.id as id1_13_2_, post4_.id as id1_13_3_, customfiel5_.id as id1_1_4_, customfiel6_.id as id1_0_5_, children7_.id as id1_13_6_, user8_.id as id1_19_7_, category10_.id as id1_5_8_, tag12_.id as id1_18_9_, page0_1_.created_at as created_2_13_0_, page0_1_.created_by as created_3_13_0_, page0_1_.updated_at as updated_4_13_0_, page0_1_.updated_by as updated_5_13_0_, page0_1_.author_id as author_17_13_0_, page0_1_.body as body6_13_0_, page0_1_.code as code7_13_0_, page0_1_.cover_id as cover_i18_13_0_, page0_1_.date as date8_13_0_, page0_1_.drafted_id as drafted19_13_0_, page0_1_.drafted_code as drafted_9_13_0_, page0_1_.language as languag10_13_0_, page0_1_.seo_description as seo_des11_13_0_, page0_1_.seo_keywords as seo_key12_13_0_, page0_1_.seo_title as seo_tit13_13_0_, page0_1_.status as status14_13_0_, page0_1_.title as title15_13_0_, page0_1_.views as views16_13_0_, page0_.lft as lft1_10_0_, page0_.parent_id as parent_i4_10_0_, page0_.rgt as rgt2_10_0_, media1_.created_at as created_2_8_1_, media1_.created_by as created_3_8_1_, media1_.updated_at as updated_4_8_1_, media1_.updated_by as updated_5_8_1_, media1_.mime_type as mime_typ6_8_1_, media1_.original_name as original7_8_1_, page2_1_.created_at as created_2_13_2_, page2_1_.created_by as created_3_13_2_, page2_1_.updated_at as updated_4_13_2_, page2_1_.updated_by as updated_5_13_2_, page2_1_.author_id as author_17_13_2_, page2_1_.body as body6_13_2_, page2_1_.code as code7_13_2_, page2_1_.cover_id as cover_i18_13_2_, page2_1_.date as date8_13_2_, page2_1_.drafted_id as drafted19_13_2_, page2_1_.drafted_code as drafted_9_13_2_, page2_1_.language as languag10_13_2_, page2_1_.seo_description as seo_des11_13_2_, page2_1_.seo_keywords as seo_key12_13_2_, page2_1_.seo_title as seo_tit13_13_2_, page2_1_.status as status14_13_2_, page2_1_.title as title15_13_2_, page2_1_.views as views16_13_2_, page2_.lft as lft1_10_2_, page2_.parent_id as parent_i4_10_2_, page2_.rgt as rgt2_10_2_, post4_.created_at as created_2_13_3_, post4_.created_by as created_3_13_3_, post4_.updated_at as updated_4_13_3_, post4_.updated_by as updated_5_13_3_, post4_.author_id as author_17_13_3_, post4_.body as body6_13_3_, post4_.code as code7_13_3_, post4_.cover_id as cover_i18_13_3_, post4_.date as date8_13_3_, post4_.drafted_id as drafted19_13_3_, post4_.drafted_code as drafted_9_13_3_, post4_.language as languag10_13_3_, post4_.seo_description as seo_des11_13_3_, post4_.seo_keywords as seo_key12_13_3_, post4_.seo_title as seo_tit13_13_3_, post4_.status as status14_13_3_, post4_.title as title15_13_3_, post4_.views as views16_13_3_, post4_1_.lft as lft1_10_3_, post4_1_.parent_id as parent_i4_10_3_, post4_1_.rgt as rgt2_10_3_, case when post4_1_.id is not null then ? when post4_2_.id is not null then ? when post4_.id is not null then ? end as clazz_3_, relatedtop3_.post_id as post_id1_16_0__, relatedtop3_.related_id as related_2_16_0__, customfiel5_.created_at as created_2_1_4_, customfiel5_.created_by as created_3_1_4_, customfiel5_.updated_at as updated_4_1_4_, customfiel5_.updated_by as updated_5_1_4_, customfiel5_.custom_field_id as custom_11_1_4_, customfiel5_.date_value as date_val6_1_4_, customfiel5_.datetime_value as datetime7_1_4_, customfiel5_.number_value as number_v8_1_4_, customfiel5_.post_id as post_id12_1_4_, customfiel5_.string_value as string_v9_1_4_, customfiel5_.text_value as text_va10_1_4_, customfiel5_.post_id as post_id12_1_1__, customfiel5_.id as id1_1_1__, customfiel6_.created_at as created_2_0_5_, customfiel6_.created_by as created_3_0_5_, customfiel6_.updated_at as updated_4_0_5_, customfiel6_.updated_by as updated_5_0_5_, customfiel6_.code as code6_0_5_, customfiel6_.default_value as default_7_0_5_, customfiel6_.description as descript8_0_5_, customfiel6_.field_type as field_ty9_0_5_, customfiel6_.idx as idx10_0_5_, customfiel6_.language as languag11_0_5_, customfiel6_.name as name12_0_5_, children7_1_.created_at as created_2_13_6_, children7_1_.created_by as created_3_13_6_, children7_1_.updated_at as updated_4_13_6_, children7_1_.updated_by as updated_5_13_6_, children7_1_.author_id as author_17_13_6_, children7_1_.body as body6_13_6_, children7_1_.code as code7_13_6_, children7_1_.cover_id as cover_i18_13_6_, children7_1_.date as date8_13_6_, children7_1_.drafted_id as drafted19_13_6_, children7_1_.drafted_code as drafted_9_13_6_, children7_1_.language as languag10_13_6_, children7_1_.seo_description as seo_des11_13_6_, children7_1_.seo_keywords as seo_key12_13_6_, children7_1_.seo_title as seo_tit13_13_6_, children7_1_.status as status14_13_6_, children7_1_.title as title15_13_6_, children7_1_.views as views16_13_6_, children7_.lft as lft1_10_6_, children7_.parent_id as parent_i4_10_6_, children7_.rgt as rgt2_10_6_, children7_.parent_id as parent_i4_10_2__, children7_.id as id3_10_2__, user8_.created_at as created_2_19_7_, user8_.created_by as created_3_19_7_, user8_.updated_at as updated_4_19_7_, user8_.updated_by as updated_5_19_7_, user8_.description as descript6_19_7_, user8_.email as email7_19_7_, user8_.login_id as login_id8_19_7_, user8_.login_password as login_pa9_19_7_, user8_.name_first as name_fi10_19_7_, user8_.name_last as name_la11_19_7_, user8_.nickname as nicknam12_19_7_, category10_.created_at as created_2_5_8_, category10_.created_by as created_3_5_8_, category10_.updated_at as updated_4_5_8_, category10_.updated_by as updated_5_5_8_, category10_.code as code6_5_8_, category10_.description as descript7_5_8_, category10_.language as language8_5_8_, category10_.lft as lft9_5_8_, category10_.name as name10_5_8_, category10_.parent_id as parent_12_5_8_, category10_.rgt as rgt11_5_8_, categories9_.post_id as post_id2_14_3__, categories9_.category_id as category1_14_3__, tag12_.created_at as created_2_18_9_, tag12_.created_by as created_3_18_9_, tag12_.updated_at as updated_4_18_9_, tag12_.updated_by as updated_5_18_9_, tag12_.language as language6_18_9_, tag12_.name as name7_18_9_, tags11_.post_id as post_id2_17_4__, tags11_.tag_id as tag_id1_17_4__ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id left outer join media media1_ on page0_1_.cover_id=media1_.id left outer join page page2_ on page0_.parent_id=page2_.id left outer join post page2_1_ on page2_.id=page2_1_.id left outer join post_related_post relatedtop3_ on page0_.id=relatedtop3_.post_id left outer join post post4_ on relatedtop3_.related_id=post4_.id left outer join page post4_1_ on post4_.id=post4_1_.id left outer join article post4_2_ on post4_.id=post4_2_.id left outer join custom_field_value customfiel5_ on page0_.id=customfiel5_.post_id left outer join custom_field customfiel6_ on customfiel5_.custom_field_id=customfiel6_.id left outer join page children7_ on page0_.id=children7_.parent_id left outer join post children7_1_ on children7_.id=children7_1_.id left outer join user user8_ on page0_1_.author_id=user8_.id left outer join post_category categories9_ on page0_.id=categories9_.post_id left outer join category category10_ on categories9_.category_id=category10_.id left outer join post_tag tags11_ on page0_.id=tags11_.post_id left outer join tag tag12_ on tags11_.tag_id=tag12_.id where page0_.id=? and page0_1_.language=?
called| object com.sun.proxy..proxy192.saveandflush(object) 
called| void com.sun.proxy..proxy192.delete(object) 
sql|select comments0_.post_id as post_id11_6_0_, comments0_.id as id1_6_0_, comments0_.id as id1_6_1_, comments0_.created_at as created_2_6_1_, comments0_.created_by as created_3_6_1_, comments0_.updated_at as updated_4_6_1_, comments0_.updated_by as updated_5_6_1_, comments0_.approved as approved6_6_1_, comments0_.author_id as author_10_6_1_, comments0_.author_name as author_n7_6_1_, comments0_.content as content8_6_1_, comments0_.date as date9_6_1_, comments0_.post_id as post_id11_6_1_ from comment comments0_ where comments0_.post_id=?
sql|select drafts0_.drafted_id as drafted19_13_0_, drafts0_.id as id1_13_0_, drafts0_.id as id1_13_1_, drafts0_.created_at as created_2_13_1_, drafts0_.created_by as created_3_13_1_, drafts0_.updated_at as updated_4_13_1_, drafts0_.updated_by as updated_5_13_1_, drafts0_.author_id as author_17_13_1_, drafts0_.body as body6_13_1_, drafts0_.code as code7_13_1_, drafts0_.cover_id as cover_i18_13_1_, drafts0_.date as date8_13_1_, drafts0_.drafted_id as drafted19_13_1_, drafts0_.drafted_code as drafted_9_13_1_, drafts0_.language as languag10_13_1_, drafts0_.seo_description as seo_des11_13_1_, drafts0_.seo_keywords as seo_key12_13_1_, drafts0_.seo_title as seo_tit13_13_1_, drafts0_.status as status14_13_1_, drafts0_.title as title15_13_1_, drafts0_.views as views16_13_1_, drafts0_1_.lft as lft1_10_1_, drafts0_1_.parent_id as parent_i4_10_1_, drafts0_1_.rgt as rgt2_10_1_, case when drafts0_1_.id is not null then ? when drafts0_2_.id is not null then ? when drafts0_.id is not null then ? end as clazz_1_, user1_.id as id1_19_2_, user1_.created_at as created_2_19_2_, user1_.created_by as created_3_19_2_, user1_.updated_at as updated_4_19_2_, user1_.updated_by as updated_5_19_2_, user1_.description as descript6_19_2_, user1_.email as email7_19_2_, user1_.login_id as login_id8_19_2_, user1_.login_password as login_pa9_19_2_, user1_.name_first as name_fi10_19_2_, user1_.name_last as name_la11_19_2_, user1_.nickname as nicknam12_19_2_, media2_.id as id1_8_3_, media2_.created_at as created_2_8_3_, media2_.created_by as created_3_8_3_, media2_.updated_at as updated_4_8_3_, media2_.updated_by as updated_5_8_3_, media2_.mime_type as mime_typ6_8_3_, media2_.original_name as original7_8_3_, page3_.id as id1_13_4_, page3_1_.created_at as created_2_13_4_, page3_1_.created_by as created_3_13_4_, page3_1_.updated_at as updated_4_13_4_, page3_1_.updated_by as updated_5_13_4_, page3_1_.author_id as author_17_13_4_, page3_1_.body as body6_13_4_, page3_1_.code as code7_13_4_, page3_1_.cover_id as cover_i18_13_4_, page3_1_.date as date8_13_4_, page3_1_.drafted_id as drafted19_13_4_, page3_1_.drafted_code as drafted_9_13_4_, page3_1_.language as languag10_13_4_, page3_1_.seo_description as seo_des11_13_4_, page3_1_.seo_keywords as seo_key12_13_4_, page3_1_.seo_title as seo_tit13_13_4_, page3_1_.status as status14_13_4_, page3_1_.title as title15_13_4_, page3_1_.views as views16_13_4_, page3_.lft as lft1_10_4_, page3_.parent_id as parent_i4_10_4_, page3_.rgt as rgt2_10_4_ from post drafts0_ left outer join page drafts0_1_ on drafts0_.id=drafts0_1_.id left outer join article drafts0_2_ on drafts0_.id=drafts0_2_.id left outer join user user1_ on drafts0_.author_id=user1_.id left outer join media media2_ on drafts0_.cover_id=media2_.id left outer join page page3_ on drafts0_1_.parent_id=page3_.id left outer join post page3_1_ on page3_.id=page3_1_.id where drafts0_.drafted_id=?
called| void com.sun.proxy..proxy192.shiftlftrgt(int, int) 
sql|delete from post_media where post_id=?
sql|delete from post_related_post where related_id=?
sql|delete from post_category where post_id=?
sql|delete from page where id=?
sql|delete from post where id=?
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?
sql|update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftrgt(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?
sql|update page set rgt=rgt-2 where (id) in (select id from ht_page)
called| void com.sun.proxy..proxy192.shiftlft(int) 
sql|insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?
sql|update page set lft=lft-2 where (id) in (select id from ht_page)
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| string org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform, bindingresult, string, redirectattributes) 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| view org.wallride.web.support.extendedthymeleafviewresolver.createview(string, locale) 
called| string org.wallride.web.support.bloglanguagedatavalueprocessor.processurl(httpservletrequest, string) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| string org.wallride.web.controller.admin.page.pagesearchcontroller.query(string) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countdraft(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpagesbystatus(post.status, string) 
called| long org.wallride.service.pageservice.countpagesbystatus(post.status, string) 
called| long com.sun.proxy..proxy192.countbystatus(post.status, string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.status=? and page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countpublished(string) 
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countall(string) 
called| long org.wallride.service.pageservice..enhancerbyspringcglib..79efccbb.countpages(string) 
called| long org.wallride.service.pageservice.countpages(string) 
called| long com.sun.proxy..proxy192.count(string) 
sql|select count(page0_.id) as col_0_0_ from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_1_.language=? and (page0_1_.drafted_id is null)
called| long org.wallride.web.controller.admin.page.pagesearchcontroller.countscheduled(string) 
called| pagesearchform org.wallride.web.controller.admin.page.pagesearchcontroller.setuppagesearchform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, False]
path_matching_number_k:[0, 0, 0, 0, 0]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
path_ap:0.0196078431372549
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, False]
request_matching_number_k:[0, 0, 0, 0, 0]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.0]
request_ap:0.0196078431372549

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]

Syntactic Similarity:0.2914317221495802
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2914317221495801
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.1814515111215384
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1814515111215385
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]

Syntactic Similarity:0.17000904662673508
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.170009046626735
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.14229954791709223
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1422995479170923
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]

Syntactic Similarity:0.14229954791709223
Semantic Similarity:1.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1422995479170923
Path matching:False
Request matching:False



======================================= 84 given SQL query ===========================================
Given individual SQL query: delete from post_category where category_id=?
Pre-processed SQL query : delete from post_category where category_id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, True, False, False]
path_matching_number_k:[0, 0, 1, 1, 1]
path_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
path_ap:0.3333333333333333
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, True, False, False]
request_matching_number_k:[0, 0, 1, 1, 1]
request_precision_k:[0.0, 0.0, 0.3333333333333333, 0.25, 0.2]
request_ap:0.3333333333333333

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]

Syntactic Similarity:0.3771717936334541
Semantic Similarity:0.14285714285714285
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.520028936490597
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.24446804877611183
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.49446804877611183
Path matching:True
Request matching:True
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.48663565267670095
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.48663565267670095
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]

Syntactic Similarity:0.3110608753302219
Semantic Similarity:0.125
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.4360608753302219
Path matching:False
Request matching:False



======================================= 85 given SQL query ===========================================
Given individual SQL query: delete from category where id=?
Pre-processed SQL query : delete from category where id=?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[True, False, False, False, False]
path_matching_number_k:[1, 1, 1, 1, 1]
path_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
path_ap:1.0
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[True, False, False, False, False]
request_matching_number_k:[1, 1, 1, 1, 1]
request_precision_k:[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
request_ap:1.0

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.5021834484341388
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.7521834484341388
Path matching:True
Request matching:True
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]

Syntactic Similarity:0.6323032491127127
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.6323032491127127
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.541029812233814
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.541029812233814
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]

Syntactic Similarity:0.53623899781203
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.53623899781203
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]

Syntactic Similarity:0.5066167035589586
Semantic Similarity:0.0
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.5066167035589586
Path matching:False
Request matching:False



======================================= 86 given SQL query ===========================================
Given individual SQL query: update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
Pre-processed SQL query : update category set rgt=rgt-, lft=lft- where lft between ? and ?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, True]
path_matching_number_k:[0, 0, 0, 0, 1]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
path_ap:0.2
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, True]
request_matching_number_k:[0, 0, 0, 0, 1]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
request_ap:0.2

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.8844910303686659
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.384491030368666
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.8601013553704705
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3601013553704706
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.7903215845004324
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2903215845004326
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.7350027740494043
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0683361073827375
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.8015578781596305
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0515578781596306
Path matching:True
Request matching:True



======================================= 87 given SQL query ===========================================
Given individual SQL query: update category set rgt=rgt-2 where rgt>?
Pre-processed SQL query : update category set rgt=rgt- where rgt>?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, True]
path_matching_number_k:[0, 0, 0, 0, 1]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
path_ap:0.2
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, True]
request_matching_number_k:[0, 0, 0, 0, 1]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
request_ap:0.2

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.8215463633708944
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.3215463633708944
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.7991618554368423
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2991618554368423
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.7844254355640856
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.2844254355640856
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.7443785498025496
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.077711883135883
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.699728611606801
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.949728611606801
Path matching:True
Request matching:True



======================================= 88 given SQL query ===========================================
Given individual SQL query: update category set lft=lft-2 where lft>?
Pre-processed SQL query : update category set lft=lft- where lft>?

+++++++++++++++++++++++ 1 instrument dynamic execution path using AspectJ +++++++++++++++++++++++++++++
before rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| category org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee.deletecategory(long, string) 
called| int org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.getindex(signature) 
called| int org.wallride.service.categoryservice..enhancerbyspringcglib..b0fec3ee..fastclassbyspringcglib..751fa33a.getindex(signature) 
called| object org.wallride.service.categoryservice..fastclassbyspringcglib..c6ab8c1c.invoke(int, object, object[]) 
called| category org.wallride.service.categoryservice.deletecategory(long, string) 
called| void com.sun.proxy..proxy188.lock(long) 
called| void org.wallride.repository.categoryrepositoryimpl.lock(long) 
sql|select category0_.id as col_0_0_ from category category0_ where category0_.id=? for update
called| category com.sun.proxy..proxy188.findonebyidandlanguage(long, string) 
sql|select category0_.id as id1_5_0_, category1_.id as id1_5_1_, children2_.id as id1_5_2_, category0_.created_at as created_2_5_0_, category0_.created_by as created_3_5_0_, category0_.updated_at as updated_4_5_0_, category0_.updated_by as updated_5_5_0_, category0_.code as code6_5_0_, category0_.description as descript7_5_0_, category0_.language as language8_5_0_, category0_.lft as lft9_5_0_, category0_.name as name10_5_0_, category0_.parent_id as parent_12_5_0_, category0_.rgt as rgt11_5_0_, category1_.created_at as created_2_5_1_, category1_.created_by as created_3_5_1_, category1_.updated_at as updated_4_5_1_, category1_.updated_by as updated_5_5_1_, category1_.code as code6_5_1_, category1_.description as descript7_5_1_, category1_.language as language8_5_1_, category1_.lft as lft9_5_1_, category1_.name as name10_5_1_, category1_.parent_id as parent_12_5_1_, category1_.rgt as rgt11_5_1_, children2_.created_at as created_2_5_2_, children2_.created_by as created_3_5_2_, children2_.updated_at as updated_4_5_2_, children2_.updated_by as updated_5_5_2_, children2_.code as code6_5_2_, children2_.description as descript7_5_2_, children2_.language as language8_5_2_, children2_.lft as lft9_5_2_, children2_.name as name10_5_2_, children2_.parent_id as parent_12_5_2_, children2_.rgt as rgt11_5_2_, children2_.parent_id as parent_12_5_0__, children2_.id as id1_5_0__ from category category0_ left outer join category category1_ on category0_.parent_id=category1_.id left outer join category children2_ on category0_.id=children2_.parent_id where category0_.id=? and category0_.language=?
called| object com.sun.proxy..proxy188.saveandflush(object) 
called| void com.sun.proxy..proxy188.delete(object) 
called| void com.sun.proxy..proxy188.shiftlftrgt(int, int) 
sql|delete from post_category where category_id=?
sql|delete from category where id=?
sql|update category set rgt=rgt-1, lft=lft-1 where lft between ? and ?
called| void com.sun.proxy..proxy188.shiftrgt(int) 
sql|update category set rgt=rgt-2 where rgt>?
called| void com.sun.proxy..proxy188.shiftlft(int) 
sql|update category set lft=lft-2 where lft>?
called| directory org.wallride.autoconfigure.infinispansingletoncachemanagerdirectoryprovider.getdirectory() 
called| connection org.wallride.autoconfigure.infinispandatasourceconnectionfactory.getconnection() 
called| void org.wallride.autoconfigure.infinispandatasourceconnectionfactory.releaseconnection(connection) 
after rest| domainobjectdeletedmodel org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string, long, authorizeduser, httpservletrequest, httpservletresponse) 
called| serializable org.wallride.web.support.domainobjectdeletedmodel.getid() 
called| void org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest, httpservletresponse, object, modelandview) 
called| string org.wallride.support.authorizeduser.getusername() 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse, rulechain) 
called| rewrittenurl org.wallride.web.support.extendedurlrewritefilter.ruleimpl.matches(string, httpservletrequest, httpservletresponse) 
called| rewritematch org.wallride.web.support.bloglanguagerewriterule.matches(httpservletrequest, httpservletresponse) 
called| boolean org.wallride.web.support.extendedurlrewritefilter.ruleimpl.isfilter() 
called| handlerexecutionchain org.wallride.autoconfigure.wallridedispatcherservlet.gethandler(httpservletrequest) 
called| boolean org.wallride.web.support.setupredirectinterceptor.prehandle(httpservletrequest, httpservletresponse, object) 
called| blog org.wallride.service.blogservice..enhancerbyspringcglib..b3662382.getblogbyid(long) 
called| object org.wallride.autoconfigure.cachekeygenerator.generate(object, method, object[]) 
called| locale org.wallride.web.support.pathvariablelocaleresolver.resolvelocale(httpservletrequest) 
called| string org.wallride.support.stringformatter.parse(string, locale) 
called| map org.wallride.web.controller.admin.category.categoryindexcontroller.articlecounts(string) 
called| map org.wallride.service.articleservice..enhancerbyspringcglib..b8570a48.countarticlesbycategoryidgrouped(post.status, string) 
called| object org.wallride.service.articleservice..fastclassbyspringcglib..ddd42ffa.invoke(int, object, object[]) 
called| map org.wallride.service.articleservice.countarticlesbycategoryidgrouped(post.status, string) 
called| list com.sun.proxy..proxy184.countbycategoryidgrouped(post.status, string) 
sql|select category2_.id as col_0_0_, count(article0_.id) as col_1_0_ from article article0_ inner join post article0_1_ on article0_.id=article0_1_.id left outer join post_category categories1_ on article0_.id=categories1_.post_id left outer join category category2_ on categories1_.category_id=category2_.id where article0_1_.status=? and article0_1_.language=? group by category2_.id
called| categorycreateform org.wallride.web.controller.admin.category.categoryindexcontroller.categorycreateform() 

+++++++++++++++++++++++++ Path matching metrics +++++++++++++++++++++++++++
path_matching_boolean:[False, False, False, False, True]
path_matching_number_k:[0, 0, 0, 0, 1]
path_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
path_ap:0.2
+++++++++++++++++++++++++ Request matching metrics +++++++++++++++++++++++++++
request_matching_boolean:[False, False, False, False, True]
request_matching_number_k:[0, 0, 0, 0, 1]
request_precision_k:[0.0, 0.0, 0.0, 0.0, 0.2]
request_ap:0.2

-------------------------Top1 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.6893742984791772
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1893742984791773
Path matching:False
Request matching:False
-------------------------Top2 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]

Syntactic Similarity:0.6652622380407697
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.1652622380407696
Path matching:False
Request matching:False
-------------------------Top3 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.5967480573417564
Semantic Similarity:0.5
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 1.0967480573417565
Path matching:False
Request matching:False
-------------------------Top4 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]

Syntactic Similarity:0.5701257153411072
Semantic Similarity:0.3333333333333333
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.9034590486744405
Path matching:False
Request matching:False
-------------------------Top5 ranked control flow path according to similarity score (Only top 5 are presented here)-------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]

Syntactic Similarity:0.6418562910463309
Semantic Similarity:0.25
Combining Similarity Score (Syntactic Similarity + Semantic Similarity): 0.8918562910463309
Path matching:True
Request matching:True
