##################################################################
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagerestcontroller.save(pagecreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
##################################################################
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.search(string,tagsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]
##################################################################
request:org.wallride.web.controller.admin.dashboardcontroller.dashboard(redirectattributes)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.dashboardcontroller.dashboard(string,model)
method:org.wallride.service.articleservice.countarticlesbystatus(status,string)
method:org.wallride.repository.articlerepository.countbystatus(status,string)
[select count(article.id) from article article where article.status = :status and article.language = :language and article.drafted is null ]
method:org.wallride.service.pageservice.countpagesbystatus(status,string)
method:org.wallride.repository.pagerepository.countbystatus(status,string)
[select count(page.id) from page page where page.status = :status and page.language = :language and page.drafted is null ]
method:org.wallride.service.categoryservice.getcategories(string)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.popularposts(string)
method:org.wallride.service.postservice.getpopularposts(string,type)
method:org.wallride.repository.popularpostrepository.findall(specification<popularpost>)
[select * from popularpost popularpost where popularpost in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
method:org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.dashboardcontroller.dashboard(string,model)
method:org.wallride.service.articleservice.countarticlesbystatus(status,string)
method:org.wallride.repository.articlerepository.countbystatus(status,string)
[select count(article.id) from article article where article.status = :status and article.language = :language and article.drafted is null ]
method:org.wallride.service.pageservice.countpagesbystatus(status,string)
method:org.wallride.repository.pagerepository.countbystatus(status,string)
[select count(page.id) from page page where page.status = :status and page.language = :language and page.drafted is null ]
method:org.wallride.service.categoryservice.getcategories(string)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.web.controller.admin.dashboardcontroller.popularposts(string)
method:org.wallride.service.postservice.getpopularposts(string,type)
method:org.wallride.repository.popularpostrepository.findall(specification<popularpost>)
[select * from popularpost popularpost where popularpost in :spec]
method:org.wallride.web.controller.admin.dashboardcontroller.recentpublishedarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
method:org.wallride.web.controller.admin.dashboardcontroller.recentdraftarticles(string)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.comment.commentbulkdeletecontroller.delete(commentbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkdeletecomment(commentbulkdeleterequest,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
##################################################################
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.update(long,commentform,bindingresult,authorizeduser)
method:org.wallride.service.commentservice.updatecomment(commentupdaterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
method:org.wallride.repository.commentrepository.saveandflushupdate(comment)
[update comment comment set updated_at=?, content=? where comment.id = ?]
##################################################################
request:org.wallride.web.controller.admin.article.articlebulkdeletecontroller.delete(articlebulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkdeletearticle(articlebulkdeleterequest,bindingresult)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]
##################################################################
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldcreatecontroller.save(string,customfieldcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.createcustomfield(customfieldcreaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findonebycodeandlanguage(string,string)
[select * from customfield custom_field where custom_field.code = :code and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.findmaxidxbylanguage(string)
[select coalesce(max(idx), 0) from customfield customfield where customfield.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.user.usereditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategoryeditform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
##################################################################
request:org.wallride.web.controller.guest.article.articleindexcontroller.day(int,int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.customfield.customfieldrestcontroller.sort(string,list<string>,bindingresult)
method:org.wallride.service.customfieldservice.updatecustomfieldorder(list<long>,string,bindingresult)
method:org.wallride.repository.customfieldrepository.updatenullbylanguage(string)
[update customfield customfield set customfield.idx = null where customfield.language = :language ]
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,string)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]
##################################################################
request:org.wallride.web.controller.admin.post.postselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.postservice.getpostbyid(long,string)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]
##################################################################
request:org.wallride.web.controller.guest.tagcontroller.index(pageable,model,httpservletrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]
##################################################################
request:org.wallride.web.controller.admin.page.pagedeletecontroller.delete(pagedeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
##################################################################
request:org.wallride.web.controller.guest.user.passwordresetcontroller.edit(string,redirectattributes)
method:org.wallride.service.userservice.getpasswordresettoken(string)
method:org.wallride.repository.passwordresettokenrepository.findonebytoken(string)
[select * from password_reset_token where password_reset_token.token = :token]
##################################################################
request:org.wallride.web.controller.admin.article.articlesearchcontroller.search(string,articlesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.analytics.googleanalyticsdeletecontroller.delete(string,redirectattributes)
method:org.wallride.service.blogservice.deletegoogleanalytics(long)
method:org.wallride.repository.blogrepository.findoneforupdatebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,string)
method:org.wallride.service.categoryservice.getcategories(categorysearchrequest)
method:org.wallride.service.categoryservice.getcategories(categorysearchrequest,pageable)
method:org.wallride.repository.categoryrepositoryimpl.search(categorysearchrequest,pageable)
[]
##################################################################
request:org.wallride.web.controller.admin.category.categoryselectcontroller.select(string,long,httpservletresponse)
method:org.wallride.service.categoryservice.getcategorybyid(long,string)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
##################################################################
request:org.wallride.web.controller.admin.page.pagetreecontroller.index(string,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.analytics.googleanalyticsindexcontroller.describe(model)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveaspublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageaspublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
##################################################################
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushcreate(tag)
[insert into tag tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.save(tagcreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
##################################################################
request:org.wallride.web.controller.guest.categorycontroller.index(pageable,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategories(categorysearchrequest,pageable)
method:org.wallride.repository.categoryrepositoryimpl.search(categorysearchrequest,pageable)
[]
##################################################################
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.signupcontroller.signup(signupform,bindingresult,redirectattributes)
method:org.wallride.service.signupservice.signup(signuprequest,role)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
##################################################################
request:org.wallride.web.controller.admin.comment.commentbulkunapprovecontroller.unapprove(commentbulkunapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkunapprovecomment(commentbulkunapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
##################################################################
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.update(categoryeditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.updatecategory(categoryupdaterequest,authorizeduser)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.saveupdate(category)
[update category category set code=? where id=?]
##################################################################
request:org.wallride.web.controller.admin.category.categoryrestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.deletecategory(long,string)
method:org.wallride.repository.categoryrepositoryimpl.lock(long)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.delete(category)
[delete from postcategory post_category where category.id = :category.id]
[delete from category category where category.id = :category.id]
method:org.wallride.repository.categoryrepository.shiftlftrgt(int,int)
[update category set rgt = rgt - 1, lft = lft - 1 where lft between :lft and :rgt ]
method:org.wallride.repository.categoryrepository.shiftrgt(int)
[update category set rgt = rgt - 2 where rgt > :rgt ]
method:org.wallride.repository.categoryrepository.shiftlft(int)
[update category set lft = lft - 2 where lft > :rgt ]
##################################################################
request:org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform,bindingresult,bloglanguage,authorizeduser)
method:org.wallride.service.commentservice.createcomment(commentcreaterequest,authorizeduser)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.comment.commentrestcontroller.create(commentform,bindingresult,bloglanguage,authorizeduser)
method:org.wallride.service.commentservice.createcomment(commentcreaterequest,authorizeduser)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.repository.commentrepository.saveandflushcreate(comment)
[insert into comment comment (created_at, created_by, updated_at, updated_by, approved, author_id, author_name, content, date, post_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
##################################################################
request:org.wallride.web.controller.admin.user.userdeletecontroller.delete(userdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.userservice.deleteuser(userdeleterequest,bindingresult)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasdraft(string,articleeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.articleservice.savearticleasdraft(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.admin.system.systemindexcontroller.clearcache(string,redirectattributes,httpservletrequest,httpservletresponse)
method:org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest,httpservletresponse,object,modelandview)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.article.articledeletecontroller.delete(articledeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.articleservice.deletearticle(articledeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.deletedelete(article)
[delete from post_media where post_id=?]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from article where id=?]
[delete from post where id=?]
##################################################################
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveaspublished(string,articlecreateform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
##################################################################
request:org.wallride.web.controller.admin.tag.tagsearchcontroller.parttageditform(string,long,model)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map<string,object>>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.sort(string,list<map<string,object>>)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
##################################################################
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.partcategorycreateform(string,long,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
##################################################################
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushupdate(tag)
[update tag tag set updated_at=?, name=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.update(tageditform,bindingresult,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.updatetag(tagupdaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushupdate(tag)
[update tag tag set updated_at=?, name=? where id=? ]
##################################################################
request:org.wallride.web.controller.admin.user.usersearchcontroller.search(string,usersearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.userservice.getusers(usersearchrequest,pageable)
method:org.wallride.repository.userrepositoryimpl.search(usersearchrequest,pageable)
[select * from user user where user.id in ()]
##################################################################
request:org.wallride.web.controller.admin.customfield.customfieldbulkdeletecontroller.delete(customfieldbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.bulkdeletecustomfield(customfieldbulkdeleterequest,bindingresult)
method:org.wallride.service.customfieldservice.deletecustomfield(customfielddeleterequest,bindingresult)
method:org.wallride.repository.customfieldrepositoryimpl.lock(long)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.repository.customfieldrepository.delete(customfield)
[delete from customfield custom_field where custom_field.id = :custom_field.id]
##################################################################
request:org.wallride.web.controller.guest.article.articleindexcontroller.month(int,int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
method:org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest,httpservletresponse,object,modelandview)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagepreviewcontroller.preview(string,pagepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
method:org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest,httpservletresponse,object,modelandview)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.guest.feedcontroller.indexatom(bloglanguage,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.customfieldservice.getallcustomfields(string)
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
##################################################################
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.findmaxrgt()
[select coalesce(max(rgt), 0) from category ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.save(categorycreateform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.categoryservice.createcategory(categorycreaterequest,authorizeduser)
method:org.wallride.repository.categoryrepository.findonebyidandlanguage(long,string)
[select * from category category where category.id = :id and category.language = :language]
method:org.wallride.repository.categoryrepository.unshiftrgt(int)
[update category set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.categoryrepository.unshiftlft(int)
[update category set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.categoryrepository.savecreate(category)
[insert into category category (created_at, updated_at, code, description, language, lft, name, rgt) values (?, ?, ?, ?, ?, ?, ?, ?)]
##################################################################
request:org.wallride.web.controller.guest.article.articleindexcontroller.author(string,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.userservice.getuserbyloginid(string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.article.articleindexcontroller.author(string,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.userservice.getuserbyloginid(string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
##################################################################
request:org.wallride.web.controller.guest.feedcontroller.categoryrss(string,bloglanguage,model)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.guest.article.articleindexcontroller.year(int,pageable,bloglanguage,httpservletrequest,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.guest.feedcontroller.indexrss(bloglanguage,model)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.customfieldservice.getallcustomfields(string)
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.edit(string,long,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]
##################################################################
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.profileupdatecontroller.update(profileupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updateprofile(profileupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
##################################################################
request:org.wallride.web.controller.admin.page.pagesearchcontroller.search(string,pagesearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.update(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.admin.article.articlebulkpublishcontroller.publish(articlebulkpublishform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkpublisharticle(articlebulkpublishrequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlebulkpublishcontroller.publish(articlebulkpublishform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkpublisharticle(articlebulkpublishrequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.admin.setup.setupcontroller.setup()
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.signup.signupcontroller.save(signupform,bindingresult)
method:org.wallride.service.signupservice.signup(signuprequest,role,string)
method:org.wallride.repository.userrepository.findonebyloginid(string)
[select * from user user where user.loginid = :loginid ]
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
##################################################################
request:org.wallride.web.controller.admin.user.userinvitationdeletecontroller.delele(string,userinvitationdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.deleteuserinvitation(userinvitationdeleterequest)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
##################################################################
request:org.wallride.web.controller.admin.analytics.googleanalyticsupdatecontroller.update(string,googleanalyticsupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.blogservice.updategoogleanalytics(googleanalyticsupdaterequest)
method:org.wallride.repository.blogrepository.findoneforupdatebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.user.userselect2controller.select(string,string)
method:org.wallride.service.userservice.getusers(usersearchrequest)
method:org.wallride.service.userservice.getusers(usersearchrequest,pageable)
method:org.wallride.repository.userrepositoryimpl.search(usersearchrequest,pageable)
[select * from user user where user.id in ()]
##################################################################
request:org.wallride.web.controller.admin.user.userselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.category.categoryrestcontroller.index(string)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryrestcontroller.index(string)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
##################################################################
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.article.articledescribecontroller.describe(int,int,int,string,bloglanguage,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
##################################################################
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlecreatecontroller.saveasdraft(string,articlecreateform,bindingresult,authorizeduser)
method:org.wallride.service.articleservice.createarticle(articlecreaterequest,status,authorizeduser)
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savecreate(article)
[select * from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into article article (id) values (?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
##################################################################
request:org.wallride.web.controller.admin.article.articlebulkunpublishcontroller.unpublish(articlebulkunpublishform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.bulkunpublisharticle(articlebulkunpublishrequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveasunpublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleasunpublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.unpublisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.guest.user.profileupdatecontroller.init(authorizeduser,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.page.pagerestcontroller.delete(string,long,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.pageservice.deletepage(long,string)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
##################################################################
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
method:org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest,httpservletresponse,object,modelandview)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articlepreviewcontroller.preview(string,articlepreviewform,bindingresult,authorizeduser,model,httpservletrequest,httpservletresponse)
method:org.wallride.service.mediaservice.getmedia(string)
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.service.customfieldservice.getcustomfieldbyid(long,string)
method:org.wallride.repository.customfieldrepository.findonebyidandlanguage(long,string)
[select * from customfield custom_field where custom_field.id = :id and custom_field.language = :language ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
method:org.wallride.web.support.defaultmodelattributeinterceptor.posthandle(httpservletrequest,httpservletresponse,object,modelandview)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.categorycontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]
##################################################################
request:org.wallride.web.controller.guest.comment.commentrestcontroller.delete(long,authorizeduser)
method:org.wallride.service.commentservice.deletecomment(commentdeleterequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
##################################################################
request:org.wallride.web.controller.admin.tag.tagbulkdeletecontroller.delete(tagbulkdeleteform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.tagservice.bulkdeletetag(tagbulkdeleterequest,bindingresult)
method:org.wallride.service.tagservice.deletetag(tagdeleterequest,bindingresult)
method:org.wallride.repository.tagrepository.findoneforupdatebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
method:org.wallride.repository.tagrepository.delete(tag)
[delete from posttag post_tag where post_tag.id = ]
[delete from tag tag where tag.id = :tag.id]
##################################################################
request:org.wallride.web.controller.admin.user.usereditcontroller.save(string,usereditform,bindingresult,string,authorizeduser,httpservletrequest,redirectattributes)
method:org.wallride.service.userservice.updateuser(userupdaterequest,errors,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasunpublished(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepageasunpublished(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.deletebydrafted(page)
[delete from page page where page.drafted = :drafted ]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
##################################################################
request:org.wallride.web.controller.guest.searchcontroller.search(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.update(string,pageeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
##################################################################
request:org.wallride.web.controller.admin.comment.commentsearchcontroller.search(string,commentsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.commentservice.getcomments(commentsearchrequest,pageable)
method:org.wallride.repository.commentrepositoryimpl.search(commentsearchrequest,pageable)
[select from comment left outer join user inner join post left outer join page left outer join article left outer join user left outer join media left outer join post left outer join page left outer join article left outer join page left outer join post where (comment.id in (?)) ]
##################################################################
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.user.userdescribecontroller.describe(string,long,string,model)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.getuserids(usersearchrequest)
method:org.wallride.repository.userrepositoryimpl.searchforid(usersearchrequest)
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.saveasdraft(string,pageeditform,bindingresult,model,authorizeduser)
method:org.wallride.service.pageservice.savepageasdraft(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.service.pageservice.savepage(pageupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savesave(page)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[delete from post_category where post_id=?]
##################################################################
request:org.wallride.web.controller.admin.category.categoryindexcontroller.index(string,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findalldistinctbylanguageorderbylftasc(string)
[select distinct language from category category where category.language = :language order by language asc]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.category.categoryindexcontroller.index(string,model)
method:org.wallride.support.categoryutils.getnodes(boolean)
method:org.wallride.service.categoryservice.getcategories(string,boolean)
method:org.wallride.repository.categoryrepository.findall(specification<category>,sort)
[select * from category category where category.id in :spec]
##################################################################
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,string)
method:org.wallride.service.tagservice.gettags(tagsearchrequest)
method:org.wallride.service.tagservice.gettags(tagsearchrequest,pageable)
method:org.wallride.repository.tagrepositoryimpl.search(tagsearchrequest,pageable)
[select * from tag tag where tag.id in ()]
##################################################################
request:org.wallride.web.controller.admin.tag.tagselect2controller.select(string,long,httpservletresponse)
method:org.wallride.service.tagservice.gettagbyid(long,string)
method:org.wallride.repository.tagrepository.findonebyidandlanguage(long,string)
[select * from tag tag where tag.id = :id and tag.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.comment.commentbulkapprovecontroller.approve(commentbulkapproveform,bindingresult,string,authorizeduser,redirectattributes,model)
method:org.wallride.service.commentservice.bulkapprovecomment(commentbulkapproverequest,authorizeduser)
method:org.wallride.repository.commentrepository.findoneforupdatebyid(long)
[select * from comment comment where comment.id = :id]
##################################################################
request:org.wallride.web.controller.admin.user.userinvitationresendcontroller.save(string,userinvitationresendform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.inviteagain(userinvitationresendrequest,bindingresult,authorizeduser)
method:org.wallride.repository.userinvitationrepository.findoneforupdatebytoken(string)
[select * from userinvitation user_invitation where user_invitation.token = :token ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.customfieldservice.getallcustomfields(string)
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveaspublished(string,pagecreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
##################################################################
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticleids(articlesearchrequest)
method:org.wallride.repository.articlerepositoryimpl.searchforid(articlesearchrequest)
[]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articledescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.articleservice.getarticlebyid(long)
method:org.wallride.repository.articlerepository.findonebyid(long)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id]
method:org.wallride.service.articleservice.getarticlebycode(string,string)
method:org.wallride.repository.articlerepository.findonebycodeandlanguage(string,string)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.code = :code and article.language = :language]
##################################################################
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpagecreatedialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.article.articledescribecontroller.partdeleteform(string,long,model)
method:org.wallride.service.articleservice.getarticlebyid(long,string)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
method:org.wallride.service.customfieldservice.getallcustomfields(string)
method:org.wallride.repository.customfieldrepository.findallbylanguage(string)
[select * from customfield custom_field where custom_field.language = :language ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pageeditcontroller.editdraft(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getdraftbyid(long)
method:org.wallride.repository.pagerepository.findone(specification<page>)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page0_1_.drafted_id=? and page0_.id=(?)]
##################################################################
request:org.wallride.web.controller.admin.post.postdescribecontroller.describe(string,long,redirectattributes)
method:org.wallride.service.postservice.getpostbyid(long,string)
method:org.wallride.repository.postrepository.findonebyidandlanguage(long,string)
[select * from post post where post.id = :id and post.language = :language]
##################################################################
request:org.wallride.web.controller.guest.user.passwordresetcontroller.reset(string,passwordresetform,bindingresult,bloglanguage,redirectattributes)
method:org.wallride.service.userservice.getpasswordresettoken(string)
method:org.wallride.repository.passwordresettokenrepository.findonebytoken(string)
[select * from password_reset_token where password_reset_token.token = :token]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordresetcontroller.reset(string,passwordresetform,bindingresult,bloglanguage,redirectattributes)
method:org.wallride.service.userservice.getpasswordresettoken(string)
method:org.wallride.repository.passwordresettokenrepository.findonebytoken(string)
[select * from password_reset_token where password_reset_token.token = :token]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,passwordresettoken)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordresetcontroller.reset(string,passwordresetform,bindingresult,bloglanguage,redirectattributes)
method:org.wallride.service.userservice.getpasswordresettoken(string)
method:org.wallride.repository.passwordresettokenrepository.findonebytoken(string)
[select * from password_reset_token where password_reset_token.token = :token]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,passwordresettoken)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.guest.user.passwordresetcontroller.token(passwordresetform,bindingresult,bloglanguage,redirectattributes)
method:org.wallride.service.userservice.createpasswordresettoken(passwordresettokencreaterequest)
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordresetcontroller.token(passwordresetform,bindingresult,bloglanguage,redirectattributes)
method:org.wallride.service.userservice.createpasswordresettoken(passwordresettokencreaterequest)
method:org.wallride.repository.userrepository.findonebyemail(string)
[select * from user user where user.email = :email ]
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.findmaxrgt()
[select coalesce(max(rgt), 0) from page ]
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagecreatecontroller.saveasdraft(string,pagecreateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.pageservice.createpage(pagecreaterequest,status,authorizeduser)
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.pagerepository.unshiftrgt(int)
[update page set rgt = rgt + 2 where rgt >= :rgt ]
method:org.wallride.repository.pagerepository.unshiftlft(int)
[update page set lft = lft + 2 where lft > :rgt ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.pagerepository.savecreate(page)
[select from category left outer join category where category0_.id=?]
[insert into post post (created_at, created_by, updated_at, updated_by, author_id, body, code, date, language, seo_description, seo_keywords, seo_title, status, title, views) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ]
[insert into page page (lft, rgt, id) values (?, ?, ?) ]
[insert into postcategory post_category (post_id, category_id) values (?, ?) ]
[insert into posttag post_tag (post_id, tag_id) values (?, ?) ]
[select from user user where user0_.id=?]
##################################################################
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpageids(pagesearchrequest)
method:org.wallride.repository.pagerepositoryimpl.searchforid(pagesearchrequest)
[select from page inner join post left outer join media left outer join page left outer join post left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag cross join page inner join post cross join page inner join post where page0_1_.language=? and page0_1_.status=? and page1_.id=(select page3_.id from page page3_ inner join post page3_1_ on page3_.id=page3_1_.id where page3_1_.language=? and (page3_.parent_id is null) and page3_.lft<=? and page3_.rgt>=?) and page2_.id=? and (page0_.lft between page1_.lft and page1_.rgt) and (page2_.lft between page0_.lft and page0_.rgt)   order by]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.page.pagedescribecontroller.describe(string,long,string,model,redirectattributes)
method:org.wallride.service.pageservice.getpagebyid(long)
method:org.wallride.repository.pagerepository.findonebyid(long)
[select from page page inner join post left outer join page left outer join post left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id ]
method:org.wallride.service.pageservice.getpagebycode(string,string)
method:org.wallride.repository.pagerepository.findonebycodeandlanguage(string,string)
[select * from page page where page.code = :code and page.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.user.userinvitationcreatecontroller.save(string,userinvitationcreateform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.inviteusers(userinvitationcreaterequest,bindingresult,authorizeduser)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.page.pagebulkdeletecontroller.delete(pagebulkdeleteform,bindingresult,string,redirectattributes)
method:org.wallride.service.pageservice.bulkdeletepage(pagebulkdeleterequest,bindingresult)
method:org.wallride.service.pageservice.deletepage(pagedeleterequest,bindingresult)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
method:org.wallride.repository.pagerepository.delete(page)
[delete from post_media where post_id=? ]
[delete from post_related_post where related_id=? ]
[delete from post_category where post_id=?]
[delete from page where id=? ]
[delete from post where id=?]
method:org.wallride.repository.pagerepository.shiftlftrgt(int,int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft between ? and ?]
[update page set rgt=rgt-1, lft=lft-1 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftrgt(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.rgt>?]
[update page set rgt=rgt-2 where (id) in (select id from ht_page)]
method:org.wallride.repository.pagerepository.shiftlft(int)
[insert into ht_page select page0_.id as id from page page0_ inner join post page0_1_ on page0_.id=page0_1_.id where page0_.lft>?]
[update page set lft=lft-2 where (id) in (select id from ht_page)]
##################################################################
request:org.wallride.web.controller.admin.setup.setupcontroller.save(setupform,bindingresult,redirectattributes)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
method:org.wallride.service.setupservice.setup(setuprequest)
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.setup.setupcontroller.save(setupform,bindingresult,redirectattributes)
method:org.wallride.service.blogservice.getblogbyid(long)
method:org.wallride.repository.blogrepository.findonebyid(long)
[select * from blog blog where blog.id = :id ]
##################################################################
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.tagrepository.saveandflushcreate(tag)
[insert into tag tag (created_at, created_by, updated_at, updated_by, language, name) values (?, ?, ?, ?, ?, ?) ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.tag.tagrestcontroller.merge(tagmergeform,bindingresult,authorizeduser,httpservletrequest,httpservletresponse)
method:org.wallride.service.tagservice.mergetags(tagmergerequest,authorizeduser)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest)
method:org.wallride.service.tagservice.createtag(tagcreaterequest,authorizeduser)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string,customfieldeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findoneforupdatebyid(long)
[select from customfield customfield where customfield.id=:id for update  ]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.customfield.customfieldeditcontroller.update(string,customfieldeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.customfieldservice.updatecustomfield(customfieldupdaterequest,authorizeduser)
method:org.wallride.repository.customfieldrepository.findoneforupdatebyid(long)
[select from customfield customfield where customfield.id=:id for update  ]
method:org.wallride.repository.customfieldrepository.saveupdate(customfield)
[update customfield custom_field set description=?, field_type=? where id=?]
##################################################################
request:org.wallride.web.controller.guest.feedcontroller.categoryatom(string,bloglanguage,model)
method:org.wallride.service.categoryservice.getcategorybycode(string,string)
method:org.wallride.repository.categoryrepository.findonebycodeandlanguage(string,string)
[select * from category category where category.code = :code and category.language = :language]
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
##################################################################
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.getuserbyid(long)
method:org.wallride.repository.userrepository.findonebyid(long)
[select * from user user where user.id = :id ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
method:org.wallride.repository.userrepository.saveandflush(user)
[update user user set description=?, nickname=? where id=? ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.user.passwordupdatecontroller.update(passwordupdateform,bindingresult,authorizeduser,redirectattributes)
method:org.wallride.service.userservice.updatepassword(passwordupdaterequest,authorizeduser)
method:org.wallride.repository.userrepository.findoneforupdatebyid(long)
[select * from user user where user.id = :id for update]
##################################################################
request:org.wallride.web.controller.guest.tagcontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.tagservice.gettagbyname(string,string)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.service.postservice.getposts(postsearchrequest,pageable)
method:org.wallride.repository.postrepositoryimpl.search(postsearchrequest,pageable)
[select from post left outer join page left outer join article left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (post.id in (?)) ]
------------------------------------------------------------------
request:org.wallride.web.controller.guest.tagcontroller.post(string,pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.tagservice.gettagbyname(string,string)
method:org.wallride.repository.tagrepository.findonebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
##################################################################
request:org.wallride.web.controller.admin.page.pagerestcontroller.sort(string,list<map<string,object>>)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.page.pagerestcontroller.index(string)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
##################################################################
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.tagrepository.findoneforupdatebynameandlanguage(string,string)
[select * from tag tag where tag.name = :name and tag.language = :language ]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
------------------------------------------------------------------
request:org.wallride.web.controller.admin.article.articleeditcontroller.saveaspublished(string,articleeditform,bindingresult,string,authorizeduser,redirectattributes)
method:org.wallride.service.articleservice.savearticleaspublished(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.service.articleservice.publisharticle(article)
method:org.wallride.service.articleservice.getdraftbyid(long)
method:org.wallride.repository.articlerepository.findone(specification<article>)
[select * from article article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where  article.drafted_id = ?]
method:org.wallride.service.articleservice.savearticle(articleupdaterequest,authorizeduser)
method:org.wallride.repository.postrepositoryimpl.lock(long)
method:org.wallride.repository.articlerepository.findonebyidandlanguage(long,string)
[select from article inner join post left outer join media left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join user left outer join postcategory left outer join category left outer join post left outer join page left outer join article left outer join posttag left outer join tag where article.id = :id and article.language = :language ]
[select from comment where comments0_.post_id=?]
method:org.wallride.repository.postrepository.findonebycodeandlanguage(string,string)
[select from post post left outer join page left outer join article left outer join media left outer join user where post.code=:code and post.language=:language]
method:org.wallride.repository.mediarepository.findonebyid(string)
method:org.wallride.repository.articlerepository.savesave(article)
[update post set updated_at=?, body=?, date=? where id=?]
[delete from post_media where post_id=?]
[select from comment where post_id =?]
[select from comment where comments0_.post_id=?]
##################################################################
request:org.wallride.web.controller.admin.customfield.customfieldsearchcontroller.search(string,customfieldsearchform,bindingresult,pageable,model,httpservletrequest)
method:org.wallride.service.customfieldservice.getcustomfields(customfieldsearchrequest,pageable)
method:org.wallride.repository.customfieldrepositoryimpl.search(customfieldsearchrequest,pageable)
[select * from customfield custom_field where custom_field.id in ()]
##################################################################
request:org.wallride.web.controller.admin.page.pagedescribecontroller.partdeletedialog(string,long,model)
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
##################################################################
request:org.wallride.web.controller.admin.page.pagetreecontroller.partpageeditdialog(string,long,model)
method:org.wallride.support.pageutils.getnodes(boolean)
method:org.wallride.service.pageservice.getpages(pagesearchrequest)
method:org.wallride.service.pageservice.getpages(pagesearchrequest,pageable)
method:org.wallride.repository.pagerepositoryimpl.search(pagesearchrequest,pageable)
[select from page inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag left outer join page left outer join post left outer join page left outer join post where (page.id in (?))]
method:org.wallride.service.pageservice.getpagebyid(long,string)
method:org.wallride.repository.pagerepository.findonebyidandlanguage(long,string)
[select from page inner join post left outer join media left outer join page left outer join post left outer join postrelatedpost left outer join post left outer join page left outer join article left outer join customfieldvalue left outer join customfield left outer join page left outer join post left outer join user left outer join postcategory left outer join category left outer join posttag left outer join tag where page.id = :id and page.language = :language]
##################################################################
request:org.wallride.web.controller.guest.indexcontroller.index(pageable,bloglanguage,model,httpservletrequest)
method:org.wallride.service.articleservice.getarticles(articlesearchrequest,pageable)
method:org.wallride.repository.articlerepositoryimpl.search(articlesearchrequest,pageable)
[select from article inner join post left outer join user left outer join postcategory left outer join category left outer join category left outer join media left outer join customfieldvalue left outer join customfield left outer join post left outer join page left outer join article left outer join page left outer join post left outer join posttag left outer join tag where (article.id in (?))]
